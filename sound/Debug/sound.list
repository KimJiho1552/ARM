
sound.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000300c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003118  08003118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031e4  080031e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031e4  080031e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031e4  080031e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e8  080031e8  000131e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000070  0800325c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  0800325c  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006de8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f3  00000000  00000000  00026e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  00028678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000750  00000000  00000000  00028e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f84  00000000  00000000  000295c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000875e  00000000  00000000  00041544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088535  00000000  00000000  00049ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d21d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c8  00000000  00000000  000d2228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003100 	.word	0x08003100

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003100 	.word	0x08003100

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f001 fe9e 	bl	8001e9e <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000bc 	.word	0x200000bc

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000174:	f000 fafe 	bl	8000774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000178:	f000 f822 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017c:	f000 f8e0 	bl	8000340 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000180:	f000 f8b4 	bl	80002ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000184:	f000 f874 	bl	8000270 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000188:	480a      	ldr	r0, [pc, #40]	; (80001b4 <main+0x44>)
 800018a:	f000 fc51 	bl	8000a30 <HAL_ADC_Start>
	  mic = (uint16_t)HAL_ADC_GetValue(&hadc1);
 800018e:	4809      	ldr	r0, [pc, #36]	; (80001b4 <main+0x44>)
 8000190:	f000 fcfc 	bl	8000b8c <HAL_ADC_GetValue>
 8000194:	4603      	mov	r3, r0
 8000196:	b29b      	uxth	r3, r3
 8000198:	461a      	mov	r2, r3
 800019a:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <main+0x48>)
 800019c:	601a      	str	r2, [r3, #0]
	  printf("mic : %d\n\r", mic);
 800019e:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <main+0x48>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4619      	mov	r1, r3
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <main+0x4c>)
 80001a6:	f002 f817 	bl	80021d8 <iprintf>
	  HAL_Delay(100);
 80001aa:	2064      	movs	r0, #100	; 0x64
 80001ac:	f000 fb44 	bl	8000838 <HAL_Delay>
  {
 80001b0:	e7ea      	b.n	8000188 <main+0x18>
 80001b2:	bf00      	nop
 80001b4:	2000008c 	.word	0x2000008c
 80001b8:	20000100 	.word	0x20000100
 80001bc:	08003118 	.word	0x08003118

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b094      	sub	sp, #80	; 0x50
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 fffa 	bl	80021c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	f107 0314 	add.w	r3, r7, #20
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
 80001e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f0:	2302      	movs	r3, #2
 80001f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f4:	2301      	movs	r3, #1
 80001f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f8:	2310      	movs	r3, #16
 80001fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fc:	2302      	movs	r3, #2
 80001fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000200:	2300      	movs	r3, #0
 8000202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000204:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000208:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	4618      	mov	r0, r3
 8000210:	f001 f928 	bl	8001464 <HAL_RCC_OscConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800021a:	f000 f8ff 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021e:	230f      	movs	r3, #15
 8000220:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000234:	f107 0314 	add.w	r3, r7, #20
 8000238:	2102      	movs	r1, #2
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fb94 	bl	8001968 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000246:	f000 f8e9 	bl	800041c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800024a:	2302      	movs	r3, #2
 800024c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800024e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000252:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fd1e 	bl	8001c98 <HAL_RCCEx_PeriphCLKConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000262:	f000 f8db 	bl	800041c <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3750      	adds	r7, #80	; 0x50
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000280:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <MX_ADC1_Init+0x74>)
 8000282:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <MX_ADC1_Init+0x78>)
 8000284:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <MX_ADC1_Init+0x74>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MX_ADC1_Init+0x74>)
 800028e:	2201      	movs	r2, #1
 8000290:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <MX_ADC1_Init+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000298:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <MX_ADC1_Init+0x74>)
 800029a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800029e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a0:	4b10      	ldr	r3, [pc, #64]	; (80002e4 <MX_ADC1_Init+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <MX_ADC1_Init+0x74>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <MX_ADC1_Init+0x74>)
 80002ae:	f000 fae7 	bl	8000880 <HAL_ADC_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002b8:	f000 f8b0 	bl	800041c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002bc:	2300      	movs	r3, #0
 80002be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c0:	2301      	movs	r3, #1
 80002c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80002c4:	2302      	movs	r3, #2
 80002c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4619      	mov	r1, r3
 80002cc:	4805      	ldr	r0, [pc, #20]	; (80002e4 <MX_ADC1_Init+0x74>)
 80002ce:	f000 fc69 	bl	8000ba4 <HAL_ADC_ConfigChannel>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002d8:	f000 f8a0 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	40012400 	.word	0x40012400

080002ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <MX_USART2_UART_Init+0x50>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000324:	f001 fd6e 	bl	8001e04 <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800032e:	f000 f875 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	200000bc 	.word	0x200000bc
 800033c:	40004400 	.word	0x40004400

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000354:	4b2d      	ldr	r3, [pc, #180]	; (800040c <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a2c      	ldr	r2, [pc, #176]	; (800040c <MX_GPIO_Init+0xcc>)
 800035a:	f043 0310 	orr.w	r3, r3, #16
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b2a      	ldr	r3, [pc, #168]	; (800040c <MX_GPIO_Init+0xcc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0310 	and.w	r3, r3, #16
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036c:	4b27      	ldr	r3, [pc, #156]	; (800040c <MX_GPIO_Init+0xcc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a26      	ldr	r2, [pc, #152]	; (800040c <MX_GPIO_Init+0xcc>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b24      	ldr	r3, [pc, #144]	; (800040c <MX_GPIO_Init+0xcc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0320 	and.w	r3, r3, #32
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b21      	ldr	r3, [pc, #132]	; (800040c <MX_GPIO_Init+0xcc>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a20      	ldr	r2, [pc, #128]	; (800040c <MX_GPIO_Init+0xcc>)
 800038a:	f043 0304 	orr.w	r3, r3, #4
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b1e      	ldr	r3, [pc, #120]	; (800040c <MX_GPIO_Init+0xcc>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	607b      	str	r3, [r7, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <MX_GPIO_Init+0xcc>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a1a      	ldr	r2, [pc, #104]	; (800040c <MX_GPIO_Init+0xcc>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <MX_GPIO_Init+0xcc>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0308 	and.w	r3, r3, #8
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2120      	movs	r1, #32
 80003b8:	4815      	ldr	r0, [pc, #84]	; (8000410 <MX_GPIO_Init+0xd0>)
 80003ba:	f001 f819 	bl	80013f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_GPIO_Init+0xd4>)
 80003c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	4619      	mov	r1, r3
 80003d2:	4811      	ldr	r0, [pc, #68]	; (8000418 <MX_GPIO_Init+0xd8>)
 80003d4:	f000 fe88 	bl	80010e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003d8:	2320      	movs	r3, #32
 80003da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	2301      	movs	r3, #1
 80003de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	2302      	movs	r3, #2
 80003e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	4619      	mov	r1, r3
 80003ee:	4808      	ldr	r0, [pc, #32]	; (8000410 <MX_GPIO_Init+0xd0>)
 80003f0:	f000 fe7a 	bl	80010e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2100      	movs	r1, #0
 80003f8:	2028      	movs	r0, #40	; 0x28
 80003fa:	f000 fe3e 	bl	800107a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003fe:	2028      	movs	r0, #40	; 0x28
 8000400:	f000 fe57 	bl	80010b2 <HAL_NVIC_EnableIRQ>

}
 8000404:	bf00      	nop
 8000406:	3720      	adds	r7, #32
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40021000 	.word	0x40021000
 8000410:	40010800 	.word	0x40010800
 8000414:	10110000 	.word	0x10110000
 8000418:	40011000 	.word	0x40011000

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	e7fe      	b.n	8000424 <Error_Handler+0x8>
	...

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <HAL_MspInit+0x5c>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <HAL_MspInit+0x5c>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <HAL_MspInit+0x5c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a0e      	ldr	r2, [pc, #56]	; (8000484 <HAL_MspInit+0x5c>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_MspInit+0x60>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <HAL_MspInit+0x60>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	40021000 	.word	0x40021000
 8000488:	40010000 	.word	0x40010000

0800048c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b088      	sub	sp, #32
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	605a      	str	r2, [r3, #4]
 800049e:	609a      	str	r2, [r3, #8]
 80004a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a14      	ldr	r2, [pc, #80]	; (80004f8 <HAL_ADC_MspInit+0x6c>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d121      	bne.n	80004f0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <HAL_ADC_MspInit+0x70>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a12      	ldr	r2, [pc, #72]	; (80004fc <HAL_ADC_MspInit+0x70>)
 80004b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b10      	ldr	r3, [pc, #64]	; (80004fc <HAL_ADC_MspInit+0x70>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <HAL_ADC_MspInit+0x70>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	4a0c      	ldr	r2, [pc, #48]	; (80004fc <HAL_ADC_MspInit+0x70>)
 80004ca:	f043 0304 	orr.w	r3, r3, #4
 80004ce:	6193      	str	r3, [r2, #24]
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <HAL_ADC_MspInit+0x70>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	f003 0304 	and.w	r3, r3, #4
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004dc:	2301      	movs	r3, #1
 80004de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004e0:	2303      	movs	r3, #3
 80004e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <HAL_ADC_MspInit+0x74>)
 80004ec:	f000 fdfc 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004f0:	bf00      	nop
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40012400 	.word	0x40012400
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800

08000504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a15      	ldr	r2, [pc, #84]	; (8000574 <HAL_UART_MspInit+0x70>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d123      	bne.n	800056c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <HAL_UART_MspInit+0x74>)
 8000526:	69db      	ldr	r3, [r3, #28]
 8000528:	4a13      	ldr	r2, [pc, #76]	; (8000578 <HAL_UART_MspInit+0x74>)
 800052a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800052e:	61d3      	str	r3, [r2, #28]
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <HAL_UART_MspInit+0x74>)
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_UART_MspInit+0x74>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <HAL_UART_MspInit+0x74>)
 8000542:	f043 0304 	orr.w	r3, r3, #4
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <HAL_UART_MspInit+0x74>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0304 	and.w	r3, r3, #4
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000554:	230c      	movs	r3, #12
 8000556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000558:	2302      	movs	r3, #2
 800055a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055c:	2302      	movs	r3, #2
 800055e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <HAL_UART_MspInit+0x78>)
 8000568:	f000 fdbe 	bl	80010e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40004400 	.word	0x40004400
 8000578:	40021000 	.word	0x40021000
 800057c:	40010800 	.word	0x40010800

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr

080005b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005c6:	f000 f91b 	bl	8000800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}

080005ce <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80005d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005d6:	f000 ff23 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}

080005de <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	b086      	sub	sp, #24
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	60f8      	str	r0, [r7, #12]
 80005e6:	60b9      	str	r1, [r7, #8]
 80005e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e00a      	b.n	8000606 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005f0:	f3af 8000 	nop.w
 80005f4:	4601      	mov	r1, r0
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	60ba      	str	r2, [r7, #8]
 80005fc:	b2ca      	uxtb	r2, r1
 80005fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	3301      	adds	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	429a      	cmp	r2, r3
 800060c:	dbf0      	blt.n	80005f0 <_read+0x12>
	}

return len;
 800060e:	687b      	ldr	r3, [r7, #4]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e009      	b.n	800063e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	60ba      	str	r2, [r7, #8]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fd8a 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbf1      	blt.n	800062a <_write+0x12>
	}
	return len;
 8000646:	687b      	ldr	r3, [r7, #4]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <_close>:

int _close(int file)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	return -1;
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
 800066e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000676:	605a      	str	r2, [r3, #4]
	return 0;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <_isatty>:

int _isatty(int file)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	return 1;
 800068c:	2301      	movs	r3, #1
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
	return 0;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b8:	4a14      	ldr	r2, [pc, #80]	; (800070c <_sbrk+0x5c>)
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <_sbrk+0x60>)
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <_sbrk+0x64>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d102      	bne.n	80006d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <_sbrk+0x64>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <_sbrk+0x68>)
 80006d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <_sbrk+0x64>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4413      	add	r3, r2
 80006da:	693a      	ldr	r2, [r7, #16]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d207      	bcs.n	80006f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e0:	f001 fd48 	bl	8002174 <__errno>
 80006e4:	4603      	mov	r3, r0
 80006e6:	220c      	movs	r2, #12
 80006e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	e009      	b.n	8000704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <_sbrk+0x64>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <_sbrk+0x64>)
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a05      	ldr	r2, [pc, #20]	; (8000714 <_sbrk+0x64>)
 8000700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000702:	68fb      	ldr	r3, [r7, #12]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20005000 	.word	0x20005000
 8000710:	00000400 	.word	0x00000400
 8000714:	20000104 	.word	0x20000104
 8000718:	20000120 	.word	0x20000120

0800071c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800072a:	490d      	ldr	r1, [pc, #52]	; (8000760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000740:	4c0a      	ldr	r4, [pc, #40]	; (800076c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800074e:	f7ff ffe5 	bl	800071c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000752:	f001 fd15 	bl	8002180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000756:	f7ff fd0b 	bl	8000170 <main>
  bx lr
 800075a:	4770      	bx	lr
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000764:	080031ec 	.word	0x080031ec
  ldr r2, =_sbss
 8000768:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800076c:	2000011c 	.word	0x2000011c

08000770 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC1_2_IRQHandler>
	...

08000774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_Init+0x28>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a07      	ldr	r2, [pc, #28]	; (800079c <HAL_Init+0x28>)
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000784:	2003      	movs	r0, #3
 8000786:	f000 fc6d 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 f808 	bl	80007a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000790:	f7ff fe4a 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40022000 	.word	0x40022000

080007a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_InitTick+0x54>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_InitTick+0x58>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4619      	mov	r1, r3
 80007b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fc85 	bl	80010ce <HAL_SYSTICK_Config>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00e      	b.n	80007ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d80a      	bhi.n	80007ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d4:	2200      	movs	r2, #0
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295
 80007dc:	f000 fc4d 	bl	800107a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e0:	4a06      	ldr	r2, [pc, #24]	; (80007fc <HAL_InitTick+0x5c>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e000      	b.n	80007ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000004 	.word	0x20000004

08000800 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <HAL_IncTick+0x1c>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x20>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	4a03      	ldr	r2, [pc, #12]	; (8000820 <HAL_IncTick+0x20>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	20000008 	.word	0x20000008
 8000820:	20000108 	.word	0x20000108

08000824 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  return uwTick;
 8000828:	4b02      	ldr	r3, [pc, #8]	; (8000834 <HAL_GetTick+0x10>)
 800082a:	681b      	ldr	r3, [r3, #0]
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	20000108 	.word	0x20000108

08000838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000840:	f7ff fff0 	bl	8000824 <HAL_GetTick>
 8000844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000850:	d005      	beq.n	800085e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_Delay+0x44>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800085e:	bf00      	nop
 8000860:	f7ff ffe0 	bl	8000824 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	429a      	cmp	r2, r3
 800086e:	d8f7      	bhi.n	8000860 <HAL_Delay+0x28>
  {
  }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008

08000880 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000888:	2300      	movs	r3, #0
 800088a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d101      	bne.n	80008a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e0be      	b.n	8000a20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d109      	bne.n	80008c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff fde4 	bl	800048c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 fabf 	bl	8000e48 <ADC_ConversionStop_Disable>
 80008ca:	4603      	mov	r3, r0
 80008cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d2:	f003 0310 	and.w	r3, r3, #16
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f040 8099 	bne.w	8000a0e <HAL_ADC_Init+0x18e>
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f040 8095 	bne.w	8000a0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008ec:	f023 0302 	bic.w	r3, r3, #2
 80008f0:	f043 0202 	orr.w	r2, r3, #2
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000900:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7b1b      	ldrb	r3, [r3, #12]
 8000906:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000908:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	4313      	orrs	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000918:	d003      	beq.n	8000922 <HAL_ADC_Init+0xa2>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d102      	bne.n	8000928 <HAL_ADC_Init+0xa8>
 8000922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000926:	e000      	b.n	800092a <HAL_ADC_Init+0xaa>
 8000928:	2300      	movs	r3, #0
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7d1b      	ldrb	r3, [r3, #20]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d119      	bne.n	800096c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7b1b      	ldrb	r3, [r3, #12]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d109      	bne.n	8000954 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	3b01      	subs	r3, #1
 8000946:	035a      	lsls	r2, r3, #13
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	e00b      	b.n	800096c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000958:	f043 0220 	orr.w	r2, r3, #32
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000964:	f043 0201 	orr.w	r2, r3, #1
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	430a      	orrs	r2, r1
 800097e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <HAL_ADC_Init+0x1a8>)
 8000988:	4013      	ands	r3, r2
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	6812      	ldr	r2, [r2, #0]
 800098e:	68b9      	ldr	r1, [r7, #8]
 8000990:	430b      	orrs	r3, r1
 8000992:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800099c:	d003      	beq.n	80009a6 <HAL_ADC_Init+0x126>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d104      	bne.n	80009b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	691b      	ldr	r3, [r3, #16]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	051b      	lsls	r3, r3, #20
 80009ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	430a      	orrs	r2, r1
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	689a      	ldr	r2, [r3, #8]
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_ADC_Init+0x1ac>)
 80009cc:	4013      	ands	r3, r2
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d10b      	bne.n	80009ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009de:	f023 0303 	bic.w	r3, r3, #3
 80009e2:	f043 0201 	orr.w	r2, r3, #1
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009ea:	e018      	b.n	8000a1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f0:	f023 0312 	bic.w	r3, r3, #18
 80009f4:	f043 0210 	orr.w	r2, r3, #16
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a00:	f043 0201 	orr.w	r2, r3, #1
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a0c:	e007      	b.n	8000a1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	f043 0210 	orr.w	r2, r3, #16
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	ffe1f7fd 	.word	0xffe1f7fd
 8000a2c:	ff1f0efe 	.word	0xff1f0efe

08000a30 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d101      	bne.n	8000a4a <HAL_ADC_Start+0x1a>
 8000a46:	2302      	movs	r3, #2
 8000a48:	e098      	b.n	8000b7c <HAL_ADC_Start+0x14c>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 f99e 	bl	8000d94 <ADC_Enable>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f040 8087 	bne.w	8000b72 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a6c:	f023 0301 	bic.w	r3, r3, #1
 8000a70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a41      	ldr	r2, [pc, #260]	; (8000b84 <HAL_ADC_Start+0x154>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d105      	bne.n	8000a8e <HAL_ADC_Start+0x5e>
 8000a82:	4b41      	ldr	r3, [pc, #260]	; (8000b88 <HAL_ADC_Start+0x158>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d115      	bne.n	8000aba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d026      	beq.n	8000af6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ab0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ab8:	e01d      	b.n	8000af6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a2f      	ldr	r2, [pc, #188]	; (8000b88 <HAL_ADC_Start+0x158>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d004      	beq.n	8000ada <HAL_ADC_Start+0xaa>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a2b      	ldr	r2, [pc, #172]	; (8000b84 <HAL_ADC_Start+0x154>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d10d      	bne.n	8000af6 <HAL_ADC_Start+0xc6>
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <HAL_ADC_Start+0x158>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d007      	beq.n	8000af6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b06:	f023 0206 	bic.w	r2, r3, #6
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b0e:	e002      	b.n	8000b16 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f06f 0202 	mvn.w	r2, #2
 8000b26:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b36:	d113      	bne.n	8000b60 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b3c:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <HAL_ADC_Start+0x154>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d105      	bne.n	8000b4e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <HAL_ADC_Start+0x158>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d108      	bne.n	8000b60 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	689a      	ldr	r2, [r3, #8]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	e00c      	b.n	8000b7a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	e003      	b.n	8000b7a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40012800 	.word	0x40012800
 8000b88:	40012400 	.word	0x40012400

08000b8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d101      	bne.n	8000bc4 <HAL_ADC_ConfigChannel+0x20>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	e0dc      	b.n	8000d7e <HAL_ADC_ConfigChannel+0x1da>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2b06      	cmp	r3, #6
 8000bd2:	d81c      	bhi.n	8000c0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	3b05      	subs	r3, #5
 8000be6:	221f      	movs	r2, #31
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	4019      	ands	r1, r3
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	3b05      	subs	r3, #5
 8000c00:	fa00 f203 	lsl.w	r2, r0, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c0c:	e03c      	b.n	8000c88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b0c      	cmp	r3, #12
 8000c14:	d81c      	bhi.n	8000c50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	4613      	mov	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4413      	add	r3, r2
 8000c26:	3b23      	subs	r3, #35	; 0x23
 8000c28:	221f      	movs	r2, #31
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	4019      	ands	r1, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	6818      	ldr	r0, [r3, #0]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b23      	subs	r3, #35	; 0x23
 8000c42:	fa00 f203 	lsl.w	r2, r0, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000c4e:	e01b      	b.n	8000c88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	3b41      	subs	r3, #65	; 0x41
 8000c62:	221f      	movs	r2, #31
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	4019      	ands	r1, r3
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	6818      	ldr	r0, [r3, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	3b41      	subs	r3, #65	; 0x41
 8000c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b09      	cmp	r3, #9
 8000c8e:	d91c      	bls.n	8000cca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68d9      	ldr	r1, [r3, #12]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3b1e      	subs	r3, #30
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	4019      	ands	r1, r3
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	6898      	ldr	r0, [r3, #8]
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	3b1e      	subs	r3, #30
 8000cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	e019      	b.n	8000cfe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6919      	ldr	r1, [r3, #16]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	2207      	movs	r2, #7
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4019      	ands	r1, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	6898      	ldr	r0, [r3, #8]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b10      	cmp	r3, #16
 8000d04:	d003      	beq.n	8000d0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d0a:	2b11      	cmp	r3, #17
 8000d0c:	d132      	bne.n	8000d74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d125      	bne.n	8000d64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d126      	bne.n	8000d74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b10      	cmp	r3, #16
 8000d3c:	d11a      	bne.n	8000d74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <HAL_ADC_ConfigChannel+0x1e8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	0c9a      	lsrs	r2, r3, #18
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d54:	e002      	b.n	8000d5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1f9      	bne.n	8000d56 <HAL_ADC_ConfigChannel+0x1b2>
 8000d62:	e007      	b.n	8000d74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	f043 0220 	orr.w	r2, r3, #32
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40012400 	.word	0x40012400
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	431bde83 	.word	0x431bde83

08000d94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d040      	beq.n	8000e34 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689a      	ldr	r2, [r3, #8]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 0201 	orr.w	r2, r2, #1
 8000dc0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dc2:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <ADC_Enable+0xac>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <ADC_Enable+0xb0>)
 8000dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dcc:	0c9b      	lsrs	r3, r3, #18
 8000dce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000dd0:	e002      	b.n	8000dd8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f9      	bne.n	8000dd2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dde:	f7ff fd21 	bl	8000824 <HAL_GetTick>
 8000de2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000de4:	e01f      	b.n	8000e26 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000de6:	f7ff fd1d 	bl	8000824 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d918      	bls.n	8000e26 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d011      	beq.n	8000e26 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e06:	f043 0210 	orr.w	r2, r3, #16
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e12:	f043 0201 	orr.w	r2, r3, #1
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e007      	b.n	8000e36 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d1d8      	bne.n	8000de6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000000 	.word	0x20000000
 8000e44:	431bde83 	.word	0x431bde83

08000e48 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d12e      	bne.n	8000ec0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0201 	bic.w	r2, r2, #1
 8000e70:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e72:	f7ff fcd7 	bl	8000824 <HAL_GetTick>
 8000e76:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e78:	e01b      	b.n	8000eb2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e7a:	f7ff fcd3 	bl	8000824 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d914      	bls.n	8000eb2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d10d      	bne.n	8000eb2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f043 0210 	orr.w	r2, r3, #16
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e007      	b.n	8000ec2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d0dc      	beq.n	8000e7a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4906      	ldr	r1, [pc, #24]	; (8000f64 <__NVIC_EnableIRQ+0x34>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f7ff ff90 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff2d 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff42 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff90 	bl	8000fbc <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5f 	bl	8000f68 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff35 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffa2 	bl	8001020 <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b08b      	sub	sp, #44	; 0x2c
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	e169      	b.n	80013d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010fc:	2201      	movs	r2, #1
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	69fa      	ldr	r2, [r7, #28]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	429a      	cmp	r2, r3
 8001116:	f040 8158 	bne.w	80013ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4a9a      	ldr	r2, [pc, #616]	; (8001388 <HAL_GPIO_Init+0x2a0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d05e      	beq.n	80011e2 <HAL_GPIO_Init+0xfa>
 8001124:	4a98      	ldr	r2, [pc, #608]	; (8001388 <HAL_GPIO_Init+0x2a0>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d875      	bhi.n	8001216 <HAL_GPIO_Init+0x12e>
 800112a:	4a98      	ldr	r2, [pc, #608]	; (800138c <HAL_GPIO_Init+0x2a4>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d058      	beq.n	80011e2 <HAL_GPIO_Init+0xfa>
 8001130:	4a96      	ldr	r2, [pc, #600]	; (800138c <HAL_GPIO_Init+0x2a4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d86f      	bhi.n	8001216 <HAL_GPIO_Init+0x12e>
 8001136:	4a96      	ldr	r2, [pc, #600]	; (8001390 <HAL_GPIO_Init+0x2a8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d052      	beq.n	80011e2 <HAL_GPIO_Init+0xfa>
 800113c:	4a94      	ldr	r2, [pc, #592]	; (8001390 <HAL_GPIO_Init+0x2a8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d869      	bhi.n	8001216 <HAL_GPIO_Init+0x12e>
 8001142:	4a94      	ldr	r2, [pc, #592]	; (8001394 <HAL_GPIO_Init+0x2ac>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d04c      	beq.n	80011e2 <HAL_GPIO_Init+0xfa>
 8001148:	4a92      	ldr	r2, [pc, #584]	; (8001394 <HAL_GPIO_Init+0x2ac>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d863      	bhi.n	8001216 <HAL_GPIO_Init+0x12e>
 800114e:	4a92      	ldr	r2, [pc, #584]	; (8001398 <HAL_GPIO_Init+0x2b0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d046      	beq.n	80011e2 <HAL_GPIO_Init+0xfa>
 8001154:	4a90      	ldr	r2, [pc, #576]	; (8001398 <HAL_GPIO_Init+0x2b0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d85d      	bhi.n	8001216 <HAL_GPIO_Init+0x12e>
 800115a:	2b12      	cmp	r3, #18
 800115c:	d82a      	bhi.n	80011b4 <HAL_GPIO_Init+0xcc>
 800115e:	2b12      	cmp	r3, #18
 8001160:	d859      	bhi.n	8001216 <HAL_GPIO_Init+0x12e>
 8001162:	a201      	add	r2, pc, #4	; (adr r2, 8001168 <HAL_GPIO_Init+0x80>)
 8001164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001168:	080011e3 	.word	0x080011e3
 800116c:	080011bd 	.word	0x080011bd
 8001170:	080011cf 	.word	0x080011cf
 8001174:	08001211 	.word	0x08001211
 8001178:	08001217 	.word	0x08001217
 800117c:	08001217 	.word	0x08001217
 8001180:	08001217 	.word	0x08001217
 8001184:	08001217 	.word	0x08001217
 8001188:	08001217 	.word	0x08001217
 800118c:	08001217 	.word	0x08001217
 8001190:	08001217 	.word	0x08001217
 8001194:	08001217 	.word	0x08001217
 8001198:	08001217 	.word	0x08001217
 800119c:	08001217 	.word	0x08001217
 80011a0:	08001217 	.word	0x08001217
 80011a4:	08001217 	.word	0x08001217
 80011a8:	08001217 	.word	0x08001217
 80011ac:	080011c5 	.word	0x080011c5
 80011b0:	080011d9 	.word	0x080011d9
 80011b4:	4a79      	ldr	r2, [pc, #484]	; (800139c <HAL_GPIO_Init+0x2b4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ba:	e02c      	b.n	8001216 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	623b      	str	r3, [r7, #32]
          break;
 80011c2:	e029      	b.n	8001218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	3304      	adds	r3, #4
 80011ca:	623b      	str	r3, [r7, #32]
          break;
 80011cc:	e024      	b.n	8001218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	3308      	adds	r3, #8
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e01f      	b.n	8001218 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	330c      	adds	r3, #12
 80011de:	623b      	str	r3, [r7, #32]
          break;
 80011e0:	e01a      	b.n	8001218 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d102      	bne.n	80011f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ea:	2304      	movs	r3, #4
 80011ec:	623b      	str	r3, [r7, #32]
          break;
 80011ee:	e013      	b.n	8001218 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d105      	bne.n	8001204 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f8:	2308      	movs	r3, #8
 80011fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69fa      	ldr	r2, [r7, #28]
 8001200:	611a      	str	r2, [r3, #16]
          break;
 8001202:	e009      	b.n	8001218 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001204:	2308      	movs	r3, #8
 8001206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	615a      	str	r2, [r3, #20]
          break;
 800120e:	e003      	b.n	8001218 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
          break;
 8001214:	e000      	b.n	8001218 <HAL_GPIO_Init+0x130>
          break;
 8001216:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2bff      	cmp	r3, #255	; 0xff
 800121c:	d801      	bhi.n	8001222 <HAL_GPIO_Init+0x13a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	e001      	b.n	8001226 <HAL_GPIO_Init+0x13e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3304      	adds	r3, #4
 8001226:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2bff      	cmp	r3, #255	; 0xff
 800122c:	d802      	bhi.n	8001234 <HAL_GPIO_Init+0x14c>
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0x152>
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	3b08      	subs	r3, #8
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	210f      	movs	r1, #15
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	401a      	ands	r2, r3
 800124c:	6a39      	ldr	r1, [r7, #32]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	431a      	orrs	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 80b1 	beq.w	80013ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001268:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <HAL_GPIO_Init+0x2b8>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001280:	4a48      	ldr	r2, [pc, #288]	; (80013a4 <HAL_GPIO_Init+0x2bc>)
 8001282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4013      	ands	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a40      	ldr	r2, [pc, #256]	; (80013a8 <HAL_GPIO_Init+0x2c0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d013      	beq.n	80012d4 <HAL_GPIO_Init+0x1ec>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3f      	ldr	r2, [pc, #252]	; (80013ac <HAL_GPIO_Init+0x2c4>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d00d      	beq.n	80012d0 <HAL_GPIO_Init+0x1e8>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a3e      	ldr	r2, [pc, #248]	; (80013b0 <HAL_GPIO_Init+0x2c8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d007      	beq.n	80012cc <HAL_GPIO_Init+0x1e4>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a3d      	ldr	r2, [pc, #244]	; (80013b4 <HAL_GPIO_Init+0x2cc>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d101      	bne.n	80012c8 <HAL_GPIO_Init+0x1e0>
 80012c4:	2303      	movs	r3, #3
 80012c6:	e006      	b.n	80012d6 <HAL_GPIO_Init+0x1ee>
 80012c8:	2304      	movs	r3, #4
 80012ca:	e004      	b.n	80012d6 <HAL_GPIO_Init+0x1ee>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e002      	b.n	80012d6 <HAL_GPIO_Init+0x1ee>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <HAL_GPIO_Init+0x1ee>
 80012d4:	2300      	movs	r3, #0
 80012d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d8:	f002 0203 	and.w	r2, r2, #3
 80012dc:	0092      	lsls	r2, r2, #2
 80012de:	4093      	lsls	r3, r2
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012e6:	492f      	ldr	r1, [pc, #188]	; (80013a4 <HAL_GPIO_Init+0x2bc>)
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d006      	beq.n	800130e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001300:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	492c      	ldr	r1, [pc, #176]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	43db      	mvns	r3, r3
 8001316:	4928      	ldr	r1, [pc, #160]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001318:	4013      	ands	r3, r2
 800131a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4922      	ldr	r1, [pc, #136]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	43db      	mvns	r3, r3
 800133e:	491e      	ldr	r1, [pc, #120]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001340:	4013      	ands	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	4918      	ldr	r1, [pc, #96]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	608b      	str	r3, [r1, #8]
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	43db      	mvns	r3, r3
 8001366:	4914      	ldr	r1, [pc, #80]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 8001368:	4013      	ands	r3, r2
 800136a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d021      	beq.n	80013bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	490e      	ldr	r1, [pc, #56]	; (80013b8 <HAL_GPIO_Init+0x2d0>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	60cb      	str	r3, [r1, #12]
 8001384:	e021      	b.n	80013ca <HAL_GPIO_Init+0x2e2>
 8001386:	bf00      	nop
 8001388:	10320000 	.word	0x10320000
 800138c:	10310000 	.word	0x10310000
 8001390:	10220000 	.word	0x10220000
 8001394:	10210000 	.word	0x10210000
 8001398:	10120000 	.word	0x10120000
 800139c:	10110000 	.word	0x10110000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010000 	.word	0x40010000
 80013a8:	40010800 	.word	0x40010800
 80013ac:	40010c00 	.word	0x40010c00
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40011400 	.word	0x40011400
 80013b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_GPIO_Init+0x304>)
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	4909      	ldr	r1, [pc, #36]	; (80013ec <HAL_GPIO_Init+0x304>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	3301      	adds	r3, #1
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f47f ae8e 	bne.w	80010fc <HAL_GPIO_Init+0x14>
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	372c      	adds	r7, #44	; 0x2c
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	40010400 	.word	0x40010400

080013f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	807b      	strh	r3, [r7, #2]
 80013fc:	4613      	mov	r3, r2
 80013fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001406:	887a      	ldrh	r2, [r7, #2]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800140c:	e003      	b.n	8001416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	041a      	lsls	r2, r3, #16
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	611a      	str	r2, [r3, #16]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f806 	bl	8001450 <HAL_GPIO_EXTI_Callback>
  }
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e272      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8087 	beq.w	8001592 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001484:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b04      	cmp	r3, #4
 800148e:	d00c      	beq.n	80014aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001490:	4b8f      	ldr	r3, [pc, #572]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b08      	cmp	r3, #8
 800149a:	d112      	bne.n	80014c2 <HAL_RCC_OscConfig+0x5e>
 800149c:	4b8c      	ldr	r3, [pc, #560]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a8:	d10b      	bne.n	80014c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014aa:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d06c      	beq.n	8001590 <HAL_RCC_OscConfig+0x12c>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d168      	bne.n	8001590 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e24c      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x76>
 80014cc:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a7f      	ldr	r2, [pc, #508]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e02e      	b.n	8001538 <HAL_RCC_OscConfig+0xd4>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x98>
 80014e2:	4b7b      	ldr	r3, [pc, #492]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a7a      	ldr	r2, [pc, #488]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a77      	ldr	r2, [pc, #476]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e01d      	b.n	8001538 <HAL_RCC_OscConfig+0xd4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0xbc>
 8001506:	4b72      	ldr	r3, [pc, #456]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a71      	ldr	r2, [pc, #452]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800150c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b6f      	ldr	r3, [pc, #444]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a6e      	ldr	r2, [pc, #440]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e00b      	b.n	8001538 <HAL_RCC_OscConfig+0xd4>
 8001520:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a6a      	ldr	r2, [pc, #424]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b68      	ldr	r3, [pc, #416]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a67      	ldr	r2, [pc, #412]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff f970 	bl	8000824 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff f96c 	bl	8000824 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e200      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155a:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0xe4>
 8001566:	e014      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff f95c 	bl	8000824 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff f958 	bl	8000824 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	; 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1ec      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001582:	4b53      	ldr	r3, [pc, #332]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x10c>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d063      	beq.n	8001666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159e:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00b      	beq.n	80015c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015aa:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d11c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x18c>
 80015b6:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d116      	bne.n	80015f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	4b43      	ldr	r3, [pc, #268]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <HAL_RCC_OscConfig+0x176>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d001      	beq.n	80015da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e1c0      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4939      	ldr	r1, [pc, #228]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	e03a      	b.n	8001666 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f8:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <HAL_RCC_OscConfig+0x270>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff f911 	bl	8000824 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff f90d 	bl	8000824 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e1a1      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4927      	ldr	r1, [pc, #156]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 8001634:	4313      	orrs	r3, r2
 8001636:	600b      	str	r3, [r1, #0]
 8001638:	e015      	b.n	8001666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <HAL_RCC_OscConfig+0x270>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff f8f0 	bl	8000824 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001648:	f7ff f8ec 	bl	8000824 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e180      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d03a      	beq.n	80016e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d019      	beq.n	80016ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <HAL_RCC_OscConfig+0x274>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff f8d0 	bl	8000824 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff f8cc 	bl	8000824 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e160      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169a:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <HAL_RCC_OscConfig+0x26c>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016a6:	2001      	movs	r0, #1
 80016a8:	f000 fad8 	bl	8001c5c <RCC_Delay>
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_RCC_OscConfig+0x274>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff f8b6 	bl	8000824 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ba:	e00f      	b.n	80016dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff f8b2 	bl	8000824 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d908      	bls.n	80016dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e146      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	42420000 	.word	0x42420000
 80016d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016dc:	4b92      	ldr	r3, [pc, #584]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1e9      	bne.n	80016bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0304 	and.w	r3, r3, #4
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a6 	beq.w	8001842 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	2300      	movs	r3, #0
 80016f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b8b      	ldr	r3, [pc, #556]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10d      	bne.n	8001722 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b88      	ldr	r3, [pc, #544]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a87      	ldr	r2, [pc, #540]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b85      	ldr	r3, [pc, #532]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171e:	2301      	movs	r3, #1
 8001720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001722:	4b82      	ldr	r3, [pc, #520]	; (800192c <HAL_RCC_OscConfig+0x4c8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d118      	bne.n	8001760 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172e:	4b7f      	ldr	r3, [pc, #508]	; (800192c <HAL_RCC_OscConfig+0x4c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7e      	ldr	r2, [pc, #504]	; (800192c <HAL_RCC_OscConfig+0x4c8>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff f873 	bl	8000824 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff f86f 	bl	8000824 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b64      	cmp	r3, #100	; 0x64
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e103      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	4b75      	ldr	r3, [pc, #468]	; (800192c <HAL_RCC_OscConfig+0x4c8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x312>
 8001768:	4b6f      	ldr	r3, [pc, #444]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4a6e      	ldr	r2, [pc, #440]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6213      	str	r3, [r2, #32]
 8001774:	e02d      	b.n	80017d2 <HAL_RCC_OscConfig+0x36e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x334>
 800177e:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a69      	ldr	r2, [pc, #420]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6213      	str	r3, [r2, #32]
 800178a:	4b67      	ldr	r3, [pc, #412]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a66      	ldr	r2, [pc, #408]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	e01c      	b.n	80017d2 <HAL_RCC_OscConfig+0x36e>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d10c      	bne.n	80017ba <HAL_RCC_OscConfig+0x356>
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a60      	ldr	r2, [pc, #384]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a5d      	ldr	r2, [pc, #372]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	e00b      	b.n	80017d2 <HAL_RCC_OscConfig+0x36e>
 80017ba:	4b5b      	ldr	r3, [pc, #364]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	4a5a      	ldr	r2, [pc, #360]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	f023 0301 	bic.w	r3, r3, #1
 80017c4:	6213      	str	r3, [r2, #32]
 80017c6:	4b58      	ldr	r3, [pc, #352]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a57      	ldr	r2, [pc, #348]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d015      	beq.n	8001806 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017da:	f7ff f823 	bl	8000824 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff f81f 	bl	8000824 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e0b1      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f8:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ee      	beq.n	80017e2 <HAL_RCC_OscConfig+0x37e>
 8001804:	e014      	b.n	8001830 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff f80d 	bl	8000824 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff f809 	bl	8000824 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	; 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e09b      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001824:	4b40      	ldr	r3, [pc, #256]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ee      	bne.n	800180e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001830:	7dfb      	ldrb	r3, [r7, #23]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d105      	bne.n	8001842 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001836:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a3b      	ldr	r2, [pc, #236]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8087 	beq.w	800195a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b08      	cmp	r3, #8
 8001856:	d061      	beq.n	800191c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d146      	bne.n	80018ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001860:	4b33      	ldr	r3, [pc, #204]	; (8001930 <HAL_RCC_OscConfig+0x4cc>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7fe ffdd 	bl	8000824 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7fe ffd9 	bl	8000824 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e06d      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001880:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001894:	d108      	bne.n	80018a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001896:	4b24      	ldr	r3, [pc, #144]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4921      	ldr	r1, [pc, #132]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a19      	ldr	r1, [r3, #32]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	430b      	orrs	r3, r1
 80018ba:	491b      	ldr	r1, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x4cc>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7fe ffad 	bl	8000824 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7fe ffa9 	bl	8000824 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e03d      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x46a>
 80018ec:	e035      	b.n	800195a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_RCC_OscConfig+0x4cc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7fe ff96 	bl	8000824 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7fe ff92 	bl	8000824 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e026      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x4c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x498>
 800191a:	e01e      	b.n	800195a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d107      	bne.n	8001934 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e019      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
 8001928:	40021000 	.word	0x40021000
 800192c:	40007000 	.word	0x40007000
 8001930:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x500>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	429a      	cmp	r2, r3
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0d0      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800197c:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d910      	bls.n	80019ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b67      	ldr	r3, [pc, #412]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 0207 	bic.w	r2, r3, #7
 8001992:	4965      	ldr	r1, [pc, #404]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0b8      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c4:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019dc:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a52      	ldr	r2, [pc, #328]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e8:	4b50      	ldr	r3, [pc, #320]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	494d      	ldr	r1, [pc, #308]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d040      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d115      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e07f      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e073      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e06b      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a46:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f023 0203 	bic.w	r2, r3, #3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4936      	ldr	r1, [pc, #216]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a58:	f7fe fee4 	bl	8000824 <HAL_GetTick>
 8001a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a60:	f7fe fee0 	bl	8000824 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e053      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 020c 	and.w	r2, r3, #12
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d1eb      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d210      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0207 	bic.w	r2, r3, #7
 8001a9e:	4922      	ldr	r1, [pc, #136]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e032      	b.n	8001b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4916      	ldr	r1, [pc, #88]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	490e      	ldr	r1, [pc, #56]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001af6:	f000 f821 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001afa:	4602      	mov	r2, r0
 8001afc:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	091b      	lsrs	r3, r3, #4
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	490a      	ldr	r1, [pc, #40]	; (8001b30 <HAL_RCC_ClockConfig+0x1c8>)
 8001b08:	5ccb      	ldrb	r3, [r1, r3]
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	4a09      	ldr	r2, [pc, #36]	; (8001b34 <HAL_RCC_ClockConfig+0x1cc>)
 8001b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1d0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fe42 	bl	80007a0 <HAL_InitTick>

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40022000 	.word	0x40022000
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08003134 	.word	0x08003134
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	b490      	push	{r4, r7}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001b44:	1d3c      	adds	r4, r7, #4
 8001b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b4c:	f240 2301 	movw	r3, #513	; 0x201
 8001b50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d002      	beq.n	8001b7c <HAL_RCC_GetSysClockFreq+0x40>
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d003      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0x46>
 8001b7a:	e02b      	b.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b7e:	623b      	str	r3, [r7, #32]
      break;
 8001b80:	e02b      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	0c9b      	lsrs	r3, r3, #18
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3328      	adds	r3, #40	; 0x28
 8001b8c:	443b      	add	r3, r7
 8001b8e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b92:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d012      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	0c5b      	lsrs	r3, r3, #17
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	3328      	adds	r3, #40	; 0x28
 8001baa:	443b      	add	r3, r7
 8001bac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	4a0e      	ldr	r2, [pc, #56]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bb6:	fb03 f202 	mul.w	r2, r3, r2
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc2:	e004      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc8:	fb02 f303 	mul.w	r3, r2, r3
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	623b      	str	r3, [r7, #32]
      break;
 8001bd2:	e002      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bd6:	623b      	str	r3, [r7, #32]
      break;
 8001bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bda:	6a3b      	ldr	r3, [r7, #32]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc90      	pop	{r4, r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	08003124 	.word	0x08003124
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	007a1200 	.word	0x007a1200
 8001bf4:	003d0900 	.word	0x003d0900

08001bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bfc:	4b02      	ldr	r3, [pc, #8]	; (8001c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000000 	.word	0x20000000

08001c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c10:	f7ff fff2 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	4903      	ldr	r1, [pc, #12]	; (8001c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c22:	5ccb      	ldrb	r3, [r1, r3]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	08003144 	.word	0x08003144

08001c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	0adb      	lsrs	r3, r3, #11
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08003144 	.word	0x08003144

08001c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <RCC_Delay+0x34>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <RCC_Delay+0x38>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0a5b      	lsrs	r3, r3, #9
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c78:	bf00      	nop
  }
  while (Delay --);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	60fa      	str	r2, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <RCC_Delay+0x1c>
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000000 	.word	0x20000000
 8001c94:	10624dd3 	.word	0x10624dd3

08001c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d07d      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10d      	bne.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	61d3      	str	r3, [r2, #28]
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d118      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cec:	4b43      	ldr	r3, [pc, #268]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a42      	ldr	r2, [pc, #264]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf8:	f7fe fd94 	bl	8000824 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	e008      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7fe fd90 	bl	8000824 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e06d      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d12:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d02e      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d027      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d3c:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d4c:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d014      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7fe fd5f 	bl	8000824 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe fd5b 	bl	8000824 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e036      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ee      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4917      	ldr	r1, [pc, #92]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	490b      	ldr	r1, [pc, #44]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4904      	ldr	r1, [pc, #16]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	42420440 	.word	0x42420440

08001e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e03f      	b.n	8001e96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fb6a 	bl	8000504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f905 	bl	8002058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b08a      	sub	sp, #40	; 0x28
 8001ea2:	af02      	add	r7, sp, #8
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d17c      	bne.n	8001fb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_UART_Transmit+0x2c>
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e075      	b.n	8001fba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_UART_Transmit+0x3e>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e06e      	b.n	8001fba <HAL_UART_Transmit+0x11c>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2221      	movs	r2, #33	; 0x21
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ef2:	f7fe fc97 	bl	8000824 <HAL_GetTick>
 8001ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	88fa      	ldrh	r2, [r7, #6]
 8001efc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	88fa      	ldrh	r2, [r7, #6]
 8001f02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0c:	d108      	bne.n	8001f20 <HAL_UART_Transmit+0x82>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d104      	bne.n	8001f20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	e003      	b.n	8001f28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f30:	e02a      	b.n	8001f88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f840 	bl	8001fc2 <UART_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e036      	b.n	8001fba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10b      	bne.n	8001f6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	3302      	adds	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	e007      	b.n	8001f7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	781a      	ldrb	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3301      	adds	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1cf      	bne.n	8001f32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f810 	bl	8001fc2 <UART_WaitOnFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e006      	b.n	8001fba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e000      	b.n	8001fba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3720      	adds	r7, #32
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fd2:	e02c      	b.n	800202e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fda:	d028      	beq.n	800202e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fe2:	f7fe fc1f 	bl	8000824 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d21d      	bcs.n	800202e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002000:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695a      	ldr	r2, [r3, #20]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e00f      	b.n	800204e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4013      	ands	r3, r2
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	429a      	cmp	r2, r3
 800203c:	bf0c      	ite	eq
 800203e:	2301      	moveq	r3, #1
 8002040:	2300      	movne	r3, #0
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	429a      	cmp	r2, r3
 800204a:	d0c3      	beq.n	8001fd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002092:	f023 030c 	bic.w	r3, r3, #12
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	430b      	orrs	r3, r1
 800209e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a2c      	ldr	r2, [pc, #176]	; (800216c <UART_SetConfig+0x114>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d103      	bne.n	80020c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020c0:	f7ff fdb8 	bl	8001c34 <HAL_RCC_GetPCLK2Freq>
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	e002      	b.n	80020ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020c8:	f7ff fda0 	bl	8001c0c <HAL_RCC_GetPCLK1Freq>
 80020cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	009a      	lsls	r2, r3, #2
 80020d8:	441a      	add	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	4a22      	ldr	r2, [pc, #136]	; (8002170 <UART_SetConfig+0x118>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	0119      	lsls	r1, r3, #4
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fbb2 f2f3 	udiv	r2, r2, r3
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <UART_SetConfig+0x118>)
 8002106:	fba3 0302 	umull	r0, r3, r3, r2
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2064      	movs	r0, #100	; 0x64
 800210e:	fb00 f303 	mul.w	r3, r0, r3
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	3332      	adds	r3, #50	; 0x32
 8002118:	4a15      	ldr	r2, [pc, #84]	; (8002170 <UART_SetConfig+0x118>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002124:	4419      	add	r1, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009a      	lsls	r2, r3, #2
 8002130:	441a      	add	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fbb2 f2f3 	udiv	r2, r2, r3
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <UART_SetConfig+0x118>)
 800213e:	fba3 0302 	umull	r0, r3, r3, r2
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2064      	movs	r0, #100	; 0x64
 8002146:	fb00 f303 	mul.w	r3, r0, r3
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	3332      	adds	r3, #50	; 0x32
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <UART_SetConfig+0x118>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	f003 020f 	and.w	r2, r3, #15
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	440a      	add	r2, r1
 8002162:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40013800 	.word	0x40013800
 8002170:	51eb851f 	.word	0x51eb851f

08002174 <__errno>:
 8002174:	4b01      	ldr	r3, [pc, #4]	; (800217c <__errno+0x8>)
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	2000000c 	.word	0x2000000c

08002180 <__libc_init_array>:
 8002180:	b570      	push	{r4, r5, r6, lr}
 8002182:	2600      	movs	r6, #0
 8002184:	4d0c      	ldr	r5, [pc, #48]	; (80021b8 <__libc_init_array+0x38>)
 8002186:	4c0d      	ldr	r4, [pc, #52]	; (80021bc <__libc_init_array+0x3c>)
 8002188:	1b64      	subs	r4, r4, r5
 800218a:	10a4      	asrs	r4, r4, #2
 800218c:	42a6      	cmp	r6, r4
 800218e:	d109      	bne.n	80021a4 <__libc_init_array+0x24>
 8002190:	f000 ffb6 	bl	8003100 <_init>
 8002194:	2600      	movs	r6, #0
 8002196:	4d0a      	ldr	r5, [pc, #40]	; (80021c0 <__libc_init_array+0x40>)
 8002198:	4c0a      	ldr	r4, [pc, #40]	; (80021c4 <__libc_init_array+0x44>)
 800219a:	1b64      	subs	r4, r4, r5
 800219c:	10a4      	asrs	r4, r4, #2
 800219e:	42a6      	cmp	r6, r4
 80021a0:	d105      	bne.n	80021ae <__libc_init_array+0x2e>
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a8:	4798      	blx	r3
 80021aa:	3601      	adds	r6, #1
 80021ac:	e7ee      	b.n	800218c <__libc_init_array+0xc>
 80021ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b2:	4798      	blx	r3
 80021b4:	3601      	adds	r6, #1
 80021b6:	e7f2      	b.n	800219e <__libc_init_array+0x1e>
 80021b8:	080031e4 	.word	0x080031e4
 80021bc:	080031e4 	.word	0x080031e4
 80021c0:	080031e4 	.word	0x080031e4
 80021c4:	080031e8 	.word	0x080031e8

080021c8 <memset>:
 80021c8:	4603      	mov	r3, r0
 80021ca:	4402      	add	r2, r0
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d100      	bne.n	80021d2 <memset+0xa>
 80021d0:	4770      	bx	lr
 80021d2:	f803 1b01 	strb.w	r1, [r3], #1
 80021d6:	e7f9      	b.n	80021cc <memset+0x4>

080021d8 <iprintf>:
 80021d8:	b40f      	push	{r0, r1, r2, r3}
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <iprintf+0x2c>)
 80021dc:	b513      	push	{r0, r1, r4, lr}
 80021de:	681c      	ldr	r4, [r3, #0]
 80021e0:	b124      	cbz	r4, 80021ec <iprintf+0x14>
 80021e2:	69a3      	ldr	r3, [r4, #24]
 80021e4:	b913      	cbnz	r3, 80021ec <iprintf+0x14>
 80021e6:	4620      	mov	r0, r4
 80021e8:	f000 f866 	bl	80022b8 <__sinit>
 80021ec:	ab05      	add	r3, sp, #20
 80021ee:	4620      	mov	r0, r4
 80021f0:	9a04      	ldr	r2, [sp, #16]
 80021f2:	68a1      	ldr	r1, [r4, #8]
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	f000 f9bb 	bl	8002570 <_vfiprintf_r>
 80021fa:	b002      	add	sp, #8
 80021fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002200:	b004      	add	sp, #16
 8002202:	4770      	bx	lr
 8002204:	2000000c 	.word	0x2000000c

08002208 <std>:
 8002208:	2300      	movs	r3, #0
 800220a:	b510      	push	{r4, lr}
 800220c:	4604      	mov	r4, r0
 800220e:	e9c0 3300 	strd	r3, r3, [r0]
 8002212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002216:	6083      	str	r3, [r0, #8]
 8002218:	8181      	strh	r1, [r0, #12]
 800221a:	6643      	str	r3, [r0, #100]	; 0x64
 800221c:	81c2      	strh	r2, [r0, #14]
 800221e:	6183      	str	r3, [r0, #24]
 8002220:	4619      	mov	r1, r3
 8002222:	2208      	movs	r2, #8
 8002224:	305c      	adds	r0, #92	; 0x5c
 8002226:	f7ff ffcf 	bl	80021c8 <memset>
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <std+0x38>)
 800222c:	6224      	str	r4, [r4, #32]
 800222e:	6263      	str	r3, [r4, #36]	; 0x24
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <std+0x3c>)
 8002232:	62a3      	str	r3, [r4, #40]	; 0x28
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <std+0x40>)
 8002236:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002238:	4b04      	ldr	r3, [pc, #16]	; (800224c <std+0x44>)
 800223a:	6323      	str	r3, [r4, #48]	; 0x30
 800223c:	bd10      	pop	{r4, pc}
 800223e:	bf00      	nop
 8002240:	08002b1d 	.word	0x08002b1d
 8002244:	08002b3f 	.word	0x08002b3f
 8002248:	08002b77 	.word	0x08002b77
 800224c:	08002b9b 	.word	0x08002b9b

08002250 <_cleanup_r>:
 8002250:	4901      	ldr	r1, [pc, #4]	; (8002258 <_cleanup_r+0x8>)
 8002252:	f000 b8af 	b.w	80023b4 <_fwalk_reent>
 8002256:	bf00      	nop
 8002258:	08002e6d 	.word	0x08002e6d

0800225c <__sfmoreglue>:
 800225c:	2268      	movs	r2, #104	; 0x68
 800225e:	b570      	push	{r4, r5, r6, lr}
 8002260:	1e4d      	subs	r5, r1, #1
 8002262:	4355      	muls	r5, r2
 8002264:	460e      	mov	r6, r1
 8002266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800226a:	f000 f8e5 	bl	8002438 <_malloc_r>
 800226e:	4604      	mov	r4, r0
 8002270:	b140      	cbz	r0, 8002284 <__sfmoreglue+0x28>
 8002272:	2100      	movs	r1, #0
 8002274:	e9c0 1600 	strd	r1, r6, [r0]
 8002278:	300c      	adds	r0, #12
 800227a:	60a0      	str	r0, [r4, #8]
 800227c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002280:	f7ff ffa2 	bl	80021c8 <memset>
 8002284:	4620      	mov	r0, r4
 8002286:	bd70      	pop	{r4, r5, r6, pc}

08002288 <__sfp_lock_acquire>:
 8002288:	4801      	ldr	r0, [pc, #4]	; (8002290 <__sfp_lock_acquire+0x8>)
 800228a:	f000 b8b3 	b.w	80023f4 <__retarget_lock_acquire_recursive>
 800228e:	bf00      	nop
 8002290:	2000010d 	.word	0x2000010d

08002294 <__sfp_lock_release>:
 8002294:	4801      	ldr	r0, [pc, #4]	; (800229c <__sfp_lock_release+0x8>)
 8002296:	f000 b8ae 	b.w	80023f6 <__retarget_lock_release_recursive>
 800229a:	bf00      	nop
 800229c:	2000010d 	.word	0x2000010d

080022a0 <__sinit_lock_acquire>:
 80022a0:	4801      	ldr	r0, [pc, #4]	; (80022a8 <__sinit_lock_acquire+0x8>)
 80022a2:	f000 b8a7 	b.w	80023f4 <__retarget_lock_acquire_recursive>
 80022a6:	bf00      	nop
 80022a8:	2000010e 	.word	0x2000010e

080022ac <__sinit_lock_release>:
 80022ac:	4801      	ldr	r0, [pc, #4]	; (80022b4 <__sinit_lock_release+0x8>)
 80022ae:	f000 b8a2 	b.w	80023f6 <__retarget_lock_release_recursive>
 80022b2:	bf00      	nop
 80022b4:	2000010e 	.word	0x2000010e

080022b8 <__sinit>:
 80022b8:	b510      	push	{r4, lr}
 80022ba:	4604      	mov	r4, r0
 80022bc:	f7ff fff0 	bl	80022a0 <__sinit_lock_acquire>
 80022c0:	69a3      	ldr	r3, [r4, #24]
 80022c2:	b11b      	cbz	r3, 80022cc <__sinit+0x14>
 80022c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022c8:	f7ff bff0 	b.w	80022ac <__sinit_lock_release>
 80022cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80022d0:	6523      	str	r3, [r4, #80]	; 0x50
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <__sinit+0x68>)
 80022d4:	4a13      	ldr	r2, [pc, #76]	; (8002324 <__sinit+0x6c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80022da:	42a3      	cmp	r3, r4
 80022dc:	bf08      	it	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	4620      	mov	r0, r4
 80022e2:	bf08      	it	eq
 80022e4:	61a3      	streq	r3, [r4, #24]
 80022e6:	f000 f81f 	bl	8002328 <__sfp>
 80022ea:	6060      	str	r0, [r4, #4]
 80022ec:	4620      	mov	r0, r4
 80022ee:	f000 f81b 	bl	8002328 <__sfp>
 80022f2:	60a0      	str	r0, [r4, #8]
 80022f4:	4620      	mov	r0, r4
 80022f6:	f000 f817 	bl	8002328 <__sfp>
 80022fa:	2200      	movs	r2, #0
 80022fc:	2104      	movs	r1, #4
 80022fe:	60e0      	str	r0, [r4, #12]
 8002300:	6860      	ldr	r0, [r4, #4]
 8002302:	f7ff ff81 	bl	8002208 <std>
 8002306:	2201      	movs	r2, #1
 8002308:	2109      	movs	r1, #9
 800230a:	68a0      	ldr	r0, [r4, #8]
 800230c:	f7ff ff7c 	bl	8002208 <std>
 8002310:	2202      	movs	r2, #2
 8002312:	2112      	movs	r1, #18
 8002314:	68e0      	ldr	r0, [r4, #12]
 8002316:	f7ff ff77 	bl	8002208 <std>
 800231a:	2301      	movs	r3, #1
 800231c:	61a3      	str	r3, [r4, #24]
 800231e:	e7d1      	b.n	80022c4 <__sinit+0xc>
 8002320:	0800314c 	.word	0x0800314c
 8002324:	08002251 	.word	0x08002251

08002328 <__sfp>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	4607      	mov	r7, r0
 800232c:	f7ff ffac 	bl	8002288 <__sfp_lock_acquire>
 8002330:	4b1e      	ldr	r3, [pc, #120]	; (80023ac <__sfp+0x84>)
 8002332:	681e      	ldr	r6, [r3, #0]
 8002334:	69b3      	ldr	r3, [r6, #24]
 8002336:	b913      	cbnz	r3, 800233e <__sfp+0x16>
 8002338:	4630      	mov	r0, r6
 800233a:	f7ff ffbd 	bl	80022b8 <__sinit>
 800233e:	3648      	adds	r6, #72	; 0x48
 8002340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002344:	3b01      	subs	r3, #1
 8002346:	d503      	bpl.n	8002350 <__sfp+0x28>
 8002348:	6833      	ldr	r3, [r6, #0]
 800234a:	b30b      	cbz	r3, 8002390 <__sfp+0x68>
 800234c:	6836      	ldr	r6, [r6, #0]
 800234e:	e7f7      	b.n	8002340 <__sfp+0x18>
 8002350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002354:	b9d5      	cbnz	r5, 800238c <__sfp+0x64>
 8002356:	4b16      	ldr	r3, [pc, #88]	; (80023b0 <__sfp+0x88>)
 8002358:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800235c:	60e3      	str	r3, [r4, #12]
 800235e:	6665      	str	r5, [r4, #100]	; 0x64
 8002360:	f000 f847 	bl	80023f2 <__retarget_lock_init_recursive>
 8002364:	f7ff ff96 	bl	8002294 <__sfp_lock_release>
 8002368:	2208      	movs	r2, #8
 800236a:	4629      	mov	r1, r5
 800236c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002370:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002374:	6025      	str	r5, [r4, #0]
 8002376:	61a5      	str	r5, [r4, #24]
 8002378:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800237c:	f7ff ff24 	bl	80021c8 <memset>
 8002380:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002384:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002388:	4620      	mov	r0, r4
 800238a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800238c:	3468      	adds	r4, #104	; 0x68
 800238e:	e7d9      	b.n	8002344 <__sfp+0x1c>
 8002390:	2104      	movs	r1, #4
 8002392:	4638      	mov	r0, r7
 8002394:	f7ff ff62 	bl	800225c <__sfmoreglue>
 8002398:	4604      	mov	r4, r0
 800239a:	6030      	str	r0, [r6, #0]
 800239c:	2800      	cmp	r0, #0
 800239e:	d1d5      	bne.n	800234c <__sfp+0x24>
 80023a0:	f7ff ff78 	bl	8002294 <__sfp_lock_release>
 80023a4:	230c      	movs	r3, #12
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	e7ee      	b.n	8002388 <__sfp+0x60>
 80023aa:	bf00      	nop
 80023ac:	0800314c 	.word	0x0800314c
 80023b0:	ffff0001 	.word	0xffff0001

080023b4 <_fwalk_reent>:
 80023b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023b8:	4606      	mov	r6, r0
 80023ba:	4688      	mov	r8, r1
 80023bc:	2700      	movs	r7, #0
 80023be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80023c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023c6:	f1b9 0901 	subs.w	r9, r9, #1
 80023ca:	d505      	bpl.n	80023d8 <_fwalk_reent+0x24>
 80023cc:	6824      	ldr	r4, [r4, #0]
 80023ce:	2c00      	cmp	r4, #0
 80023d0:	d1f7      	bne.n	80023c2 <_fwalk_reent+0xe>
 80023d2:	4638      	mov	r0, r7
 80023d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023d8:	89ab      	ldrh	r3, [r5, #12]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d907      	bls.n	80023ee <_fwalk_reent+0x3a>
 80023de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023e2:	3301      	adds	r3, #1
 80023e4:	d003      	beq.n	80023ee <_fwalk_reent+0x3a>
 80023e6:	4629      	mov	r1, r5
 80023e8:	4630      	mov	r0, r6
 80023ea:	47c0      	blx	r8
 80023ec:	4307      	orrs	r7, r0
 80023ee:	3568      	adds	r5, #104	; 0x68
 80023f0:	e7e9      	b.n	80023c6 <_fwalk_reent+0x12>

080023f2 <__retarget_lock_init_recursive>:
 80023f2:	4770      	bx	lr

080023f4 <__retarget_lock_acquire_recursive>:
 80023f4:	4770      	bx	lr

080023f6 <__retarget_lock_release_recursive>:
 80023f6:	4770      	bx	lr

080023f8 <sbrk_aligned>:
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	4e0e      	ldr	r6, [pc, #56]	; (8002434 <sbrk_aligned+0x3c>)
 80023fc:	460c      	mov	r4, r1
 80023fe:	6831      	ldr	r1, [r6, #0]
 8002400:	4605      	mov	r5, r0
 8002402:	b911      	cbnz	r1, 800240a <sbrk_aligned+0x12>
 8002404:	f000 fb7a 	bl	8002afc <_sbrk_r>
 8002408:	6030      	str	r0, [r6, #0]
 800240a:	4621      	mov	r1, r4
 800240c:	4628      	mov	r0, r5
 800240e:	f000 fb75 	bl	8002afc <_sbrk_r>
 8002412:	1c43      	adds	r3, r0, #1
 8002414:	d00a      	beq.n	800242c <sbrk_aligned+0x34>
 8002416:	1cc4      	adds	r4, r0, #3
 8002418:	f024 0403 	bic.w	r4, r4, #3
 800241c:	42a0      	cmp	r0, r4
 800241e:	d007      	beq.n	8002430 <sbrk_aligned+0x38>
 8002420:	1a21      	subs	r1, r4, r0
 8002422:	4628      	mov	r0, r5
 8002424:	f000 fb6a 	bl	8002afc <_sbrk_r>
 8002428:	3001      	adds	r0, #1
 800242a:	d101      	bne.n	8002430 <sbrk_aligned+0x38>
 800242c:	f04f 34ff 	mov.w	r4, #4294967295
 8002430:	4620      	mov	r0, r4
 8002432:	bd70      	pop	{r4, r5, r6, pc}
 8002434:	20000114 	.word	0x20000114

08002438 <_malloc_r>:
 8002438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800243c:	1ccd      	adds	r5, r1, #3
 800243e:	f025 0503 	bic.w	r5, r5, #3
 8002442:	3508      	adds	r5, #8
 8002444:	2d0c      	cmp	r5, #12
 8002446:	bf38      	it	cc
 8002448:	250c      	movcc	r5, #12
 800244a:	2d00      	cmp	r5, #0
 800244c:	4607      	mov	r7, r0
 800244e:	db01      	blt.n	8002454 <_malloc_r+0x1c>
 8002450:	42a9      	cmp	r1, r5
 8002452:	d905      	bls.n	8002460 <_malloc_r+0x28>
 8002454:	230c      	movs	r3, #12
 8002456:	2600      	movs	r6, #0
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4630      	mov	r0, r6
 800245c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002460:	4e2e      	ldr	r6, [pc, #184]	; (800251c <_malloc_r+0xe4>)
 8002462:	f000 fdc5 	bl	8002ff0 <__malloc_lock>
 8002466:	6833      	ldr	r3, [r6, #0]
 8002468:	461c      	mov	r4, r3
 800246a:	bb34      	cbnz	r4, 80024ba <_malloc_r+0x82>
 800246c:	4629      	mov	r1, r5
 800246e:	4638      	mov	r0, r7
 8002470:	f7ff ffc2 	bl	80023f8 <sbrk_aligned>
 8002474:	1c43      	adds	r3, r0, #1
 8002476:	4604      	mov	r4, r0
 8002478:	d14d      	bne.n	8002516 <_malloc_r+0xde>
 800247a:	6834      	ldr	r4, [r6, #0]
 800247c:	4626      	mov	r6, r4
 800247e:	2e00      	cmp	r6, #0
 8002480:	d140      	bne.n	8002504 <_malloc_r+0xcc>
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	4631      	mov	r1, r6
 8002486:	4638      	mov	r0, r7
 8002488:	eb04 0803 	add.w	r8, r4, r3
 800248c:	f000 fb36 	bl	8002afc <_sbrk_r>
 8002490:	4580      	cmp	r8, r0
 8002492:	d13a      	bne.n	800250a <_malloc_r+0xd2>
 8002494:	6821      	ldr	r1, [r4, #0]
 8002496:	3503      	adds	r5, #3
 8002498:	1a6d      	subs	r5, r5, r1
 800249a:	f025 0503 	bic.w	r5, r5, #3
 800249e:	3508      	adds	r5, #8
 80024a0:	2d0c      	cmp	r5, #12
 80024a2:	bf38      	it	cc
 80024a4:	250c      	movcc	r5, #12
 80024a6:	4638      	mov	r0, r7
 80024a8:	4629      	mov	r1, r5
 80024aa:	f7ff ffa5 	bl	80023f8 <sbrk_aligned>
 80024ae:	3001      	adds	r0, #1
 80024b0:	d02b      	beq.n	800250a <_malloc_r+0xd2>
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	442b      	add	r3, r5
 80024b6:	6023      	str	r3, [r4, #0]
 80024b8:	e00e      	b.n	80024d8 <_malloc_r+0xa0>
 80024ba:	6822      	ldr	r2, [r4, #0]
 80024bc:	1b52      	subs	r2, r2, r5
 80024be:	d41e      	bmi.n	80024fe <_malloc_r+0xc6>
 80024c0:	2a0b      	cmp	r2, #11
 80024c2:	d916      	bls.n	80024f2 <_malloc_r+0xba>
 80024c4:	1961      	adds	r1, r4, r5
 80024c6:	42a3      	cmp	r3, r4
 80024c8:	6025      	str	r5, [r4, #0]
 80024ca:	bf18      	it	ne
 80024cc:	6059      	strne	r1, [r3, #4]
 80024ce:	6863      	ldr	r3, [r4, #4]
 80024d0:	bf08      	it	eq
 80024d2:	6031      	streq	r1, [r6, #0]
 80024d4:	5162      	str	r2, [r4, r5]
 80024d6:	604b      	str	r3, [r1, #4]
 80024d8:	4638      	mov	r0, r7
 80024da:	f104 060b 	add.w	r6, r4, #11
 80024de:	f000 fd8d 	bl	8002ffc <__malloc_unlock>
 80024e2:	f026 0607 	bic.w	r6, r6, #7
 80024e6:	1d23      	adds	r3, r4, #4
 80024e8:	1af2      	subs	r2, r6, r3
 80024ea:	d0b6      	beq.n	800245a <_malloc_r+0x22>
 80024ec:	1b9b      	subs	r3, r3, r6
 80024ee:	50a3      	str	r3, [r4, r2]
 80024f0:	e7b3      	b.n	800245a <_malloc_r+0x22>
 80024f2:	6862      	ldr	r2, [r4, #4]
 80024f4:	42a3      	cmp	r3, r4
 80024f6:	bf0c      	ite	eq
 80024f8:	6032      	streq	r2, [r6, #0]
 80024fa:	605a      	strne	r2, [r3, #4]
 80024fc:	e7ec      	b.n	80024d8 <_malloc_r+0xa0>
 80024fe:	4623      	mov	r3, r4
 8002500:	6864      	ldr	r4, [r4, #4]
 8002502:	e7b2      	b.n	800246a <_malloc_r+0x32>
 8002504:	4634      	mov	r4, r6
 8002506:	6876      	ldr	r6, [r6, #4]
 8002508:	e7b9      	b.n	800247e <_malloc_r+0x46>
 800250a:	230c      	movs	r3, #12
 800250c:	4638      	mov	r0, r7
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	f000 fd74 	bl	8002ffc <__malloc_unlock>
 8002514:	e7a1      	b.n	800245a <_malloc_r+0x22>
 8002516:	6025      	str	r5, [r4, #0]
 8002518:	e7de      	b.n	80024d8 <_malloc_r+0xa0>
 800251a:	bf00      	nop
 800251c:	20000110 	.word	0x20000110

08002520 <__sfputc_r>:
 8002520:	6893      	ldr	r3, [r2, #8]
 8002522:	b410      	push	{r4}
 8002524:	3b01      	subs	r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	6093      	str	r3, [r2, #8]
 800252a:	da07      	bge.n	800253c <__sfputc_r+0x1c>
 800252c:	6994      	ldr	r4, [r2, #24]
 800252e:	42a3      	cmp	r3, r4
 8002530:	db01      	blt.n	8002536 <__sfputc_r+0x16>
 8002532:	290a      	cmp	r1, #10
 8002534:	d102      	bne.n	800253c <__sfputc_r+0x1c>
 8002536:	bc10      	pop	{r4}
 8002538:	f000 bb34 	b.w	8002ba4 <__swbuf_r>
 800253c:	6813      	ldr	r3, [r2, #0]
 800253e:	1c58      	adds	r0, r3, #1
 8002540:	6010      	str	r0, [r2, #0]
 8002542:	7019      	strb	r1, [r3, #0]
 8002544:	4608      	mov	r0, r1
 8002546:	bc10      	pop	{r4}
 8002548:	4770      	bx	lr

0800254a <__sfputs_r>:
 800254a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254c:	4606      	mov	r6, r0
 800254e:	460f      	mov	r7, r1
 8002550:	4614      	mov	r4, r2
 8002552:	18d5      	adds	r5, r2, r3
 8002554:	42ac      	cmp	r4, r5
 8002556:	d101      	bne.n	800255c <__sfputs_r+0x12>
 8002558:	2000      	movs	r0, #0
 800255a:	e007      	b.n	800256c <__sfputs_r+0x22>
 800255c:	463a      	mov	r2, r7
 800255e:	4630      	mov	r0, r6
 8002560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002564:	f7ff ffdc 	bl	8002520 <__sfputc_r>
 8002568:	1c43      	adds	r3, r0, #1
 800256a:	d1f3      	bne.n	8002554 <__sfputs_r+0xa>
 800256c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002570 <_vfiprintf_r>:
 8002570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002574:	460d      	mov	r5, r1
 8002576:	4614      	mov	r4, r2
 8002578:	4698      	mov	r8, r3
 800257a:	4606      	mov	r6, r0
 800257c:	b09d      	sub	sp, #116	; 0x74
 800257e:	b118      	cbz	r0, 8002588 <_vfiprintf_r+0x18>
 8002580:	6983      	ldr	r3, [r0, #24]
 8002582:	b90b      	cbnz	r3, 8002588 <_vfiprintf_r+0x18>
 8002584:	f7ff fe98 	bl	80022b8 <__sinit>
 8002588:	4b89      	ldr	r3, [pc, #548]	; (80027b0 <_vfiprintf_r+0x240>)
 800258a:	429d      	cmp	r5, r3
 800258c:	d11b      	bne.n	80025c6 <_vfiprintf_r+0x56>
 800258e:	6875      	ldr	r5, [r6, #4]
 8002590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002592:	07d9      	lsls	r1, r3, #31
 8002594:	d405      	bmi.n	80025a2 <_vfiprintf_r+0x32>
 8002596:	89ab      	ldrh	r3, [r5, #12]
 8002598:	059a      	lsls	r2, r3, #22
 800259a:	d402      	bmi.n	80025a2 <_vfiprintf_r+0x32>
 800259c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800259e:	f7ff ff29 	bl	80023f4 <__retarget_lock_acquire_recursive>
 80025a2:	89ab      	ldrh	r3, [r5, #12]
 80025a4:	071b      	lsls	r3, r3, #28
 80025a6:	d501      	bpl.n	80025ac <_vfiprintf_r+0x3c>
 80025a8:	692b      	ldr	r3, [r5, #16]
 80025aa:	b9eb      	cbnz	r3, 80025e8 <_vfiprintf_r+0x78>
 80025ac:	4629      	mov	r1, r5
 80025ae:	4630      	mov	r0, r6
 80025b0:	f000 fb5c 	bl	8002c6c <__swsetup_r>
 80025b4:	b1c0      	cbz	r0, 80025e8 <_vfiprintf_r+0x78>
 80025b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025b8:	07dc      	lsls	r4, r3, #31
 80025ba:	d50e      	bpl.n	80025da <_vfiprintf_r+0x6a>
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	b01d      	add	sp, #116	; 0x74
 80025c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025c6:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <_vfiprintf_r+0x244>)
 80025c8:	429d      	cmp	r5, r3
 80025ca:	d101      	bne.n	80025d0 <_vfiprintf_r+0x60>
 80025cc:	68b5      	ldr	r5, [r6, #8]
 80025ce:	e7df      	b.n	8002590 <_vfiprintf_r+0x20>
 80025d0:	4b79      	ldr	r3, [pc, #484]	; (80027b8 <_vfiprintf_r+0x248>)
 80025d2:	429d      	cmp	r5, r3
 80025d4:	bf08      	it	eq
 80025d6:	68f5      	ldreq	r5, [r6, #12]
 80025d8:	e7da      	b.n	8002590 <_vfiprintf_r+0x20>
 80025da:	89ab      	ldrh	r3, [r5, #12]
 80025dc:	0598      	lsls	r0, r3, #22
 80025de:	d4ed      	bmi.n	80025bc <_vfiprintf_r+0x4c>
 80025e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025e2:	f7ff ff08 	bl	80023f6 <__retarget_lock_release_recursive>
 80025e6:	e7e9      	b.n	80025bc <_vfiprintf_r+0x4c>
 80025e8:	2300      	movs	r3, #0
 80025ea:	9309      	str	r3, [sp, #36]	; 0x24
 80025ec:	2320      	movs	r3, #32
 80025ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025f2:	2330      	movs	r3, #48	; 0x30
 80025f4:	f04f 0901 	mov.w	r9, #1
 80025f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80025fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80027bc <_vfiprintf_r+0x24c>
 8002600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002604:	4623      	mov	r3, r4
 8002606:	469a      	mov	sl, r3
 8002608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800260c:	b10a      	cbz	r2, 8002612 <_vfiprintf_r+0xa2>
 800260e:	2a25      	cmp	r2, #37	; 0x25
 8002610:	d1f9      	bne.n	8002606 <_vfiprintf_r+0x96>
 8002612:	ebba 0b04 	subs.w	fp, sl, r4
 8002616:	d00b      	beq.n	8002630 <_vfiprintf_r+0xc0>
 8002618:	465b      	mov	r3, fp
 800261a:	4622      	mov	r2, r4
 800261c:	4629      	mov	r1, r5
 800261e:	4630      	mov	r0, r6
 8002620:	f7ff ff93 	bl	800254a <__sfputs_r>
 8002624:	3001      	adds	r0, #1
 8002626:	f000 80aa 	beq.w	800277e <_vfiprintf_r+0x20e>
 800262a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800262c:	445a      	add	r2, fp
 800262e:	9209      	str	r2, [sp, #36]	; 0x24
 8002630:	f89a 3000 	ldrb.w	r3, [sl]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 80a2 	beq.w	800277e <_vfiprintf_r+0x20e>
 800263a:	2300      	movs	r3, #0
 800263c:	f04f 32ff 	mov.w	r2, #4294967295
 8002640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002644:	f10a 0a01 	add.w	sl, sl, #1
 8002648:	9304      	str	r3, [sp, #16]
 800264a:	9307      	str	r3, [sp, #28]
 800264c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002650:	931a      	str	r3, [sp, #104]	; 0x68
 8002652:	4654      	mov	r4, sl
 8002654:	2205      	movs	r2, #5
 8002656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800265a:	4858      	ldr	r0, [pc, #352]	; (80027bc <_vfiprintf_r+0x24c>)
 800265c:	f000 fcba 	bl	8002fd4 <memchr>
 8002660:	9a04      	ldr	r2, [sp, #16]
 8002662:	b9d8      	cbnz	r0, 800269c <_vfiprintf_r+0x12c>
 8002664:	06d1      	lsls	r1, r2, #27
 8002666:	bf44      	itt	mi
 8002668:	2320      	movmi	r3, #32
 800266a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800266e:	0713      	lsls	r3, r2, #28
 8002670:	bf44      	itt	mi
 8002672:	232b      	movmi	r3, #43	; 0x2b
 8002674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002678:	f89a 3000 	ldrb.w	r3, [sl]
 800267c:	2b2a      	cmp	r3, #42	; 0x2a
 800267e:	d015      	beq.n	80026ac <_vfiprintf_r+0x13c>
 8002680:	4654      	mov	r4, sl
 8002682:	2000      	movs	r0, #0
 8002684:	f04f 0c0a 	mov.w	ip, #10
 8002688:	9a07      	ldr	r2, [sp, #28]
 800268a:	4621      	mov	r1, r4
 800268c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002690:	3b30      	subs	r3, #48	; 0x30
 8002692:	2b09      	cmp	r3, #9
 8002694:	d94e      	bls.n	8002734 <_vfiprintf_r+0x1c4>
 8002696:	b1b0      	cbz	r0, 80026c6 <_vfiprintf_r+0x156>
 8002698:	9207      	str	r2, [sp, #28]
 800269a:	e014      	b.n	80026c6 <_vfiprintf_r+0x156>
 800269c:	eba0 0308 	sub.w	r3, r0, r8
 80026a0:	fa09 f303 	lsl.w	r3, r9, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	46a2      	mov	sl, r4
 80026a8:	9304      	str	r3, [sp, #16]
 80026aa:	e7d2      	b.n	8002652 <_vfiprintf_r+0xe2>
 80026ac:	9b03      	ldr	r3, [sp, #12]
 80026ae:	1d19      	adds	r1, r3, #4
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	9103      	str	r1, [sp, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bfbb      	ittet	lt
 80026b8:	425b      	neglt	r3, r3
 80026ba:	f042 0202 	orrlt.w	r2, r2, #2
 80026be:	9307      	strge	r3, [sp, #28]
 80026c0:	9307      	strlt	r3, [sp, #28]
 80026c2:	bfb8      	it	lt
 80026c4:	9204      	strlt	r2, [sp, #16]
 80026c6:	7823      	ldrb	r3, [r4, #0]
 80026c8:	2b2e      	cmp	r3, #46	; 0x2e
 80026ca:	d10c      	bne.n	80026e6 <_vfiprintf_r+0x176>
 80026cc:	7863      	ldrb	r3, [r4, #1]
 80026ce:	2b2a      	cmp	r3, #42	; 0x2a
 80026d0:	d135      	bne.n	800273e <_vfiprintf_r+0x1ce>
 80026d2:	9b03      	ldr	r3, [sp, #12]
 80026d4:	3402      	adds	r4, #2
 80026d6:	1d1a      	adds	r2, r3, #4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	9203      	str	r2, [sp, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bfb8      	it	lt
 80026e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80026e4:	9305      	str	r3, [sp, #20]
 80026e6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80027c0 <_vfiprintf_r+0x250>
 80026ea:	2203      	movs	r2, #3
 80026ec:	4650      	mov	r0, sl
 80026ee:	7821      	ldrb	r1, [r4, #0]
 80026f0:	f000 fc70 	bl	8002fd4 <memchr>
 80026f4:	b140      	cbz	r0, 8002708 <_vfiprintf_r+0x198>
 80026f6:	2340      	movs	r3, #64	; 0x40
 80026f8:	eba0 000a 	sub.w	r0, r0, sl
 80026fc:	fa03 f000 	lsl.w	r0, r3, r0
 8002700:	9b04      	ldr	r3, [sp, #16]
 8002702:	3401      	adds	r4, #1
 8002704:	4303      	orrs	r3, r0
 8002706:	9304      	str	r3, [sp, #16]
 8002708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800270c:	2206      	movs	r2, #6
 800270e:	482d      	ldr	r0, [pc, #180]	; (80027c4 <_vfiprintf_r+0x254>)
 8002710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002714:	f000 fc5e 	bl	8002fd4 <memchr>
 8002718:	2800      	cmp	r0, #0
 800271a:	d03f      	beq.n	800279c <_vfiprintf_r+0x22c>
 800271c:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <_vfiprintf_r+0x258>)
 800271e:	bb1b      	cbnz	r3, 8002768 <_vfiprintf_r+0x1f8>
 8002720:	9b03      	ldr	r3, [sp, #12]
 8002722:	3307      	adds	r3, #7
 8002724:	f023 0307 	bic.w	r3, r3, #7
 8002728:	3308      	adds	r3, #8
 800272a:	9303      	str	r3, [sp, #12]
 800272c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800272e:	443b      	add	r3, r7
 8002730:	9309      	str	r3, [sp, #36]	; 0x24
 8002732:	e767      	b.n	8002604 <_vfiprintf_r+0x94>
 8002734:	460c      	mov	r4, r1
 8002736:	2001      	movs	r0, #1
 8002738:	fb0c 3202 	mla	r2, ip, r2, r3
 800273c:	e7a5      	b.n	800268a <_vfiprintf_r+0x11a>
 800273e:	2300      	movs	r3, #0
 8002740:	f04f 0c0a 	mov.w	ip, #10
 8002744:	4619      	mov	r1, r3
 8002746:	3401      	adds	r4, #1
 8002748:	9305      	str	r3, [sp, #20]
 800274a:	4620      	mov	r0, r4
 800274c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002750:	3a30      	subs	r2, #48	; 0x30
 8002752:	2a09      	cmp	r2, #9
 8002754:	d903      	bls.n	800275e <_vfiprintf_r+0x1ee>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0c5      	beq.n	80026e6 <_vfiprintf_r+0x176>
 800275a:	9105      	str	r1, [sp, #20]
 800275c:	e7c3      	b.n	80026e6 <_vfiprintf_r+0x176>
 800275e:	4604      	mov	r4, r0
 8002760:	2301      	movs	r3, #1
 8002762:	fb0c 2101 	mla	r1, ip, r1, r2
 8002766:	e7f0      	b.n	800274a <_vfiprintf_r+0x1da>
 8002768:	ab03      	add	r3, sp, #12
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	462a      	mov	r2, r5
 800276e:	4630      	mov	r0, r6
 8002770:	4b16      	ldr	r3, [pc, #88]	; (80027cc <_vfiprintf_r+0x25c>)
 8002772:	a904      	add	r1, sp, #16
 8002774:	f3af 8000 	nop.w
 8002778:	4607      	mov	r7, r0
 800277a:	1c78      	adds	r0, r7, #1
 800277c:	d1d6      	bne.n	800272c <_vfiprintf_r+0x1bc>
 800277e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002780:	07d9      	lsls	r1, r3, #31
 8002782:	d405      	bmi.n	8002790 <_vfiprintf_r+0x220>
 8002784:	89ab      	ldrh	r3, [r5, #12]
 8002786:	059a      	lsls	r2, r3, #22
 8002788:	d402      	bmi.n	8002790 <_vfiprintf_r+0x220>
 800278a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800278c:	f7ff fe33 	bl	80023f6 <__retarget_lock_release_recursive>
 8002790:	89ab      	ldrh	r3, [r5, #12]
 8002792:	065b      	lsls	r3, r3, #25
 8002794:	f53f af12 	bmi.w	80025bc <_vfiprintf_r+0x4c>
 8002798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800279a:	e711      	b.n	80025c0 <_vfiprintf_r+0x50>
 800279c:	ab03      	add	r3, sp, #12
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	462a      	mov	r2, r5
 80027a2:	4630      	mov	r0, r6
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <_vfiprintf_r+0x25c>)
 80027a6:	a904      	add	r1, sp, #16
 80027a8:	f000 f882 	bl	80028b0 <_printf_i>
 80027ac:	e7e4      	b.n	8002778 <_vfiprintf_r+0x208>
 80027ae:	bf00      	nop
 80027b0:	08003170 	.word	0x08003170
 80027b4:	08003190 	.word	0x08003190
 80027b8:	08003150 	.word	0x08003150
 80027bc:	080031b0 	.word	0x080031b0
 80027c0:	080031b6 	.word	0x080031b6
 80027c4:	080031ba 	.word	0x080031ba
 80027c8:	00000000 	.word	0x00000000
 80027cc:	0800254b 	.word	0x0800254b

080027d0 <_printf_common>:
 80027d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027d4:	4616      	mov	r6, r2
 80027d6:	4699      	mov	r9, r3
 80027d8:	688a      	ldr	r2, [r1, #8]
 80027da:	690b      	ldr	r3, [r1, #16]
 80027dc:	4607      	mov	r7, r0
 80027de:	4293      	cmp	r3, r2
 80027e0:	bfb8      	it	lt
 80027e2:	4613      	movlt	r3, r2
 80027e4:	6033      	str	r3, [r6, #0]
 80027e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027ea:	460c      	mov	r4, r1
 80027ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027f0:	b10a      	cbz	r2, 80027f6 <_printf_common+0x26>
 80027f2:	3301      	adds	r3, #1
 80027f4:	6033      	str	r3, [r6, #0]
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	0699      	lsls	r1, r3, #26
 80027fa:	bf42      	ittt	mi
 80027fc:	6833      	ldrmi	r3, [r6, #0]
 80027fe:	3302      	addmi	r3, #2
 8002800:	6033      	strmi	r3, [r6, #0]
 8002802:	6825      	ldr	r5, [r4, #0]
 8002804:	f015 0506 	ands.w	r5, r5, #6
 8002808:	d106      	bne.n	8002818 <_printf_common+0x48>
 800280a:	f104 0a19 	add.w	sl, r4, #25
 800280e:	68e3      	ldr	r3, [r4, #12]
 8002810:	6832      	ldr	r2, [r6, #0]
 8002812:	1a9b      	subs	r3, r3, r2
 8002814:	42ab      	cmp	r3, r5
 8002816:	dc28      	bgt.n	800286a <_printf_common+0x9a>
 8002818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800281c:	1e13      	subs	r3, r2, #0
 800281e:	6822      	ldr	r2, [r4, #0]
 8002820:	bf18      	it	ne
 8002822:	2301      	movne	r3, #1
 8002824:	0692      	lsls	r2, r2, #26
 8002826:	d42d      	bmi.n	8002884 <_printf_common+0xb4>
 8002828:	4649      	mov	r1, r9
 800282a:	4638      	mov	r0, r7
 800282c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002830:	47c0      	blx	r8
 8002832:	3001      	adds	r0, #1
 8002834:	d020      	beq.n	8002878 <_printf_common+0xa8>
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	68e5      	ldr	r5, [r4, #12]
 800283a:	f003 0306 	and.w	r3, r3, #6
 800283e:	2b04      	cmp	r3, #4
 8002840:	bf18      	it	ne
 8002842:	2500      	movne	r5, #0
 8002844:	6832      	ldr	r2, [r6, #0]
 8002846:	f04f 0600 	mov.w	r6, #0
 800284a:	68a3      	ldr	r3, [r4, #8]
 800284c:	bf08      	it	eq
 800284e:	1aad      	subeq	r5, r5, r2
 8002850:	6922      	ldr	r2, [r4, #16]
 8002852:	bf08      	it	eq
 8002854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002858:	4293      	cmp	r3, r2
 800285a:	bfc4      	itt	gt
 800285c:	1a9b      	subgt	r3, r3, r2
 800285e:	18ed      	addgt	r5, r5, r3
 8002860:	341a      	adds	r4, #26
 8002862:	42b5      	cmp	r5, r6
 8002864:	d11a      	bne.n	800289c <_printf_common+0xcc>
 8002866:	2000      	movs	r0, #0
 8002868:	e008      	b.n	800287c <_printf_common+0xac>
 800286a:	2301      	movs	r3, #1
 800286c:	4652      	mov	r2, sl
 800286e:	4649      	mov	r1, r9
 8002870:	4638      	mov	r0, r7
 8002872:	47c0      	blx	r8
 8002874:	3001      	adds	r0, #1
 8002876:	d103      	bne.n	8002880 <_printf_common+0xb0>
 8002878:	f04f 30ff 	mov.w	r0, #4294967295
 800287c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002880:	3501      	adds	r5, #1
 8002882:	e7c4      	b.n	800280e <_printf_common+0x3e>
 8002884:	2030      	movs	r0, #48	; 0x30
 8002886:	18e1      	adds	r1, r4, r3
 8002888:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002892:	4422      	add	r2, r4
 8002894:	3302      	adds	r3, #2
 8002896:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800289a:	e7c5      	b.n	8002828 <_printf_common+0x58>
 800289c:	2301      	movs	r3, #1
 800289e:	4622      	mov	r2, r4
 80028a0:	4649      	mov	r1, r9
 80028a2:	4638      	mov	r0, r7
 80028a4:	47c0      	blx	r8
 80028a6:	3001      	adds	r0, #1
 80028a8:	d0e6      	beq.n	8002878 <_printf_common+0xa8>
 80028aa:	3601      	adds	r6, #1
 80028ac:	e7d9      	b.n	8002862 <_printf_common+0x92>
	...

080028b0 <_printf_i>:
 80028b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028b4:	7e0f      	ldrb	r7, [r1, #24]
 80028b6:	4691      	mov	r9, r2
 80028b8:	2f78      	cmp	r7, #120	; 0x78
 80028ba:	4680      	mov	r8, r0
 80028bc:	460c      	mov	r4, r1
 80028be:	469a      	mov	sl, r3
 80028c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028c6:	d807      	bhi.n	80028d8 <_printf_i+0x28>
 80028c8:	2f62      	cmp	r7, #98	; 0x62
 80028ca:	d80a      	bhi.n	80028e2 <_printf_i+0x32>
 80028cc:	2f00      	cmp	r7, #0
 80028ce:	f000 80d9 	beq.w	8002a84 <_printf_i+0x1d4>
 80028d2:	2f58      	cmp	r7, #88	; 0x58
 80028d4:	f000 80a4 	beq.w	8002a20 <_printf_i+0x170>
 80028d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028e0:	e03a      	b.n	8002958 <_printf_i+0xa8>
 80028e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028e6:	2b15      	cmp	r3, #21
 80028e8:	d8f6      	bhi.n	80028d8 <_printf_i+0x28>
 80028ea:	a101      	add	r1, pc, #4	; (adr r1, 80028f0 <_printf_i+0x40>)
 80028ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028f0:	08002949 	.word	0x08002949
 80028f4:	0800295d 	.word	0x0800295d
 80028f8:	080028d9 	.word	0x080028d9
 80028fc:	080028d9 	.word	0x080028d9
 8002900:	080028d9 	.word	0x080028d9
 8002904:	080028d9 	.word	0x080028d9
 8002908:	0800295d 	.word	0x0800295d
 800290c:	080028d9 	.word	0x080028d9
 8002910:	080028d9 	.word	0x080028d9
 8002914:	080028d9 	.word	0x080028d9
 8002918:	080028d9 	.word	0x080028d9
 800291c:	08002a6b 	.word	0x08002a6b
 8002920:	0800298d 	.word	0x0800298d
 8002924:	08002a4d 	.word	0x08002a4d
 8002928:	080028d9 	.word	0x080028d9
 800292c:	080028d9 	.word	0x080028d9
 8002930:	08002a8d 	.word	0x08002a8d
 8002934:	080028d9 	.word	0x080028d9
 8002938:	0800298d 	.word	0x0800298d
 800293c:	080028d9 	.word	0x080028d9
 8002940:	080028d9 	.word	0x080028d9
 8002944:	08002a55 	.word	0x08002a55
 8002948:	682b      	ldr	r3, [r5, #0]
 800294a:	1d1a      	adds	r2, r3, #4
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	602a      	str	r2, [r5, #0]
 8002950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002958:	2301      	movs	r3, #1
 800295a:	e0a4      	b.n	8002aa6 <_printf_i+0x1f6>
 800295c:	6820      	ldr	r0, [r4, #0]
 800295e:	6829      	ldr	r1, [r5, #0]
 8002960:	0606      	lsls	r6, r0, #24
 8002962:	f101 0304 	add.w	r3, r1, #4
 8002966:	d50a      	bpl.n	800297e <_printf_i+0xce>
 8002968:	680e      	ldr	r6, [r1, #0]
 800296a:	602b      	str	r3, [r5, #0]
 800296c:	2e00      	cmp	r6, #0
 800296e:	da03      	bge.n	8002978 <_printf_i+0xc8>
 8002970:	232d      	movs	r3, #45	; 0x2d
 8002972:	4276      	negs	r6, r6
 8002974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002978:	230a      	movs	r3, #10
 800297a:	485e      	ldr	r0, [pc, #376]	; (8002af4 <_printf_i+0x244>)
 800297c:	e019      	b.n	80029b2 <_printf_i+0x102>
 800297e:	680e      	ldr	r6, [r1, #0]
 8002980:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002984:	602b      	str	r3, [r5, #0]
 8002986:	bf18      	it	ne
 8002988:	b236      	sxthne	r6, r6
 800298a:	e7ef      	b.n	800296c <_printf_i+0xbc>
 800298c:	682b      	ldr	r3, [r5, #0]
 800298e:	6820      	ldr	r0, [r4, #0]
 8002990:	1d19      	adds	r1, r3, #4
 8002992:	6029      	str	r1, [r5, #0]
 8002994:	0601      	lsls	r1, r0, #24
 8002996:	d501      	bpl.n	800299c <_printf_i+0xec>
 8002998:	681e      	ldr	r6, [r3, #0]
 800299a:	e002      	b.n	80029a2 <_printf_i+0xf2>
 800299c:	0646      	lsls	r6, r0, #25
 800299e:	d5fb      	bpl.n	8002998 <_printf_i+0xe8>
 80029a0:	881e      	ldrh	r6, [r3, #0]
 80029a2:	2f6f      	cmp	r7, #111	; 0x6f
 80029a4:	bf0c      	ite	eq
 80029a6:	2308      	moveq	r3, #8
 80029a8:	230a      	movne	r3, #10
 80029aa:	4852      	ldr	r0, [pc, #328]	; (8002af4 <_printf_i+0x244>)
 80029ac:	2100      	movs	r1, #0
 80029ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029b2:	6865      	ldr	r5, [r4, #4]
 80029b4:	2d00      	cmp	r5, #0
 80029b6:	bfa8      	it	ge
 80029b8:	6821      	ldrge	r1, [r4, #0]
 80029ba:	60a5      	str	r5, [r4, #8]
 80029bc:	bfa4      	itt	ge
 80029be:	f021 0104 	bicge.w	r1, r1, #4
 80029c2:	6021      	strge	r1, [r4, #0]
 80029c4:	b90e      	cbnz	r6, 80029ca <_printf_i+0x11a>
 80029c6:	2d00      	cmp	r5, #0
 80029c8:	d04d      	beq.n	8002a66 <_printf_i+0x1b6>
 80029ca:	4615      	mov	r5, r2
 80029cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80029d0:	fb03 6711 	mls	r7, r3, r1, r6
 80029d4:	5dc7      	ldrb	r7, [r0, r7]
 80029d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029da:	4637      	mov	r7, r6
 80029dc:	42bb      	cmp	r3, r7
 80029de:	460e      	mov	r6, r1
 80029e0:	d9f4      	bls.n	80029cc <_printf_i+0x11c>
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d10b      	bne.n	80029fe <_printf_i+0x14e>
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	07de      	lsls	r6, r3, #31
 80029ea:	d508      	bpl.n	80029fe <_printf_i+0x14e>
 80029ec:	6923      	ldr	r3, [r4, #16]
 80029ee:	6861      	ldr	r1, [r4, #4]
 80029f0:	4299      	cmp	r1, r3
 80029f2:	bfde      	ittt	le
 80029f4:	2330      	movle	r3, #48	; 0x30
 80029f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029fe:	1b52      	subs	r2, r2, r5
 8002a00:	6122      	str	r2, [r4, #16]
 8002a02:	464b      	mov	r3, r9
 8002a04:	4621      	mov	r1, r4
 8002a06:	4640      	mov	r0, r8
 8002a08:	f8cd a000 	str.w	sl, [sp]
 8002a0c:	aa03      	add	r2, sp, #12
 8002a0e:	f7ff fedf 	bl	80027d0 <_printf_common>
 8002a12:	3001      	adds	r0, #1
 8002a14:	d14c      	bne.n	8002ab0 <_printf_i+0x200>
 8002a16:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1a:	b004      	add	sp, #16
 8002a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a20:	4834      	ldr	r0, [pc, #208]	; (8002af4 <_printf_i+0x244>)
 8002a22:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a26:	6829      	ldr	r1, [r5, #0]
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a2e:	6029      	str	r1, [r5, #0]
 8002a30:	061d      	lsls	r5, r3, #24
 8002a32:	d514      	bpl.n	8002a5e <_printf_i+0x1ae>
 8002a34:	07df      	lsls	r7, r3, #31
 8002a36:	bf44      	itt	mi
 8002a38:	f043 0320 	orrmi.w	r3, r3, #32
 8002a3c:	6023      	strmi	r3, [r4, #0]
 8002a3e:	b91e      	cbnz	r6, 8002a48 <_printf_i+0x198>
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	f023 0320 	bic.w	r3, r3, #32
 8002a46:	6023      	str	r3, [r4, #0]
 8002a48:	2310      	movs	r3, #16
 8002a4a:	e7af      	b.n	80029ac <_printf_i+0xfc>
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	f043 0320 	orr.w	r3, r3, #32
 8002a52:	6023      	str	r3, [r4, #0]
 8002a54:	2378      	movs	r3, #120	; 0x78
 8002a56:	4828      	ldr	r0, [pc, #160]	; (8002af8 <_printf_i+0x248>)
 8002a58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a5c:	e7e3      	b.n	8002a26 <_printf_i+0x176>
 8002a5e:	0659      	lsls	r1, r3, #25
 8002a60:	bf48      	it	mi
 8002a62:	b2b6      	uxthmi	r6, r6
 8002a64:	e7e6      	b.n	8002a34 <_printf_i+0x184>
 8002a66:	4615      	mov	r5, r2
 8002a68:	e7bb      	b.n	80029e2 <_printf_i+0x132>
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	6826      	ldr	r6, [r4, #0]
 8002a6e:	1d18      	adds	r0, r3, #4
 8002a70:	6961      	ldr	r1, [r4, #20]
 8002a72:	6028      	str	r0, [r5, #0]
 8002a74:	0635      	lsls	r5, r6, #24
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	d501      	bpl.n	8002a7e <_printf_i+0x1ce>
 8002a7a:	6019      	str	r1, [r3, #0]
 8002a7c:	e002      	b.n	8002a84 <_printf_i+0x1d4>
 8002a7e:	0670      	lsls	r0, r6, #25
 8002a80:	d5fb      	bpl.n	8002a7a <_printf_i+0x1ca>
 8002a82:	8019      	strh	r1, [r3, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	4615      	mov	r5, r2
 8002a88:	6123      	str	r3, [r4, #16]
 8002a8a:	e7ba      	b.n	8002a02 <_printf_i+0x152>
 8002a8c:	682b      	ldr	r3, [r5, #0]
 8002a8e:	2100      	movs	r1, #0
 8002a90:	1d1a      	adds	r2, r3, #4
 8002a92:	602a      	str	r2, [r5, #0]
 8002a94:	681d      	ldr	r5, [r3, #0]
 8002a96:	6862      	ldr	r2, [r4, #4]
 8002a98:	4628      	mov	r0, r5
 8002a9a:	f000 fa9b 	bl	8002fd4 <memchr>
 8002a9e:	b108      	cbz	r0, 8002aa4 <_printf_i+0x1f4>
 8002aa0:	1b40      	subs	r0, r0, r5
 8002aa2:	6060      	str	r0, [r4, #4]
 8002aa4:	6863      	ldr	r3, [r4, #4]
 8002aa6:	6123      	str	r3, [r4, #16]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aae:	e7a8      	b.n	8002a02 <_printf_i+0x152>
 8002ab0:	462a      	mov	r2, r5
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	4640      	mov	r0, r8
 8002ab6:	6923      	ldr	r3, [r4, #16]
 8002ab8:	47d0      	blx	sl
 8002aba:	3001      	adds	r0, #1
 8002abc:	d0ab      	beq.n	8002a16 <_printf_i+0x166>
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	079b      	lsls	r3, r3, #30
 8002ac2:	d413      	bmi.n	8002aec <_printf_i+0x23c>
 8002ac4:	68e0      	ldr	r0, [r4, #12]
 8002ac6:	9b03      	ldr	r3, [sp, #12]
 8002ac8:	4298      	cmp	r0, r3
 8002aca:	bfb8      	it	lt
 8002acc:	4618      	movlt	r0, r3
 8002ace:	e7a4      	b.n	8002a1a <_printf_i+0x16a>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	4632      	mov	r2, r6
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	4640      	mov	r0, r8
 8002ad8:	47d0      	blx	sl
 8002ada:	3001      	adds	r0, #1
 8002adc:	d09b      	beq.n	8002a16 <_printf_i+0x166>
 8002ade:	3501      	adds	r5, #1
 8002ae0:	68e3      	ldr	r3, [r4, #12]
 8002ae2:	9903      	ldr	r1, [sp, #12]
 8002ae4:	1a5b      	subs	r3, r3, r1
 8002ae6:	42ab      	cmp	r3, r5
 8002ae8:	dcf2      	bgt.n	8002ad0 <_printf_i+0x220>
 8002aea:	e7eb      	b.n	8002ac4 <_printf_i+0x214>
 8002aec:	2500      	movs	r5, #0
 8002aee:	f104 0619 	add.w	r6, r4, #25
 8002af2:	e7f5      	b.n	8002ae0 <_printf_i+0x230>
 8002af4:	080031c1 	.word	0x080031c1
 8002af8:	080031d2 	.word	0x080031d2

08002afc <_sbrk_r>:
 8002afc:	b538      	push	{r3, r4, r5, lr}
 8002afe:	2300      	movs	r3, #0
 8002b00:	4d05      	ldr	r5, [pc, #20]	; (8002b18 <_sbrk_r+0x1c>)
 8002b02:	4604      	mov	r4, r0
 8002b04:	4608      	mov	r0, r1
 8002b06:	602b      	str	r3, [r5, #0]
 8002b08:	f7fd fdd2 	bl	80006b0 <_sbrk>
 8002b0c:	1c43      	adds	r3, r0, #1
 8002b0e:	d102      	bne.n	8002b16 <_sbrk_r+0x1a>
 8002b10:	682b      	ldr	r3, [r5, #0]
 8002b12:	b103      	cbz	r3, 8002b16 <_sbrk_r+0x1a>
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	bd38      	pop	{r3, r4, r5, pc}
 8002b18:	20000118 	.word	0x20000118

08002b1c <__sread>:
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	460c      	mov	r4, r1
 8002b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b24:	f000 fab8 	bl	8003098 <_read_r>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	bfab      	itete	ge
 8002b2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8002b30:	181b      	addge	r3, r3, r0
 8002b32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b36:	bfac      	ite	ge
 8002b38:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b3a:	81a3      	strhlt	r3, [r4, #12]
 8002b3c:	bd10      	pop	{r4, pc}

08002b3e <__swrite>:
 8002b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b42:	461f      	mov	r7, r3
 8002b44:	898b      	ldrh	r3, [r1, #12]
 8002b46:	4605      	mov	r5, r0
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	4616      	mov	r6, r2
 8002b4e:	d505      	bpl.n	8002b5c <__swrite+0x1e>
 8002b50:	2302      	movs	r3, #2
 8002b52:	2200      	movs	r2, #0
 8002b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b58:	f000 f9c4 	bl	8002ee4 <_lseek_r>
 8002b5c:	89a3      	ldrh	r3, [r4, #12]
 8002b5e:	4632      	mov	r2, r6
 8002b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b64:	81a3      	strh	r3, [r4, #12]
 8002b66:	4628      	mov	r0, r5
 8002b68:	463b      	mov	r3, r7
 8002b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b72:	f000 b869 	b.w	8002c48 <_write_r>

08002b76 <__sseek>:
 8002b76:	b510      	push	{r4, lr}
 8002b78:	460c      	mov	r4, r1
 8002b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b7e:	f000 f9b1 	bl	8002ee4 <_lseek_r>
 8002b82:	1c43      	adds	r3, r0, #1
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	bf15      	itete	ne
 8002b88:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b92:	81a3      	strheq	r3, [r4, #12]
 8002b94:	bf18      	it	ne
 8002b96:	81a3      	strhne	r3, [r4, #12]
 8002b98:	bd10      	pop	{r4, pc}

08002b9a <__sclose>:
 8002b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b9e:	f000 b8d3 	b.w	8002d48 <_close_r>
	...

08002ba4 <__swbuf_r>:
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ba6:	460e      	mov	r6, r1
 8002ba8:	4614      	mov	r4, r2
 8002baa:	4605      	mov	r5, r0
 8002bac:	b118      	cbz	r0, 8002bb6 <__swbuf_r+0x12>
 8002bae:	6983      	ldr	r3, [r0, #24]
 8002bb0:	b90b      	cbnz	r3, 8002bb6 <__swbuf_r+0x12>
 8002bb2:	f7ff fb81 	bl	80022b8 <__sinit>
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <__swbuf_r+0x98>)
 8002bb8:	429c      	cmp	r4, r3
 8002bba:	d12b      	bne.n	8002c14 <__swbuf_r+0x70>
 8002bbc:	686c      	ldr	r4, [r5, #4]
 8002bbe:	69a3      	ldr	r3, [r4, #24]
 8002bc0:	60a3      	str	r3, [r4, #8]
 8002bc2:	89a3      	ldrh	r3, [r4, #12]
 8002bc4:	071a      	lsls	r2, r3, #28
 8002bc6:	d52f      	bpl.n	8002c28 <__swbuf_r+0x84>
 8002bc8:	6923      	ldr	r3, [r4, #16]
 8002bca:	b36b      	cbz	r3, 8002c28 <__swbuf_r+0x84>
 8002bcc:	6923      	ldr	r3, [r4, #16]
 8002bce:	6820      	ldr	r0, [r4, #0]
 8002bd0:	b2f6      	uxtb	r6, r6
 8002bd2:	1ac0      	subs	r0, r0, r3
 8002bd4:	6963      	ldr	r3, [r4, #20]
 8002bd6:	4637      	mov	r7, r6
 8002bd8:	4283      	cmp	r3, r0
 8002bda:	dc04      	bgt.n	8002be6 <__swbuf_r+0x42>
 8002bdc:	4621      	mov	r1, r4
 8002bde:	4628      	mov	r0, r5
 8002be0:	f000 f944 	bl	8002e6c <_fflush_r>
 8002be4:	bb30      	cbnz	r0, 8002c34 <__swbuf_r+0x90>
 8002be6:	68a3      	ldr	r3, [r4, #8]
 8002be8:	3001      	adds	r0, #1
 8002bea:	3b01      	subs	r3, #1
 8002bec:	60a3      	str	r3, [r4, #8]
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	1c5a      	adds	r2, r3, #1
 8002bf2:	6022      	str	r2, [r4, #0]
 8002bf4:	701e      	strb	r6, [r3, #0]
 8002bf6:	6963      	ldr	r3, [r4, #20]
 8002bf8:	4283      	cmp	r3, r0
 8002bfa:	d004      	beq.n	8002c06 <__swbuf_r+0x62>
 8002bfc:	89a3      	ldrh	r3, [r4, #12]
 8002bfe:	07db      	lsls	r3, r3, #31
 8002c00:	d506      	bpl.n	8002c10 <__swbuf_r+0x6c>
 8002c02:	2e0a      	cmp	r6, #10
 8002c04:	d104      	bne.n	8002c10 <__swbuf_r+0x6c>
 8002c06:	4621      	mov	r1, r4
 8002c08:	4628      	mov	r0, r5
 8002c0a:	f000 f92f 	bl	8002e6c <_fflush_r>
 8002c0e:	b988      	cbnz	r0, 8002c34 <__swbuf_r+0x90>
 8002c10:	4638      	mov	r0, r7
 8002c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <__swbuf_r+0x9c>)
 8002c16:	429c      	cmp	r4, r3
 8002c18:	d101      	bne.n	8002c1e <__swbuf_r+0x7a>
 8002c1a:	68ac      	ldr	r4, [r5, #8]
 8002c1c:	e7cf      	b.n	8002bbe <__swbuf_r+0x1a>
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <__swbuf_r+0xa0>)
 8002c20:	429c      	cmp	r4, r3
 8002c22:	bf08      	it	eq
 8002c24:	68ec      	ldreq	r4, [r5, #12]
 8002c26:	e7ca      	b.n	8002bbe <__swbuf_r+0x1a>
 8002c28:	4621      	mov	r1, r4
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	f000 f81e 	bl	8002c6c <__swsetup_r>
 8002c30:	2800      	cmp	r0, #0
 8002c32:	d0cb      	beq.n	8002bcc <__swbuf_r+0x28>
 8002c34:	f04f 37ff 	mov.w	r7, #4294967295
 8002c38:	e7ea      	b.n	8002c10 <__swbuf_r+0x6c>
 8002c3a:	bf00      	nop
 8002c3c:	08003170 	.word	0x08003170
 8002c40:	08003190 	.word	0x08003190
 8002c44:	08003150 	.word	0x08003150

08002c48 <_write_r>:
 8002c48:	b538      	push	{r3, r4, r5, lr}
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	2200      	movs	r2, #0
 8002c52:	4d05      	ldr	r5, [pc, #20]	; (8002c68 <_write_r+0x20>)
 8002c54:	602a      	str	r2, [r5, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f7fd fcde 	bl	8000618 <_write>
 8002c5c:	1c43      	adds	r3, r0, #1
 8002c5e:	d102      	bne.n	8002c66 <_write_r+0x1e>
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	b103      	cbz	r3, 8002c66 <_write_r+0x1e>
 8002c64:	6023      	str	r3, [r4, #0]
 8002c66:	bd38      	pop	{r3, r4, r5, pc}
 8002c68:	20000118 	.word	0x20000118

08002c6c <__swsetup_r>:
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <__swsetup_r+0xcc>)
 8002c6e:	b570      	push	{r4, r5, r6, lr}
 8002c70:	681d      	ldr	r5, [r3, #0]
 8002c72:	4606      	mov	r6, r0
 8002c74:	460c      	mov	r4, r1
 8002c76:	b125      	cbz	r5, 8002c82 <__swsetup_r+0x16>
 8002c78:	69ab      	ldr	r3, [r5, #24]
 8002c7a:	b913      	cbnz	r3, 8002c82 <__swsetup_r+0x16>
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	f7ff fb1b 	bl	80022b8 <__sinit>
 8002c82:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <__swsetup_r+0xd0>)
 8002c84:	429c      	cmp	r4, r3
 8002c86:	d10f      	bne.n	8002ca8 <__swsetup_r+0x3c>
 8002c88:	686c      	ldr	r4, [r5, #4]
 8002c8a:	89a3      	ldrh	r3, [r4, #12]
 8002c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c90:	0719      	lsls	r1, r3, #28
 8002c92:	d42c      	bmi.n	8002cee <__swsetup_r+0x82>
 8002c94:	06dd      	lsls	r5, r3, #27
 8002c96:	d411      	bmi.n	8002cbc <__swsetup_r+0x50>
 8002c98:	2309      	movs	r3, #9
 8002c9a:	6033      	str	r3, [r6, #0]
 8002c9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca4:	81a3      	strh	r3, [r4, #12]
 8002ca6:	e03e      	b.n	8002d26 <__swsetup_r+0xba>
 8002ca8:	4b25      	ldr	r3, [pc, #148]	; (8002d40 <__swsetup_r+0xd4>)
 8002caa:	429c      	cmp	r4, r3
 8002cac:	d101      	bne.n	8002cb2 <__swsetup_r+0x46>
 8002cae:	68ac      	ldr	r4, [r5, #8]
 8002cb0:	e7eb      	b.n	8002c8a <__swsetup_r+0x1e>
 8002cb2:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <__swsetup_r+0xd8>)
 8002cb4:	429c      	cmp	r4, r3
 8002cb6:	bf08      	it	eq
 8002cb8:	68ec      	ldreq	r4, [r5, #12]
 8002cba:	e7e6      	b.n	8002c8a <__swsetup_r+0x1e>
 8002cbc:	0758      	lsls	r0, r3, #29
 8002cbe:	d512      	bpl.n	8002ce6 <__swsetup_r+0x7a>
 8002cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cc2:	b141      	cbz	r1, 8002cd6 <__swsetup_r+0x6a>
 8002cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cc8:	4299      	cmp	r1, r3
 8002cca:	d002      	beq.n	8002cd2 <__swsetup_r+0x66>
 8002ccc:	4630      	mov	r0, r6
 8002cce:	f000 f99b 	bl	8003008 <_free_r>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8002cd6:	89a3      	ldrh	r3, [r4, #12]
 8002cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002cdc:	81a3      	strh	r3, [r4, #12]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	6063      	str	r3, [r4, #4]
 8002ce2:	6923      	ldr	r3, [r4, #16]
 8002ce4:	6023      	str	r3, [r4, #0]
 8002ce6:	89a3      	ldrh	r3, [r4, #12]
 8002ce8:	f043 0308 	orr.w	r3, r3, #8
 8002cec:	81a3      	strh	r3, [r4, #12]
 8002cee:	6923      	ldr	r3, [r4, #16]
 8002cf0:	b94b      	cbnz	r3, 8002d06 <__swsetup_r+0x9a>
 8002cf2:	89a3      	ldrh	r3, [r4, #12]
 8002cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d003      	beq.n	8002d06 <__swsetup_r+0x9a>
 8002cfe:	4621      	mov	r1, r4
 8002d00:	4630      	mov	r0, r6
 8002d02:	f000 f927 	bl	8002f54 <__smakebuf_r>
 8002d06:	89a0      	ldrh	r0, [r4, #12]
 8002d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d0c:	f010 0301 	ands.w	r3, r0, #1
 8002d10:	d00a      	beq.n	8002d28 <__swsetup_r+0xbc>
 8002d12:	2300      	movs	r3, #0
 8002d14:	60a3      	str	r3, [r4, #8]
 8002d16:	6963      	ldr	r3, [r4, #20]
 8002d18:	425b      	negs	r3, r3
 8002d1a:	61a3      	str	r3, [r4, #24]
 8002d1c:	6923      	ldr	r3, [r4, #16]
 8002d1e:	b943      	cbnz	r3, 8002d32 <__swsetup_r+0xc6>
 8002d20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d24:	d1ba      	bne.n	8002c9c <__swsetup_r+0x30>
 8002d26:	bd70      	pop	{r4, r5, r6, pc}
 8002d28:	0781      	lsls	r1, r0, #30
 8002d2a:	bf58      	it	pl
 8002d2c:	6963      	ldrpl	r3, [r4, #20]
 8002d2e:	60a3      	str	r3, [r4, #8]
 8002d30:	e7f4      	b.n	8002d1c <__swsetup_r+0xb0>
 8002d32:	2000      	movs	r0, #0
 8002d34:	e7f7      	b.n	8002d26 <__swsetup_r+0xba>
 8002d36:	bf00      	nop
 8002d38:	2000000c 	.word	0x2000000c
 8002d3c:	08003170 	.word	0x08003170
 8002d40:	08003190 	.word	0x08003190
 8002d44:	08003150 	.word	0x08003150

08002d48 <_close_r>:
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	4d05      	ldr	r5, [pc, #20]	; (8002d64 <_close_r+0x1c>)
 8002d4e:	4604      	mov	r4, r0
 8002d50:	4608      	mov	r0, r1
 8002d52:	602b      	str	r3, [r5, #0]
 8002d54:	f7fd fc7c 	bl	8000650 <_close>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d102      	bne.n	8002d62 <_close_r+0x1a>
 8002d5c:	682b      	ldr	r3, [r5, #0]
 8002d5e:	b103      	cbz	r3, 8002d62 <_close_r+0x1a>
 8002d60:	6023      	str	r3, [r4, #0]
 8002d62:	bd38      	pop	{r3, r4, r5, pc}
 8002d64:	20000118 	.word	0x20000118

08002d68 <__sflush_r>:
 8002d68:	898a      	ldrh	r2, [r1, #12]
 8002d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6c:	4605      	mov	r5, r0
 8002d6e:	0710      	lsls	r0, r2, #28
 8002d70:	460c      	mov	r4, r1
 8002d72:	d457      	bmi.n	8002e24 <__sflush_r+0xbc>
 8002d74:	684b      	ldr	r3, [r1, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	dc04      	bgt.n	8002d84 <__sflush_r+0x1c>
 8002d7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	dc01      	bgt.n	8002d84 <__sflush_r+0x1c>
 8002d80:	2000      	movs	r0, #0
 8002d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d86:	2e00      	cmp	r6, #0
 8002d88:	d0fa      	beq.n	8002d80 <__sflush_r+0x18>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d90:	682f      	ldr	r7, [r5, #0]
 8002d92:	602b      	str	r3, [r5, #0]
 8002d94:	d032      	beq.n	8002dfc <__sflush_r+0x94>
 8002d96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d98:	89a3      	ldrh	r3, [r4, #12]
 8002d9a:	075a      	lsls	r2, r3, #29
 8002d9c:	d505      	bpl.n	8002daa <__sflush_r+0x42>
 8002d9e:	6863      	ldr	r3, [r4, #4]
 8002da0:	1ac0      	subs	r0, r0, r3
 8002da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002da4:	b10b      	cbz	r3, 8002daa <__sflush_r+0x42>
 8002da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002da8:	1ac0      	subs	r0, r0, r3
 8002daa:	2300      	movs	r3, #0
 8002dac:	4602      	mov	r2, r0
 8002dae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002db0:	4628      	mov	r0, r5
 8002db2:	6a21      	ldr	r1, [r4, #32]
 8002db4:	47b0      	blx	r6
 8002db6:	1c43      	adds	r3, r0, #1
 8002db8:	89a3      	ldrh	r3, [r4, #12]
 8002dba:	d106      	bne.n	8002dca <__sflush_r+0x62>
 8002dbc:	6829      	ldr	r1, [r5, #0]
 8002dbe:	291d      	cmp	r1, #29
 8002dc0:	d82c      	bhi.n	8002e1c <__sflush_r+0xb4>
 8002dc2:	4a29      	ldr	r2, [pc, #164]	; (8002e68 <__sflush_r+0x100>)
 8002dc4:	40ca      	lsrs	r2, r1
 8002dc6:	07d6      	lsls	r6, r2, #31
 8002dc8:	d528      	bpl.n	8002e1c <__sflush_r+0xb4>
 8002dca:	2200      	movs	r2, #0
 8002dcc:	6062      	str	r2, [r4, #4]
 8002dce:	6922      	ldr	r2, [r4, #16]
 8002dd0:	04d9      	lsls	r1, r3, #19
 8002dd2:	6022      	str	r2, [r4, #0]
 8002dd4:	d504      	bpl.n	8002de0 <__sflush_r+0x78>
 8002dd6:	1c42      	adds	r2, r0, #1
 8002dd8:	d101      	bne.n	8002dde <__sflush_r+0x76>
 8002dda:	682b      	ldr	r3, [r5, #0]
 8002ddc:	b903      	cbnz	r3, 8002de0 <__sflush_r+0x78>
 8002dde:	6560      	str	r0, [r4, #84]	; 0x54
 8002de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002de2:	602f      	str	r7, [r5, #0]
 8002de4:	2900      	cmp	r1, #0
 8002de6:	d0cb      	beq.n	8002d80 <__sflush_r+0x18>
 8002de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002dec:	4299      	cmp	r1, r3
 8002dee:	d002      	beq.n	8002df6 <__sflush_r+0x8e>
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 f909 	bl	8003008 <_free_r>
 8002df6:	2000      	movs	r0, #0
 8002df8:	6360      	str	r0, [r4, #52]	; 0x34
 8002dfa:	e7c2      	b.n	8002d82 <__sflush_r+0x1a>
 8002dfc:	6a21      	ldr	r1, [r4, #32]
 8002dfe:	2301      	movs	r3, #1
 8002e00:	4628      	mov	r0, r5
 8002e02:	47b0      	blx	r6
 8002e04:	1c41      	adds	r1, r0, #1
 8002e06:	d1c7      	bne.n	8002d98 <__sflush_r+0x30>
 8002e08:	682b      	ldr	r3, [r5, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0c4      	beq.n	8002d98 <__sflush_r+0x30>
 8002e0e:	2b1d      	cmp	r3, #29
 8002e10:	d001      	beq.n	8002e16 <__sflush_r+0xae>
 8002e12:	2b16      	cmp	r3, #22
 8002e14:	d101      	bne.n	8002e1a <__sflush_r+0xb2>
 8002e16:	602f      	str	r7, [r5, #0]
 8002e18:	e7b2      	b.n	8002d80 <__sflush_r+0x18>
 8002e1a:	89a3      	ldrh	r3, [r4, #12]
 8002e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e20:	81a3      	strh	r3, [r4, #12]
 8002e22:	e7ae      	b.n	8002d82 <__sflush_r+0x1a>
 8002e24:	690f      	ldr	r7, [r1, #16]
 8002e26:	2f00      	cmp	r7, #0
 8002e28:	d0aa      	beq.n	8002d80 <__sflush_r+0x18>
 8002e2a:	0793      	lsls	r3, r2, #30
 8002e2c:	bf18      	it	ne
 8002e2e:	2300      	movne	r3, #0
 8002e30:	680e      	ldr	r6, [r1, #0]
 8002e32:	bf08      	it	eq
 8002e34:	694b      	ldreq	r3, [r1, #20]
 8002e36:	1bf6      	subs	r6, r6, r7
 8002e38:	600f      	str	r7, [r1, #0]
 8002e3a:	608b      	str	r3, [r1, #8]
 8002e3c:	2e00      	cmp	r6, #0
 8002e3e:	dd9f      	ble.n	8002d80 <__sflush_r+0x18>
 8002e40:	4633      	mov	r3, r6
 8002e42:	463a      	mov	r2, r7
 8002e44:	4628      	mov	r0, r5
 8002e46:	6a21      	ldr	r1, [r4, #32]
 8002e48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002e4c:	47e0      	blx	ip
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	dc06      	bgt.n	8002e60 <__sflush_r+0xf8>
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e5c:	81a3      	strh	r3, [r4, #12]
 8002e5e:	e790      	b.n	8002d82 <__sflush_r+0x1a>
 8002e60:	4407      	add	r7, r0
 8002e62:	1a36      	subs	r6, r6, r0
 8002e64:	e7ea      	b.n	8002e3c <__sflush_r+0xd4>
 8002e66:	bf00      	nop
 8002e68:	20400001 	.word	0x20400001

08002e6c <_fflush_r>:
 8002e6c:	b538      	push	{r3, r4, r5, lr}
 8002e6e:	690b      	ldr	r3, [r1, #16]
 8002e70:	4605      	mov	r5, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	b913      	cbnz	r3, 8002e7c <_fflush_r+0x10>
 8002e76:	2500      	movs	r5, #0
 8002e78:	4628      	mov	r0, r5
 8002e7a:	bd38      	pop	{r3, r4, r5, pc}
 8002e7c:	b118      	cbz	r0, 8002e86 <_fflush_r+0x1a>
 8002e7e:	6983      	ldr	r3, [r0, #24]
 8002e80:	b90b      	cbnz	r3, 8002e86 <_fflush_r+0x1a>
 8002e82:	f7ff fa19 	bl	80022b8 <__sinit>
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <_fflush_r+0x6c>)
 8002e88:	429c      	cmp	r4, r3
 8002e8a:	d11b      	bne.n	8002ec4 <_fflush_r+0x58>
 8002e8c:	686c      	ldr	r4, [r5, #4]
 8002e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ef      	beq.n	8002e76 <_fflush_r+0xa>
 8002e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e98:	07d0      	lsls	r0, r2, #31
 8002e9a:	d404      	bmi.n	8002ea6 <_fflush_r+0x3a>
 8002e9c:	0599      	lsls	r1, r3, #22
 8002e9e:	d402      	bmi.n	8002ea6 <_fflush_r+0x3a>
 8002ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ea2:	f7ff faa7 	bl	80023f4 <__retarget_lock_acquire_recursive>
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	f7ff ff5d 	bl	8002d68 <__sflush_r>
 8002eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	07da      	lsls	r2, r3, #31
 8002eb4:	d4e0      	bmi.n	8002e78 <_fflush_r+0xc>
 8002eb6:	89a3      	ldrh	r3, [r4, #12]
 8002eb8:	059b      	lsls	r3, r3, #22
 8002eba:	d4dd      	bmi.n	8002e78 <_fflush_r+0xc>
 8002ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ebe:	f7ff fa9a 	bl	80023f6 <__retarget_lock_release_recursive>
 8002ec2:	e7d9      	b.n	8002e78 <_fflush_r+0xc>
 8002ec4:	4b05      	ldr	r3, [pc, #20]	; (8002edc <_fflush_r+0x70>)
 8002ec6:	429c      	cmp	r4, r3
 8002ec8:	d101      	bne.n	8002ece <_fflush_r+0x62>
 8002eca:	68ac      	ldr	r4, [r5, #8]
 8002ecc:	e7df      	b.n	8002e8e <_fflush_r+0x22>
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <_fflush_r+0x74>)
 8002ed0:	429c      	cmp	r4, r3
 8002ed2:	bf08      	it	eq
 8002ed4:	68ec      	ldreq	r4, [r5, #12]
 8002ed6:	e7da      	b.n	8002e8e <_fflush_r+0x22>
 8002ed8:	08003170 	.word	0x08003170
 8002edc:	08003190 	.word	0x08003190
 8002ee0:	08003150 	.word	0x08003150

08002ee4 <_lseek_r>:
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	4608      	mov	r0, r1
 8002eea:	4611      	mov	r1, r2
 8002eec:	2200      	movs	r2, #0
 8002eee:	4d05      	ldr	r5, [pc, #20]	; (8002f04 <_lseek_r+0x20>)
 8002ef0:	602a      	str	r2, [r5, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f7fd fbd0 	bl	8000698 <_lseek>
 8002ef8:	1c43      	adds	r3, r0, #1
 8002efa:	d102      	bne.n	8002f02 <_lseek_r+0x1e>
 8002efc:	682b      	ldr	r3, [r5, #0]
 8002efe:	b103      	cbz	r3, 8002f02 <_lseek_r+0x1e>
 8002f00:	6023      	str	r3, [r4, #0]
 8002f02:	bd38      	pop	{r3, r4, r5, pc}
 8002f04:	20000118 	.word	0x20000118

08002f08 <__swhatbuf_r>:
 8002f08:	b570      	push	{r4, r5, r6, lr}
 8002f0a:	460e      	mov	r6, r1
 8002f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f10:	4614      	mov	r4, r2
 8002f12:	2900      	cmp	r1, #0
 8002f14:	461d      	mov	r5, r3
 8002f16:	b096      	sub	sp, #88	; 0x58
 8002f18:	da08      	bge.n	8002f2c <__swhatbuf_r+0x24>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002f20:	602a      	str	r2, [r5, #0]
 8002f22:	061a      	lsls	r2, r3, #24
 8002f24:	d410      	bmi.n	8002f48 <__swhatbuf_r+0x40>
 8002f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f2a:	e00e      	b.n	8002f4a <__swhatbuf_r+0x42>
 8002f2c:	466a      	mov	r2, sp
 8002f2e:	f000 f8c5 	bl	80030bc <_fstat_r>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	dbf1      	blt.n	8002f1a <__swhatbuf_r+0x12>
 8002f36:	9a01      	ldr	r2, [sp, #4]
 8002f38:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f3c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f40:	425a      	negs	r2, r3
 8002f42:	415a      	adcs	r2, r3
 8002f44:	602a      	str	r2, [r5, #0]
 8002f46:	e7ee      	b.n	8002f26 <__swhatbuf_r+0x1e>
 8002f48:	2340      	movs	r3, #64	; 0x40
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	b016      	add	sp, #88	; 0x58
 8002f50:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f54 <__smakebuf_r>:
 8002f54:	898b      	ldrh	r3, [r1, #12]
 8002f56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f58:	079d      	lsls	r5, r3, #30
 8002f5a:	4606      	mov	r6, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	d507      	bpl.n	8002f70 <__smakebuf_r+0x1c>
 8002f60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f64:	6023      	str	r3, [r4, #0]
 8002f66:	6123      	str	r3, [r4, #16]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	6163      	str	r3, [r4, #20]
 8002f6c:	b002      	add	sp, #8
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	466a      	mov	r2, sp
 8002f72:	ab01      	add	r3, sp, #4
 8002f74:	f7ff ffc8 	bl	8002f08 <__swhatbuf_r>
 8002f78:	9900      	ldr	r1, [sp, #0]
 8002f7a:	4605      	mov	r5, r0
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f7ff fa5b 	bl	8002438 <_malloc_r>
 8002f82:	b948      	cbnz	r0, 8002f98 <__smakebuf_r+0x44>
 8002f84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f88:	059a      	lsls	r2, r3, #22
 8002f8a:	d4ef      	bmi.n	8002f6c <__smakebuf_r+0x18>
 8002f8c:	f023 0303 	bic.w	r3, r3, #3
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	81a3      	strh	r3, [r4, #12]
 8002f96:	e7e3      	b.n	8002f60 <__smakebuf_r+0xc>
 8002f98:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <__smakebuf_r+0x7c>)
 8002f9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	6020      	str	r0, [r4, #0]
 8002fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa4:	81a3      	strh	r3, [r4, #12]
 8002fa6:	9b00      	ldr	r3, [sp, #0]
 8002fa8:	6120      	str	r0, [r4, #16]
 8002faa:	6163      	str	r3, [r4, #20]
 8002fac:	9b01      	ldr	r3, [sp, #4]
 8002fae:	b15b      	cbz	r3, 8002fc8 <__smakebuf_r+0x74>
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fb6:	f000 f893 	bl	80030e0 <_isatty_r>
 8002fba:	b128      	cbz	r0, 8002fc8 <__smakebuf_r+0x74>
 8002fbc:	89a3      	ldrh	r3, [r4, #12]
 8002fbe:	f023 0303 	bic.w	r3, r3, #3
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	81a3      	strh	r3, [r4, #12]
 8002fc8:	89a0      	ldrh	r0, [r4, #12]
 8002fca:	4305      	orrs	r5, r0
 8002fcc:	81a5      	strh	r5, [r4, #12]
 8002fce:	e7cd      	b.n	8002f6c <__smakebuf_r+0x18>
 8002fd0:	08002251 	.word	0x08002251

08002fd4 <memchr>:
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	b2c9      	uxtb	r1, r1
 8002fda:	4402      	add	r2, r0
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	d101      	bne.n	8002fe6 <memchr+0x12>
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	e003      	b.n	8002fee <memchr+0x1a>
 8002fe6:	7804      	ldrb	r4, [r0, #0]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	428c      	cmp	r4, r1
 8002fec:	d1f6      	bne.n	8002fdc <memchr+0x8>
 8002fee:	bd10      	pop	{r4, pc}

08002ff0 <__malloc_lock>:
 8002ff0:	4801      	ldr	r0, [pc, #4]	; (8002ff8 <__malloc_lock+0x8>)
 8002ff2:	f7ff b9ff 	b.w	80023f4 <__retarget_lock_acquire_recursive>
 8002ff6:	bf00      	nop
 8002ff8:	2000010c 	.word	0x2000010c

08002ffc <__malloc_unlock>:
 8002ffc:	4801      	ldr	r0, [pc, #4]	; (8003004 <__malloc_unlock+0x8>)
 8002ffe:	f7ff b9fa 	b.w	80023f6 <__retarget_lock_release_recursive>
 8003002:	bf00      	nop
 8003004:	2000010c 	.word	0x2000010c

08003008 <_free_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	4605      	mov	r5, r0
 800300c:	2900      	cmp	r1, #0
 800300e:	d040      	beq.n	8003092 <_free_r+0x8a>
 8003010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003014:	1f0c      	subs	r4, r1, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	bfb8      	it	lt
 800301a:	18e4      	addlt	r4, r4, r3
 800301c:	f7ff ffe8 	bl	8002ff0 <__malloc_lock>
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <_free_r+0x8c>)
 8003022:	6813      	ldr	r3, [r2, #0]
 8003024:	b933      	cbnz	r3, 8003034 <_free_r+0x2c>
 8003026:	6063      	str	r3, [r4, #4]
 8003028:	6014      	str	r4, [r2, #0]
 800302a:	4628      	mov	r0, r5
 800302c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003030:	f7ff bfe4 	b.w	8002ffc <__malloc_unlock>
 8003034:	42a3      	cmp	r3, r4
 8003036:	d908      	bls.n	800304a <_free_r+0x42>
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	1821      	adds	r1, r4, r0
 800303c:	428b      	cmp	r3, r1
 800303e:	bf01      	itttt	eq
 8003040:	6819      	ldreq	r1, [r3, #0]
 8003042:	685b      	ldreq	r3, [r3, #4]
 8003044:	1809      	addeq	r1, r1, r0
 8003046:	6021      	streq	r1, [r4, #0]
 8003048:	e7ed      	b.n	8003026 <_free_r+0x1e>
 800304a:	461a      	mov	r2, r3
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	b10b      	cbz	r3, 8003054 <_free_r+0x4c>
 8003050:	42a3      	cmp	r3, r4
 8003052:	d9fa      	bls.n	800304a <_free_r+0x42>
 8003054:	6811      	ldr	r1, [r2, #0]
 8003056:	1850      	adds	r0, r2, r1
 8003058:	42a0      	cmp	r0, r4
 800305a:	d10b      	bne.n	8003074 <_free_r+0x6c>
 800305c:	6820      	ldr	r0, [r4, #0]
 800305e:	4401      	add	r1, r0
 8003060:	1850      	adds	r0, r2, r1
 8003062:	4283      	cmp	r3, r0
 8003064:	6011      	str	r1, [r2, #0]
 8003066:	d1e0      	bne.n	800302a <_free_r+0x22>
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4401      	add	r1, r0
 800306e:	6011      	str	r1, [r2, #0]
 8003070:	6053      	str	r3, [r2, #4]
 8003072:	e7da      	b.n	800302a <_free_r+0x22>
 8003074:	d902      	bls.n	800307c <_free_r+0x74>
 8003076:	230c      	movs	r3, #12
 8003078:	602b      	str	r3, [r5, #0]
 800307a:	e7d6      	b.n	800302a <_free_r+0x22>
 800307c:	6820      	ldr	r0, [r4, #0]
 800307e:	1821      	adds	r1, r4, r0
 8003080:	428b      	cmp	r3, r1
 8003082:	bf01      	itttt	eq
 8003084:	6819      	ldreq	r1, [r3, #0]
 8003086:	685b      	ldreq	r3, [r3, #4]
 8003088:	1809      	addeq	r1, r1, r0
 800308a:	6021      	streq	r1, [r4, #0]
 800308c:	6063      	str	r3, [r4, #4]
 800308e:	6054      	str	r4, [r2, #4]
 8003090:	e7cb      	b.n	800302a <_free_r+0x22>
 8003092:	bd38      	pop	{r3, r4, r5, pc}
 8003094:	20000110 	.word	0x20000110

08003098 <_read_r>:
 8003098:	b538      	push	{r3, r4, r5, lr}
 800309a:	4604      	mov	r4, r0
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	2200      	movs	r2, #0
 80030a2:	4d05      	ldr	r5, [pc, #20]	; (80030b8 <_read_r+0x20>)
 80030a4:	602a      	str	r2, [r5, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f7fd fa99 	bl	80005de <_read>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	d102      	bne.n	80030b6 <_read_r+0x1e>
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	b103      	cbz	r3, 80030b6 <_read_r+0x1e>
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	20000118 	.word	0x20000118

080030bc <_fstat_r>:
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	2300      	movs	r3, #0
 80030c0:	4d06      	ldr	r5, [pc, #24]	; (80030dc <_fstat_r+0x20>)
 80030c2:	4604      	mov	r4, r0
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	602b      	str	r3, [r5, #0]
 80030ca:	f7fd facc 	bl	8000666 <_fstat>
 80030ce:	1c43      	adds	r3, r0, #1
 80030d0:	d102      	bne.n	80030d8 <_fstat_r+0x1c>
 80030d2:	682b      	ldr	r3, [r5, #0]
 80030d4:	b103      	cbz	r3, 80030d8 <_fstat_r+0x1c>
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	bd38      	pop	{r3, r4, r5, pc}
 80030da:	bf00      	nop
 80030dc:	20000118 	.word	0x20000118

080030e0 <_isatty_r>:
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	2300      	movs	r3, #0
 80030e4:	4d05      	ldr	r5, [pc, #20]	; (80030fc <_isatty_r+0x1c>)
 80030e6:	4604      	mov	r4, r0
 80030e8:	4608      	mov	r0, r1
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	f7fd faca 	bl	8000684 <_isatty>
 80030f0:	1c43      	adds	r3, r0, #1
 80030f2:	d102      	bne.n	80030fa <_isatty_r+0x1a>
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	b103      	cbz	r3, 80030fa <_isatty_r+0x1a>
 80030f8:	6023      	str	r3, [r4, #0]
 80030fa:	bd38      	pop	{r3, r4, r5, pc}
 80030fc:	20000118 	.word	0x20000118

08003100 <_init>:
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003102:	bf00      	nop
 8003104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003106:	bc08      	pop	{r3}
 8003108:	469e      	mov	lr, r3
 800310a:	4770      	bx	lr

0800310c <_fini>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	bf00      	nop
 8003110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003112:	bc08      	pop	{r3}
 8003114:	469e      	mov	lr, r3
 8003116:	4770      	bx	lr
