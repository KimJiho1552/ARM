
Ultra_wave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b8  080042b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080042b8  080042b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042b8  080042b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b8  080042b8  000142b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042bc  080042bc  000142bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08004330  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004330  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8ff  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac0  00000000  00000000  0002a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002d088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183f8  00000000  00000000  0002dc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd9e  00000000  00000000  00046008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b80a  00000000  00000000  00051da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd5b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab4  00000000  00000000  000dd600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800419c 	.word	0x0800419c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800419c 	.word	0x0800419c

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 feed 	bl	8002f3c <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	2000011c 	.word	0x2000011c

08000170 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	7f1b      	ldrb	r3, [r3, #28]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d142      	bne.n	8000206 <HAL_TIM_IC_CaptureCallback+0x96>
		if(Capureflag == 0) {
 8000180:	4b23      	ldr	r3, [pc, #140]	; (8000210 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d118      	bne.n	80001ba <HAL_TIM_IC_CaptureCallback+0x4a>
//			IC1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
			IC1 = TIM2->CCR1;
 8000188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800018c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800018e:	4a21      	ldr	r2, [pc, #132]	; (8000214 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000190:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000192:	4b21      	ldr	r3, [pc, #132]	; (8000218 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	6a1a      	ldr	r2, [r3, #32]
 8000198:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	f022 020a 	bic.w	r2, r2, #10
 80001a0:	621a      	str	r2, [r3, #32]
 80001a2:	4b1d      	ldr	r3, [pc, #116]	; (8000218 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	6a1a      	ldr	r2, [r3, #32]
 80001a8:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	f042 0202 	orr.w	r2, r2, #2
 80001b0:	621a      	str	r2, [r3, #32]
//			TIM2->CCER |= 0x02;

			Capureflag = 1;
 80001b2:	4b17      	ldr	r3, [pc, #92]	; (8000210 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80001b4:	2201      	movs	r2, #1
 80001b6:	601a      	str	r2, [r3, #0]
			time_us = (IC2 - IC1);

			Capureflag = 0;
		}
	}
}
 80001b8:	e025      	b.n	8000206 <HAL_TIM_IC_CaptureCallback+0x96>
		else if(Capureflag == 1) {
 80001ba:	4b15      	ldr	r3, [pc, #84]	; (8000210 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	2b01      	cmp	r3, #1
 80001c0:	d121      	bne.n	8000206 <HAL_TIM_IC_CaptureCallback+0x96>
			IC2 = TIM2->CCR1;
 80001c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001c8:	4a14      	ldr	r2, [pc, #80]	; (800021c <HAL_TIM_IC_CaptureCallback+0xac>)
 80001ca:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80001cc:	4b12      	ldr	r3, [pc, #72]	; (8000218 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2200      	movs	r2, #0
 80001d2:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80001d4:	4b10      	ldr	r3, [pc, #64]	; (8000218 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	6a1a      	ldr	r2, [r3, #32]
 80001da:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f022 020a 	bic.w	r2, r2, #10
 80001e2:	621a      	str	r2, [r3, #32]
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80001e6:	681a      	ldr	r2, [r3, #0]
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	6a12      	ldr	r2, [r2, #32]
 80001ee:	621a      	str	r2, [r3, #32]
			time_us = (IC2 - IC1);
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <HAL_TIM_IC_CaptureCallback+0xac>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	1ad3      	subs	r3, r2, r3
 80001fa:	461a      	mov	r2, r3
 80001fc:	4b08      	ldr	r3, [pc, #32]	; (8000220 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80001fe:	601a      	str	r2, [r3, #0]
			Capureflag = 0;
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000202:	2200      	movs	r2, #0
 8000204:	601a      	str	r2, [r3, #0]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr
 8000210:	20000168 	.word	0x20000168
 8000214:	20000160 	.word	0x20000160
 8000218:	200000d4 	.word	0x200000d4
 800021c:	20000164 	.word	0x20000164
 8000220:	2000016c 	.word	0x2000016c

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fc2c 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f836 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f9b2 	bl	8000598 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000234:	f000 f986 	bl	8000544 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000238:	f000 f872 	bl	8000320 <MX_TIM1_Init>
  MX_TIM2_Init();
 800023c:	f000 f912 	bl	8000464 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000240:	2100      	movs	r1, #0
 8000242:	480e      	ldr	r0, [pc, #56]	; (800027c <main+0x58>)
 8000244:	f001 fc32 	bl	8001aac <HAL_TIM_PWM_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000248:	2100      	movs	r1, #0
 800024a:	480d      	ldr	r0, [pc, #52]	; (8000280 <main+0x5c>)
 800024c:	f001 fd6e 	bl	8001d2c <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("-----------------------\n\r");
 8000250:	480c      	ldr	r0, [pc, #48]	; (8000284 <main+0x60>)
 8000252:	f003 f80f 	bl	8003274 <iprintf>
	  printf("IC2 = %u, IC1 = %u\n\r", IC2, IC1);
 8000256:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <main+0x64>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <main+0x68>)
 800025c:	6812      	ldr	r2, [r2, #0]
 800025e:	4619      	mov	r1, r3
 8000260:	480b      	ldr	r0, [pc, #44]	; (8000290 <main+0x6c>)
 8000262:	f003 f807 	bl	8003274 <iprintf>
//	  printf("freq = %u Hz\n\r", freq);
	  printf("time = %u us\n\r", time_us);
 8000266:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <main+0x70>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	4619      	mov	r1, r3
 800026c:	480a      	ldr	r0, [pc, #40]	; (8000298 <main+0x74>)
 800026e:	f003 f801 	bl	8003274 <iprintf>
	  HAL_Delay(1000);
 8000272:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000276:	f000 fc67 	bl	8000b48 <HAL_Delay>
	  printf("-----------------------\n\r");
 800027a:	e7e9      	b.n	8000250 <main+0x2c>
 800027c:	2000008c 	.word	0x2000008c
 8000280:	200000d4 	.word	0x200000d4
 8000284:	080041b4 	.word	0x080041b4
 8000288:	20000164 	.word	0x20000164
 800028c:	20000160 	.word	0x20000160
 8000290:	080041d0 	.word	0x080041d0
 8000294:	2000016c 	.word	0x2000016c
 8000298:	080041e8 	.word	0x080041e8

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b090      	sub	sp, #64	; 0x40
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 ffda 	bl	8003264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002be:	2302      	movs	r3, #2
 80002c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c2:	2301      	movs	r3, #1
 80002c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	2310      	movs	r3, #16
 80002c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ca:	2302      	movs	r3, #2
 80002cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002ce:	2300      	movs	r3, #0
 80002d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002d2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d8:	f107 0318 	add.w	r3, r7, #24
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 ff23 	bl	8001128 <HAL_RCC_OscConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002e8:	f000 f9c4 	bl	8000674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ec:	230f      	movs	r3, #15
 80002ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	2302      	movs	r3, #2
 80002f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2102      	movs	r1, #2
 8000306:	4618      	mov	r0, r3
 8000308:	f001 f990 	bl	800162c <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000312:	f000 f9af 	bl	8000674 <Error_Handler>
  }
}
 8000316:	bf00      	nop
 8000318:	3740      	adds	r7, #64	; 0x40
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b096      	sub	sp, #88	; 0x58
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000334:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800033e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]
 800034e:	615a      	str	r2, [r3, #20]
 8000350:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	2220      	movs	r2, #32
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f002 ff83 	bl	8003264 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800035e:	4b3f      	ldr	r3, [pc, #252]	; (800045c <MX_TIM1_Init+0x13c>)
 8000360:	4a3f      	ldr	r2, [pc, #252]	; (8000460 <MX_TIM1_Init+0x140>)
 8000362:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000364:	4b3d      	ldr	r3, [pc, #244]	; (800045c <MX_TIM1_Init+0x13c>)
 8000366:	223f      	movs	r2, #63	; 0x3f
 8000368:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036a:	4b3c      	ldr	r3, [pc, #240]	; (800045c <MX_TIM1_Init+0x13c>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000370:	4b3a      	ldr	r3, [pc, #232]	; (800045c <MX_TIM1_Init+0x13c>)
 8000372:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000376:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000378:	4b38      	ldr	r3, [pc, #224]	; (800045c <MX_TIM1_Init+0x13c>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800037e:	4b37      	ldr	r3, [pc, #220]	; (800045c <MX_TIM1_Init+0x13c>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000384:	4b35      	ldr	r3, [pc, #212]	; (800045c <MX_TIM1_Init+0x13c>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800038a:	4834      	ldr	r0, [pc, #208]	; (800045c <MX_TIM1_Init+0x13c>)
 800038c:	f001 fae6 	bl	800195c <HAL_TIM_Base_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000396:	f000 f96d 	bl	8000674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003a4:	4619      	mov	r1, r3
 80003a6:	482d      	ldr	r0, [pc, #180]	; (800045c <MX_TIM1_Init+0x13c>)
 80003a8:	f002 f820 	bl	80023ec <HAL_TIM_ConfigClockSource>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80003b2:	f000 f95f 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003b6:	4829      	ldr	r0, [pc, #164]	; (800045c <MX_TIM1_Init+0x13c>)
 80003b8:	f001 fb1f 	bl	80019fa <HAL_TIM_PWM_Init>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80003c2:	f000 f957 	bl	8000674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c6:	2300      	movs	r3, #0
 80003c8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003d2:	4619      	mov	r1, r3
 80003d4:	4821      	ldr	r0, [pc, #132]	; (800045c <MX_TIM1_Init+0x13c>)
 80003d6:	f002 fca3 	bl	8002d20 <HAL_TIMEx_MasterConfigSynchronization>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80003e0:	f000 f948 	bl	8000674 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e4:	2360      	movs	r3, #96	; 0x60
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500-1;
 80003e8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80003ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ee:	2300      	movs	r3, #0
 80003f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003f2:	2300      	movs	r3, #0
 80003f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003f6:	2300      	movs	r3, #0
 80003f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003fa:	2300      	movs	r3, #0
 80003fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003fe:	2300      	movs	r3, #0
 8000400:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000406:	2200      	movs	r2, #0
 8000408:	4619      	mov	r1, r3
 800040a:	4814      	ldr	r0, [pc, #80]	; (800045c <MX_TIM1_Init+0x13c>)
 800040c:	f001 ff30 	bl	8002270 <HAL_TIM_PWM_ConfigChannel>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000416:	f000 f92d 	bl	8000674 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800042e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000432:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4807      	ldr	r0, [pc, #28]	; (800045c <MX_TIM1_Init+0x13c>)
 800043e:	f002 fccd 	bl	8002ddc <HAL_TIMEx_ConfigBreakDeadTime>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000448:	f000 f914 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800044c:	4803      	ldr	r0, [pc, #12]	; (800045c <MX_TIM1_Init+0x13c>)
 800044e:	f000 f9a1 	bl	8000794 <HAL_TIM_MspPostInit>

}
 8000452:	bf00      	nop
 8000454:	3758      	adds	r7, #88	; 0x58
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000008c 	.word	0x2000008c
 8000460:	40012c00 	.word	0x40012c00

08000464 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b08a      	sub	sp, #40	; 0x28
 8000468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046a:	f107 0318 	add.w	r3, r7, #24
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000482:	463b      	mov	r3, r7
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800048e:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <MX_TIM2_Init+0xdc>)
 8000490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000494:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000496:	4b2a      	ldr	r3, [pc, #168]	; (8000540 <MX_TIM2_Init+0xdc>)
 8000498:	223f      	movs	r2, #63	; 0x3f
 800049a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049c:	4b28      	ldr	r3, [pc, #160]	; (8000540 <MX_TIM2_Init+0xdc>)
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000;
 80004a2:	4b27      	ldr	r3, [pc, #156]	; (8000540 <MX_TIM2_Init+0xdc>)
 80004a4:	f247 5230 	movw	r2, #30000	; 0x7530
 80004a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004aa:	4b25      	ldr	r3, [pc, #148]	; (8000540 <MX_TIM2_Init+0xdc>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b0:	4b23      	ldr	r3, [pc, #140]	; (8000540 <MX_TIM2_Init+0xdc>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004b6:	4822      	ldr	r0, [pc, #136]	; (8000540 <MX_TIM2_Init+0xdc>)
 80004b8:	f001 fa50 	bl	800195c <HAL_TIM_Base_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80004c2:	f000 f8d7 	bl	8000674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004cc:	f107 0318 	add.w	r3, r7, #24
 80004d0:	4619      	mov	r1, r3
 80004d2:	481b      	ldr	r0, [pc, #108]	; (8000540 <MX_TIM2_Init+0xdc>)
 80004d4:	f001 ff8a 	bl	80023ec <HAL_TIM_ConfigClockSource>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80004de:	f000 f8c9 	bl	8000674 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80004e2:	4817      	ldr	r0, [pc, #92]	; (8000540 <MX_TIM2_Init+0xdc>)
 80004e4:	f001 fbca 	bl	8001c7c <HAL_TIM_IC_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80004ee:	f000 f8c1 	bl	8000674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	4619      	mov	r1, r3
 8000500:	480f      	ldr	r0, [pc, #60]	; (8000540 <MX_TIM2_Init+0xdc>)
 8000502:	f002 fc0d 	bl	8002d20 <HAL_TIMEx_MasterConfigSynchronization>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800050c:	f000 f8b2 	bl	8000674 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000510:	2300      	movs	r3, #0
 8000512:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000514:	2301      	movs	r3, #1
 8000516:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	4619      	mov	r1, r3
 8000526:	4806      	ldr	r0, [pc, #24]	; (8000540 <MX_TIM2_Init+0xdc>)
 8000528:	f001 fe0e 	bl	8002148 <HAL_TIM_IC_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000532:	f000 f89f 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	3728      	adds	r7, #40	; 0x28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200000d4 	.word	0x200000d4

08000544 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_USART2_UART_Init+0x50>)
 800054c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800056a:	220c      	movs	r2, #12
 800056c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_USART2_UART_Init+0x4c>)
 800057c:	f002 fc91 	bl	8002ea2 <HAL_UART_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000586:	f000 f875 	bl	8000674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000011c 	.word	0x2000011c
 8000594:	40004400 	.word	0x40004400

08000598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ac:	4b2d      	ldr	r3, [pc, #180]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a2c      	ldr	r2, [pc, #176]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005b2:	f043 0310 	orr.w	r3, r3, #16
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0310 	and.w	r3, r3, #16
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a26      	ldr	r2, [pc, #152]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005ca:	f043 0320 	orr.w	r3, r3, #32
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b24      	ldr	r3, [pc, #144]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0320 	and.w	r3, r3, #32
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b21      	ldr	r3, [pc, #132]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a20      	ldr	r2, [pc, #128]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <MX_GPIO_Init+0xcc>)
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_GPIO_Init+0xcc>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0308 	and.w	r3, r3, #8
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2120      	movs	r1, #32
 8000610:	4815      	ldr	r0, [pc, #84]	; (8000668 <MX_GPIO_Init+0xd0>)
 8000612:	f000 fd4f 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000616:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_GPIO_Init+0xd4>)
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	4811      	ldr	r0, [pc, #68]	; (8000670 <MX_GPIO_Init+0xd8>)
 800062c:	f000 fbbe 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000630:	2320      	movs	r3, #32
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4808      	ldr	r0, [pc, #32]	; (8000668 <MX_GPIO_Init+0xd0>)
 8000648:	f000 fbb0 	bl	8000dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2028      	movs	r0, #40	; 0x28
 8000652:	f000 fb74 	bl	8000d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000656:	2028      	movs	r0, #40	; 0x28
 8000658:	f000 fb8d 	bl	8000d76 <HAL_NVIC_EnableIRQ>

}
 800065c:	bf00      	nop
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	40010800 	.word	0x40010800
 800066c:	10110000 	.word	0x10110000
 8000670:	40011000 	.word	0x40011000

08000674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000678:	b672      	cpsid	i
}
 800067a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <Error_Handler+0x8>
	...

08000680 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_MspInit+0x5c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <HAL_MspInit+0x5c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x5c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_MspInit+0x5c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_MspInit+0x60>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_MspInit+0x60>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000

080006e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0318 	add.w	r3, r7, #24
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a22      	ldr	r2, [pc, #136]	; (8000788 <HAL_TIM_Base_MspInit+0xa4>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d10c      	bne.n	800071e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <HAL_TIM_Base_MspInit+0xa8>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a20      	ldr	r2, [pc, #128]	; (800078c <HAL_TIM_Base_MspInit+0xa8>)
 800070a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <HAL_TIM_Base_MspInit+0xa8>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800071c:	e030      	b.n	8000780 <HAL_TIM_Base_MspInit+0x9c>
  else if(htim_base->Instance==TIM2)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000726:	d12b      	bne.n	8000780 <HAL_TIM_Base_MspInit+0x9c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_TIM_Base_MspInit+0xa8>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	4a17      	ldr	r2, [pc, #92]	; (800078c <HAL_TIM_Base_MspInit+0xa8>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	61d3      	str	r3, [r2, #28]
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <HAL_TIM_Base_MspInit+0xa8>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_TIM_Base_MspInit+0xa8>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a11      	ldr	r2, [pc, #68]	; (800078c <HAL_TIM_Base_MspInit+0xa8>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_TIM_Base_MspInit+0xa8>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000758:	2301      	movs	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	4619      	mov	r1, r3
 800076a:	4809      	ldr	r0, [pc, #36]	; (8000790 <HAL_TIM_Base_MspInit+0xac>)
 800076c:	f000 fb1e 	bl	8000dac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	201c      	movs	r0, #28
 8000776:	f000 fae2 	bl	8000d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800077a:	201c      	movs	r0, #28
 800077c:	f000 fafb 	bl	8000d76 <HAL_NVIC_EnableIRQ>
}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40012c00 	.word	0x40012c00
 800078c:	40021000 	.word	0x40021000
 8000790:	40010800 	.word	0x40010800

08000794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_TIM_MspPostInit+0x5c>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d118      	bne.n	80007e6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_TIM_MspPostInit+0x60>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_TIM_MspPostInit+0x60>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_TIM_MspPostInit+0x60>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <HAL_TIM_MspPostInit+0x64>)
 80007e2:	f000 fae3 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007e6:	bf00      	nop
 80007e8:	3720      	adds	r7, #32
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40012c00 	.word	0x40012c00
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010800 	.word	0x40010800

080007fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <HAL_UART_MspInit+0x70>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d123      	bne.n	8000864 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800081c:	4b14      	ldr	r3, [pc, #80]	; (8000870 <HAL_UART_MspInit+0x74>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	4a13      	ldr	r2, [pc, #76]	; (8000870 <HAL_UART_MspInit+0x74>)
 8000822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000826:	61d3      	str	r3, [r2, #28]
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_UART_MspInit+0x74>)
 800082a:	69db      	ldr	r3, [r3, #28]
 800082c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000830:	60fb      	str	r3, [r7, #12]
 8000832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <HAL_UART_MspInit+0x74>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <HAL_UART_MspInit+0x74>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_UART_MspInit+0x74>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800084c:	230c      	movs	r3, #12
 800084e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2302      	movs	r3, #2
 8000856:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	4619      	mov	r1, r3
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <HAL_UART_MspInit+0x78>)
 8000860:	f000 faa4 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40004400 	.word	0x40004400
 8000870:	40021000 	.word	0x40021000
 8000874:	40010800 	.word	0x40010800

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008be:	f000 f927 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <TIM2_IRQHandler+0x10>)
 80008ce:	f001 fb33 	bl	8001f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000d4 	.word	0x200000d4

080008dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008e4:	f000 fbfe 	bl	80010e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	e00a      	b.n	8000914 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008fe:	f3af 8000 	nop.w
 8000902:	4601      	mov	r1, r0
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	60ba      	str	r2, [r7, #8]
 800090a:	b2ca      	uxtb	r2, r1
 800090c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	3301      	adds	r3, #1
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697a      	ldr	r2, [r7, #20]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	429a      	cmp	r2, r3
 800091a:	dbf0      	blt.n	80008fe <_read+0x12>
	}

return len;
 800091c:	687b      	ldr	r3, [r7, #4]
}
 800091e:	4618      	mov	r0, r3
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	e009      	b.n	800094c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	1c5a      	adds	r2, r3, #1
 800093c:	60ba      	str	r2, [r7, #8]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc03 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf1      	blt.n	8000938 <_write+0x12>
	}
	return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <_close>:

int _close(int file)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
	return -1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000984:	605a      	str	r2, [r3, #4]
	return 0;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <_isatty>:

int _isatty(int file)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
	return 1;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b085      	sub	sp, #20
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
	return 0;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
	...

080009c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c8:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <_sbrk+0x5c>)
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <_sbrk+0x60>)
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d4:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <_sbrk+0x64>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <_sbrk+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d207      	bcs.n	8000a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f0:	f002 fc0e 	bl	8003210 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e009      	b.n	8000a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <_sbrk+0x64>)
 8000a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20005000 	.word	0x20005000
 8000a20:	00000400 	.word	0x00000400
 8000a24:	20000170 	.word	0x20000170
 8000a28:	20000188 	.word	0x20000188

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5e:	f7ff ffe5 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f002 fbdb 	bl	800321c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fbdd 	bl	8000224 <main>
  bx lr
 8000a6a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a74:	080042c0 	.word	0x080042c0
  ldr r2, =_sbss
 8000a78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a7c:	20000188 	.word	0x20000188

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <HAL_Init+0x28>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <HAL_Init+0x28>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f947 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 f808 	bl	8000ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fdee 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_InitTick+0x54>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x58>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f95f 	bl	8000d92 <HAL_SYSTICK_Config>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00e      	b.n	8000afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d80a      	bhi.n	8000afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	f000 f927 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <HAL_InitTick+0x5c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_IncTick+0x20>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000174 	.word	0x20000174

08000b34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <HAL_GetTick+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	20000174 	.word	0x20000174

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff fff0 	bl	8000b34 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffe0 	bl	8000b34 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0b      	blt.n	8000c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4906      	ldr	r1, [pc, #24]	; (8000c28 <__NVIC_EnableIRQ+0x34>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	; (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff90 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff2d 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff42 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff90 	bl	8000c80 <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5f 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff35 	bl	8000bf4 <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b08b      	sub	sp, #44	; 0x2c
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e169      	b.n	8001094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f040 8158 	bne.w	800108e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a9a      	ldr	r2, [pc, #616]	; (800104c <HAL_GPIO_Init+0x2a0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d05e      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000de8:	4a98      	ldr	r2, [pc, #608]	; (800104c <HAL_GPIO_Init+0x2a0>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d875      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000dee:	4a98      	ldr	r2, [pc, #608]	; (8001050 <HAL_GPIO_Init+0x2a4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d058      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000df4:	4a96      	ldr	r2, [pc, #600]	; (8001050 <HAL_GPIO_Init+0x2a4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d86f      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000dfa:	4a96      	ldr	r2, [pc, #600]	; (8001054 <HAL_GPIO_Init+0x2a8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d052      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e00:	4a94      	ldr	r2, [pc, #592]	; (8001054 <HAL_GPIO_Init+0x2a8>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d869      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e06:	4a94      	ldr	r2, [pc, #592]	; (8001058 <HAL_GPIO_Init+0x2ac>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d04c      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e0c:	4a92      	ldr	r2, [pc, #584]	; (8001058 <HAL_GPIO_Init+0x2ac>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d863      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e12:	4a92      	ldr	r2, [pc, #584]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d046      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
 8000e18:	4a90      	ldr	r2, [pc, #576]	; (800105c <HAL_GPIO_Init+0x2b0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d85d      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e1e:	2b12      	cmp	r3, #18
 8000e20:	d82a      	bhi.n	8000e78 <HAL_GPIO_Init+0xcc>
 8000e22:	2b12      	cmp	r3, #18
 8000e24:	d859      	bhi.n	8000eda <HAL_GPIO_Init+0x12e>
 8000e26:	a201      	add	r2, pc, #4	; (adr r2, 8000e2c <HAL_GPIO_Init+0x80>)
 8000e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2c:	08000ea7 	.word	0x08000ea7
 8000e30:	08000e81 	.word	0x08000e81
 8000e34:	08000e93 	.word	0x08000e93
 8000e38:	08000ed5 	.word	0x08000ed5
 8000e3c:	08000edb 	.word	0x08000edb
 8000e40:	08000edb 	.word	0x08000edb
 8000e44:	08000edb 	.word	0x08000edb
 8000e48:	08000edb 	.word	0x08000edb
 8000e4c:	08000edb 	.word	0x08000edb
 8000e50:	08000edb 	.word	0x08000edb
 8000e54:	08000edb 	.word	0x08000edb
 8000e58:	08000edb 	.word	0x08000edb
 8000e5c:	08000edb 	.word	0x08000edb
 8000e60:	08000edb 	.word	0x08000edb
 8000e64:	08000edb 	.word	0x08000edb
 8000e68:	08000edb 	.word	0x08000edb
 8000e6c:	08000edb 	.word	0x08000edb
 8000e70:	08000e89 	.word	0x08000e89
 8000e74:	08000e9d 	.word	0x08000e9d
 8000e78:	4a79      	ldr	r2, [pc, #484]	; (8001060 <HAL_GPIO_Init+0x2b4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e7e:	e02c      	b.n	8000eda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	623b      	str	r3, [r7, #32]
          break;
 8000e86:	e029      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	623b      	str	r3, [r7, #32]
          break;
 8000e90:	e024      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	3308      	adds	r3, #8
 8000e98:	623b      	str	r3, [r7, #32]
          break;
 8000e9a:	e01f      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	330c      	adds	r3, #12
 8000ea2:	623b      	str	r3, [r7, #32]
          break;
 8000ea4:	e01a      	b.n	8000edc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	623b      	str	r3, [r7, #32]
          break;
 8000eb2:	e013      	b.n	8000edc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d105      	bne.n	8000ec8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	611a      	str	r2, [r3, #16]
          break;
 8000ec6:	e009      	b.n	8000edc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	615a      	str	r2, [r3, #20]
          break;
 8000ed2:	e003      	b.n	8000edc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
          break;
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x130>
          break;
 8000eda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2bff      	cmp	r3, #255	; 0xff
 8000ee0:	d801      	bhi.n	8000ee6 <HAL_GPIO_Init+0x13a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	e001      	b.n	8000eea <HAL_GPIO_Init+0x13e>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2bff      	cmp	r3, #255	; 0xff
 8000ef0:	d802      	bhi.n	8000ef8 <HAL_GPIO_Init+0x14c>
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	e002      	b.n	8000efe <HAL_GPIO_Init+0x152>
 8000ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efa:	3b08      	subs	r3, #8
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	210f      	movs	r1, #15
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	401a      	ands	r2, r3
 8000f10:	6a39      	ldr	r1, [r7, #32]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	fa01 f303 	lsl.w	r3, r1, r3
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 80b1 	beq.w	800108e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f2c:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b4a      	ldr	r3, [pc, #296]	; (8001064 <HAL_GPIO_Init+0x2b8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f44:	4a48      	ldr	r2, [pc, #288]	; (8001068 <HAL_GPIO_Init+0x2bc>)
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a40      	ldr	r2, [pc, #256]	; (800106c <HAL_GPIO_Init+0x2c0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d013      	beq.n	8000f98 <HAL_GPIO_Init+0x1ec>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a3f      	ldr	r2, [pc, #252]	; (8001070 <HAL_GPIO_Init+0x2c4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d00d      	beq.n	8000f94 <HAL_GPIO_Init+0x1e8>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a3e      	ldr	r2, [pc, #248]	; (8001074 <HAL_GPIO_Init+0x2c8>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d007      	beq.n	8000f90 <HAL_GPIO_Init+0x1e4>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a3d      	ldr	r2, [pc, #244]	; (8001078 <HAL_GPIO_Init+0x2cc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d101      	bne.n	8000f8c <HAL_GPIO_Init+0x1e0>
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000faa:	492f      	ldr	r1, [pc, #188]	; (8001068 <HAL_GPIO_Init+0x2bc>)
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d006      	beq.n	8000fd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fc4:	4b2d      	ldr	r3, [pc, #180]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	492c      	ldr	r1, [pc, #176]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	4928      	ldr	r1, [pc, #160]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d006      	beq.n	8000ffa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4922      	ldr	r1, [pc, #136]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
 8000ff8:	e006      	b.n	8001008 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	43db      	mvns	r3, r3
 8001002:	491e      	ldr	r1, [pc, #120]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001004:	4013      	ands	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d006      	beq.n	8001022 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	4918      	ldr	r1, [pc, #96]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4313      	orrs	r3, r2
 800101e:	608b      	str	r3, [r1, #8]
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	43db      	mvns	r3, r3
 800102a:	4914      	ldr	r1, [pc, #80]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800102c:	4013      	ands	r3, r2
 800102e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d021      	beq.n	8001080 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_GPIO_Init+0x2d0>)
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	490e      	ldr	r1, [pc, #56]	; (800107c <HAL_GPIO_Init+0x2d0>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	60cb      	str	r3, [r1, #12]
 8001048:	e021      	b.n	800108e <HAL_GPIO_Init+0x2e2>
 800104a:	bf00      	nop
 800104c:	10320000 	.word	0x10320000
 8001050:	10310000 	.word	0x10310000
 8001054:	10220000 	.word	0x10220000
 8001058:	10210000 	.word	0x10210000
 800105c:	10120000 	.word	0x10120000
 8001060:	10110000 	.word	0x10110000
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	40010800 	.word	0x40010800
 8001070:	40010c00 	.word	0x40010c00
 8001074:	40011000 	.word	0x40011000
 8001078:	40011400 	.word	0x40011400
 800107c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_GPIO_Init+0x304>)
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	43db      	mvns	r3, r3
 8001088:	4909      	ldr	r1, [pc, #36]	; (80010b0 <HAL_GPIO_Init+0x304>)
 800108a:	4013      	ands	r3, r2
 800108c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	3301      	adds	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	fa22 f303 	lsr.w	r3, r2, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f47f ae8e 	bne.w	8000dc0 <HAL_GPIO_Init+0x14>
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	372c      	adds	r7, #44	; 0x2c
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	041a      	lsls	r2, r3, #16
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	611a      	str	r2, [r3, #16]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	4618      	mov	r0, r3
 8001104:	f000 f806 	bl	8001114 <HAL_GPIO_EXTI_Callback>
  }
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40010400 	.word	0x40010400

08001114 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e272      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8087 	beq.w	8001256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001148:	4b92      	ldr	r3, [pc, #584]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 030c 	and.w	r3, r3, #12
 8001150:	2b04      	cmp	r3, #4
 8001152:	d00c      	beq.n	800116e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001154:	4b8f      	ldr	r3, [pc, #572]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d112      	bne.n	8001186 <HAL_RCC_OscConfig+0x5e>
 8001160:	4b8c      	ldr	r3, [pc, #560]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116c:	d10b      	bne.n	8001186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116e:	4b89      	ldr	r3, [pc, #548]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d06c      	beq.n	8001254 <HAL_RCC_OscConfig+0x12c>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d168      	bne.n	8001254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e24c      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x76>
 8001190:	4b80      	ldr	r3, [pc, #512]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a7f      	ldr	r2, [pc, #508]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e02e      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x98>
 80011a6:	4b7b      	ldr	r3, [pc, #492]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a7a      	ldr	r2, [pc, #488]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b78      	ldr	r3, [pc, #480]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a77      	ldr	r2, [pc, #476]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e01d      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011c8:	d10c      	bne.n	80011e4 <HAL_RCC_OscConfig+0xbc>
 80011ca:	4b72      	ldr	r3, [pc, #456]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a71      	ldr	r2, [pc, #452]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6e      	ldr	r2, [pc, #440]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e00b      	b.n	80011fc <HAL_RCC_OscConfig+0xd4>
 80011e4:	4b6b      	ldr	r3, [pc, #428]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a6a      	ldr	r2, [pc, #424]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b68      	ldr	r3, [pc, #416]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a67      	ldr	r2, [pc, #412]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fc96 	bl	8000b34 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fc92 	bl	8000b34 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b64      	cmp	r3, #100	; 0x64
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e200      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f0      	beq.n	800120c <HAL_RCC_OscConfig+0xe4>
 800122a:	e014      	b.n	8001256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fc82 	bl	8000b34 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fc7e 	bl	8000b34 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e1ec      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	4b53      	ldr	r3, [pc, #332]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x10c>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d063      	beq.n	800132a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001262:	4b4c      	ldr	r3, [pc, #304]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b08      	cmp	r3, #8
 8001278:	d11c      	bne.n	80012b4 <HAL_RCC_OscConfig+0x18c>
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d116      	bne.n	80012b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	4b43      	ldr	r3, [pc, #268]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d005      	beq.n	800129e <HAL_RCC_OscConfig+0x176>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e1c0      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4939      	ldr	r1, [pc, #228]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	e03a      	b.n	800132a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d020      	beq.n	80012fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012bc:	4b36      	ldr	r3, [pc, #216]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fc37 	bl	8000b34 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ca:	f7ff fc33 	bl	8000b34 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e1a1      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e8:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4927      	ldr	r1, [pc, #156]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	600b      	str	r3, [r1, #0]
 80012fc:	e015      	b.n	800132a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fe:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_RCC_OscConfig+0x270>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fc16 	bl	8000b34 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130c:	f7ff fc12 	bl	8000b34 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e180      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d03a      	beq.n	80013ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d019      	beq.n	8001372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_RCC_OscConfig+0x274>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fbf6 	bl	8000b34 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800134c:	f7ff fbf2 	bl	8000b34 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e160      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <HAL_RCC_OscConfig+0x26c>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 fad8 	bl	8001920 <RCC_Delay>
 8001370:	e01c      	b.n	80013ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_RCC_OscConfig+0x274>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001378:	f7ff fbdc 	bl	8000b34 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137e:	e00f      	b.n	80013a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001380:	f7ff fbd8 	bl	8000b34 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d908      	bls.n	80013a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e146      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000
 8001398:	42420000 	.word	0x42420000
 800139c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	4b92      	ldr	r3, [pc, #584]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1e9      	bne.n	8001380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80a6 	beq.w	8001506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b8b      	ldr	r3, [pc, #556]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10d      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	4b88      	ldr	r3, [pc, #544]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a87      	ldr	r2, [pc, #540]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b85      	ldr	r3, [pc, #532]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b82      	ldr	r3, [pc, #520]	; (80015f0 <HAL_RCC_OscConfig+0x4c8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d118      	bne.n	8001424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f2:	4b7f      	ldr	r3, [pc, #508]	; (80015f0 <HAL_RCC_OscConfig+0x4c8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7e      	ldr	r2, [pc, #504]	; (80015f0 <HAL_RCC_OscConfig+0x4c8>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fb99 	bl	8000b34 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff fb95 	bl	8000b34 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b64      	cmp	r3, #100	; 0x64
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e103      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b75      	ldr	r3, [pc, #468]	; (80015f0 <HAL_RCC_OscConfig+0x4c8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x312>
 800142c:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	4a6e      	ldr	r2, [pc, #440]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6213      	str	r3, [r2, #32]
 8001438:	e02d      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x334>
 8001442:	4b6a      	ldr	r3, [pc, #424]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a69      	ldr	r2, [pc, #420]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	4b67      	ldr	r3, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a66      	ldr	r2, [pc, #408]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	6213      	str	r3, [r2, #32]
 800145a:	e01c      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d10c      	bne.n	800147e <HAL_RCC_OscConfig+0x356>
 8001464:	4b61      	ldr	r3, [pc, #388]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4a60      	ldr	r2, [pc, #384]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 800146a:	f043 0304 	orr.w	r3, r3, #4
 800146e:	6213      	str	r3, [r2, #32]
 8001470:	4b5e      	ldr	r3, [pc, #376]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a5d      	ldr	r2, [pc, #372]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6213      	str	r3, [r2, #32]
 800147c:	e00b      	b.n	8001496 <HAL_RCC_OscConfig+0x36e>
 800147e:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a5a      	ldr	r2, [pc, #360]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	4b58      	ldr	r3, [pc, #352]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a57      	ldr	r2, [pc, #348]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d015      	beq.n	80014ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff fb49 	bl	8000b34 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff fb45 	bl	8000b34 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0b1      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014bc:	4b4b      	ldr	r3, [pc, #300]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ee      	beq.n	80014a6 <HAL_RCC_OscConfig+0x37e>
 80014c8:	e014      	b.n	80014f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ca:	f7ff fb33 	bl	8000b34 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	e00a      	b.n	80014e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014d2:	f7ff fb2f 	bl	8000b34 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e09b      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1ee      	bne.n	80014d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d105      	bne.n	8001506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014fa:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	4a3b      	ldr	r2, [pc, #236]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8087 	beq.w	800161e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d061      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d146      	bne.n	80015b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001524:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <HAL_RCC_OscConfig+0x4cc>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152a:	f7ff fb03 	bl	8000b34 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff faff 	bl	8000b34 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e06d      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001544:	4b29      	ldr	r3, [pc, #164]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d108      	bne.n	800156c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	4921      	ldr	r1, [pc, #132]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a19      	ldr	r1, [r3, #32]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	430b      	orrs	r3, r1
 800157e:	491b      	ldr	r1, [pc, #108]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 8001580:	4313      	orrs	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_RCC_OscConfig+0x4cc>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158a:	f7ff fad3 	bl	8000b34 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001592:	f7ff facf 	bl	8000b34 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e03d      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x46a>
 80015b0:	e035      	b.n	800161e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_RCC_OscConfig+0x4cc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fabc 	bl	8000b34 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fab8 	bl	8000b34 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e026      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x498>
 80015de:	e01e      	b.n	800161e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d107      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e019      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40007000 	.word	0x40007000
 80015f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RCC_OscConfig+0x500>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	429a      	cmp	r2, r3
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000

0800162c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0d0      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001640:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d910      	bls.n	8001670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b67      	ldr	r3, [pc, #412]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0207 	bic.w	r2, r3, #7
 8001656:	4965      	ldr	r1, [pc, #404]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800165e:	4b63      	ldr	r3, [pc, #396]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d001      	beq.n	8001670 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0b8      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001688:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a58      	ldr	r2, [pc, #352]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001692:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4a52      	ldr	r2, [pc, #328]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016ac:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	494d      	ldr	r1, [pc, #308]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d040      	beq.n	800174c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d115      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e07f      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e073      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e06b      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f023 0203 	bic.w	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4936      	ldr	r1, [pc, #216]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800171c:	f7ff fa0a 	bl	8000b34 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	e00a      	b.n	800173a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7ff fa06 	bl	8000b34 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e053      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 020c 	and.w	r2, r3, #12
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	429a      	cmp	r2, r3
 800174a:	d1eb      	bne.n	8001724 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800174c:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d210      	bcs.n	800177c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 0207 	bic.w	r2, r3, #7
 8001762:	4922      	ldr	r1, [pc, #136]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <HAL_RCC_ClockConfig+0x1c0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e032      	b.n	80017e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d008      	beq.n	800179a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4916      	ldr	r1, [pc, #88]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	490e      	ldr	r1, [pc, #56]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ba:	f000 f821 	bl	8001800 <HAL_RCC_GetSysClockFreq>
 80017be:	4602      	mov	r2, r0
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	091b      	lsrs	r3, r3, #4
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	490a      	ldr	r1, [pc, #40]	; (80017f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	5ccb      	ldrb	r3, [r1, r3]
 80017ce:	fa22 f303 	lsr.w	r3, r2, r3
 80017d2:	4a09      	ldr	r2, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1cc>)
 80017d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_RCC_ClockConfig+0x1d0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f968 	bl	8000ab0 <HAL_InitTick>

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000
 80017f0:	40021000 	.word	0x40021000
 80017f4:	08004208 	.word	0x08004208
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001800:	b490      	push	{r4, r7}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001806:	4b29      	ldr	r3, [pc, #164]	; (80018ac <HAL_RCC_GetSysClockFreq+0xac>)
 8001808:	1d3c      	adds	r4, r7, #4
 800180a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800180c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001810:	f240 2301 	movw	r3, #513	; 0x201
 8001814:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d002      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x40>
 800183a:	2b08      	cmp	r3, #8
 800183c:	d003      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x46>
 800183e:	e02b      	b.n	8001898 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001842:	623b      	str	r3, [r7, #32]
      break;
 8001844:	e02b      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	0c9b      	lsrs	r3, r3, #18
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3328      	adds	r3, #40	; 0x28
 8001850:	443b      	add	r3, r7
 8001852:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001856:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d012      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	0c5b      	lsrs	r3, r3, #17
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	3328      	adds	r3, #40	; 0x28
 800186e:	443b      	add	r3, r7
 8001870:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001874:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800187a:	fb03 f202 	mul.w	r2, r3, r2
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
 8001886:	e004      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	623b      	str	r3, [r7, #32]
      break;
 8001896:	e002      	b.n	800189e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800189a:	623b      	str	r3, [r7, #32]
      break;
 800189c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189e:	6a3b      	ldr	r3, [r7, #32]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc90      	pop	{r4, r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	080041f8 	.word	0x080041f8
 80018b0:	40021000 	.word	0x40021000
 80018b4:	007a1200 	.word	0x007a1200
 80018b8:	003d0900 	.word	0x003d0900

080018bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c0:	4b02      	ldr	r3, [pc, #8]	; (80018cc <HAL_RCC_GetHCLKFreq+0x10>)
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr
 80018cc:	20000000 	.word	0x20000000

080018d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018d4:	f7ff fff2 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	4903      	ldr	r1, [pc, #12]	; (80018f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e6:	5ccb      	ldrb	r3, [r1, r3]
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000
 80018f4:	08004218 	.word	0x08004218

080018f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018fc:	f7ff ffde 	bl	80018bc <HAL_RCC_GetHCLKFreq>
 8001900:	4602      	mov	r2, r0
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	0adb      	lsrs	r3, r3, #11
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	4903      	ldr	r1, [pc, #12]	; (800191c <HAL_RCC_GetPCLK2Freq+0x24>)
 800190e:	5ccb      	ldrb	r3, [r1, r3]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	08004218 	.word	0x08004218

08001920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <RCC_Delay+0x34>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <RCC_Delay+0x38>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0a5b      	lsrs	r3, r3, #9
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800193c:	bf00      	nop
  }
  while (Delay --);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	60fa      	str	r2, [r7, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1f9      	bne.n	800193c <RCC_Delay+0x1c>
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	20000000 	.word	0x20000000
 8001958:	10624dd3 	.word	0x10624dd3

0800195c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e041      	b.n	80019f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe feae 	bl	80006e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3304      	adds	r3, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 fe0e 	bl	80025bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e041      	b.n	8001a90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f839 	bl	8001a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3304      	adds	r3, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4610      	mov	r0, r2
 8001a3a:	f000 fdbf 	bl	80025bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2201      	movs	r2, #1
 8001a42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_TIM_PWM_Start_IT+0x24>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	bf14      	ite	ne
 8001ac8:	2301      	movne	r3, #1
 8001aca:	2300      	moveq	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e022      	b.n	8001b16 <HAL_TIM_PWM_Start_IT+0x6a>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d109      	bne.n	8001aea <HAL_TIM_PWM_Start_IT+0x3e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	bf14      	ite	ne
 8001ae2:	2301      	movne	r3, #1
 8001ae4:	2300      	moveq	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	e015      	b.n	8001b16 <HAL_TIM_PWM_Start_IT+0x6a>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b08      	cmp	r3, #8
 8001aee:	d109      	bne.n	8001b04 <HAL_TIM_PWM_Start_IT+0x58>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	e008      	b.n	8001b16 <HAL_TIM_PWM_Start_IT+0x6a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	bf14      	ite	ne
 8001b10:	2301      	movne	r3, #1
 8001b12:	2300      	moveq	r3, #0
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0a4      	b.n	8001c68 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d104      	bne.n	8001b2e <HAL_TIM_PWM_Start_IT+0x82>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b2c:	e013      	b.n	8001b56 <HAL_TIM_PWM_Start_IT+0xaa>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d104      	bne.n	8001b3e <HAL_TIM_PWM_Start_IT+0x92>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b3c:	e00b      	b.n	8001b56 <HAL_TIM_PWM_Start_IT+0xaa>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d104      	bne.n	8001b4e <HAL_TIM_PWM_Start_IT+0xa2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b4c:	e003      	b.n	8001b56 <HAL_TIM_PWM_Start_IT+0xaa>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2202      	movs	r2, #2
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b0c      	cmp	r3, #12
 8001b5a:	d841      	bhi.n	8001be0 <HAL_TIM_PWM_Start_IT+0x134>
 8001b5c:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <HAL_TIM_PWM_Start_IT+0xb8>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001b99 	.word	0x08001b99
 8001b68:	08001be1 	.word	0x08001be1
 8001b6c:	08001be1 	.word	0x08001be1
 8001b70:	08001be1 	.word	0x08001be1
 8001b74:	08001bab 	.word	0x08001bab
 8001b78:	08001be1 	.word	0x08001be1
 8001b7c:	08001be1 	.word	0x08001be1
 8001b80:	08001be1 	.word	0x08001be1
 8001b84:	08001bbd 	.word	0x08001bbd
 8001b88:	08001be1 	.word	0x08001be1
 8001b8c:	08001be1 	.word	0x08001be1
 8001b90:	08001be1 	.word	0x08001be1
 8001b94:	08001bcf 	.word	0x08001bcf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0202 	orr.w	r2, r2, #2
 8001ba6:	60da      	str	r2, [r3, #12]
      break;
 8001ba8:	e01b      	b.n	8001be2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0204 	orr.w	r2, r2, #4
 8001bb8:	60da      	str	r2, [r3, #12]
      break;
 8001bba:	e012      	b.n	8001be2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0208 	orr.w	r2, r2, #8
 8001bca:	60da      	str	r2, [r3, #12]
      break;
 8001bcc:	e009      	b.n	8001be2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0210 	orr.w	r2, r2, #16
 8001bdc:	60da      	str	r2, [r3, #12]
      break;
 8001bde:	e000      	b.n	8001be2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8001be0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	6839      	ldr	r1, [r7, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 f873 	bl	8002cd6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d107      	bne.n	8001c0a <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a18      	ldr	r2, [pc, #96]	; (8001c70 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00e      	beq.n	8001c32 <HAL_TIM_PWM_Start_IT+0x186>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1c:	d009      	beq.n	8001c32 <HAL_TIM_PWM_Start_IT+0x186>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d004      	beq.n	8001c32 <HAL_TIM_PWM_Start_IT+0x186>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d111      	bne.n	8001c56 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b06      	cmp	r3, #6
 8001c42:	d010      	beq.n	8001c66 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c54:	e007      	b.n	8001c66 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40012c00 	.word	0x40012c00
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40000800 	.word	0x40000800

08001c7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e041      	b.n	8001d12 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d106      	bne.n	8001ca8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f839 	bl	8001d1a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f000 fc7e 	bl	80025bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d104      	bne.n	8001d46 <HAL_TIM_IC_Start_IT+0x1a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	e013      	b.n	8001d6e <HAL_TIM_IC_Start_IT+0x42>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d104      	bne.n	8001d56 <HAL_TIM_IC_Start_IT+0x2a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	e00b      	b.n	8001d6e <HAL_TIM_IC_Start_IT+0x42>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d104      	bne.n	8001d66 <HAL_TIM_IC_Start_IT+0x3a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	e003      	b.n	8001d6e <HAL_TIM_IC_Start_IT+0x42>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d104      	bne.n	8001d80 <HAL_TIM_IC_Start_IT+0x54>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e013      	b.n	8001da8 <HAL_TIM_IC_Start_IT+0x7c>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d104      	bne.n	8001d90 <HAL_TIM_IC_Start_IT+0x64>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e00b      	b.n	8001da8 <HAL_TIM_IC_Start_IT+0x7c>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d104      	bne.n	8001da0 <HAL_TIM_IC_Start_IT+0x74>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e003      	b.n	8001da8 <HAL_TIM_IC_Start_IT+0x7c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d102      	bne.n	8001db6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d001      	beq.n	8001dba <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0b3      	b.n	8001f22 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d104      	bne.n	8001dca <HAL_TIM_IC_Start_IT+0x9e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc8:	e013      	b.n	8001df2 <HAL_TIM_IC_Start_IT+0xc6>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d104      	bne.n	8001dda <HAL_TIM_IC_Start_IT+0xae>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dd8:	e00b      	b.n	8001df2 <HAL_TIM_IC_Start_IT+0xc6>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d104      	bne.n	8001dea <HAL_TIM_IC_Start_IT+0xbe>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de8:	e003      	b.n	8001df2 <HAL_TIM_IC_Start_IT+0xc6>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d104      	bne.n	8001e02 <HAL_TIM_IC_Start_IT+0xd6>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e00:	e013      	b.n	8001e2a <HAL_TIM_IC_Start_IT+0xfe>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d104      	bne.n	8001e12 <HAL_TIM_IC_Start_IT+0xe6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e10:	e00b      	b.n	8001e2a <HAL_TIM_IC_Start_IT+0xfe>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d104      	bne.n	8001e22 <HAL_TIM_IC_Start_IT+0xf6>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e20:	e003      	b.n	8001e2a <HAL_TIM_IC_Start_IT+0xfe>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d841      	bhi.n	8001eb4 <HAL_TIM_IC_Start_IT+0x188>
 8001e30:	a201      	add	r2, pc, #4	; (adr r2, 8001e38 <HAL_TIM_IC_Start_IT+0x10c>)
 8001e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e36:	bf00      	nop
 8001e38:	08001e6d 	.word	0x08001e6d
 8001e3c:	08001eb5 	.word	0x08001eb5
 8001e40:	08001eb5 	.word	0x08001eb5
 8001e44:	08001eb5 	.word	0x08001eb5
 8001e48:	08001e7f 	.word	0x08001e7f
 8001e4c:	08001eb5 	.word	0x08001eb5
 8001e50:	08001eb5 	.word	0x08001eb5
 8001e54:	08001eb5 	.word	0x08001eb5
 8001e58:	08001e91 	.word	0x08001e91
 8001e5c:	08001eb5 	.word	0x08001eb5
 8001e60:	08001eb5 	.word	0x08001eb5
 8001e64:	08001eb5 	.word	0x08001eb5
 8001e68:	08001ea3 	.word	0x08001ea3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0202 	orr.w	r2, r2, #2
 8001e7a:	60da      	str	r2, [r3, #12]
      break;
 8001e7c:	e01b      	b.n	8001eb6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0204 	orr.w	r2, r2, #4
 8001e8c:	60da      	str	r2, [r3, #12]
      break;
 8001e8e:	e012      	b.n	8001eb6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f042 0208 	orr.w	r2, r2, #8
 8001e9e:	60da      	str	r2, [r3, #12]
      break;
 8001ea0:	e009      	b.n	8001eb6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0210 	orr.w	r2, r2, #16
 8001eb0:	60da      	str	r2, [r3, #12]
      break;
 8001eb2:	e000      	b.n	8001eb6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001eb4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	6839      	ldr	r1, [r7, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 ff09 	bl	8002cd6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_TIM_IC_Start_IT+0x200>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00e      	beq.n	8001eec <HAL_TIM_IC_Start_IT+0x1c0>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed6:	d009      	beq.n	8001eec <HAL_TIM_IC_Start_IT+0x1c0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_TIM_IC_Start_IT+0x204>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d004      	beq.n	8001eec <HAL_TIM_IC_Start_IT+0x1c0>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a13      	ldr	r2, [pc, #76]	; (8001f34 <HAL_TIM_IC_Start_IT+0x208>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d111      	bne.n	8001f10 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b06      	cmp	r3, #6
 8001efc:	d010      	beq.n	8001f20 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0e:	e007      	b.n	8001f20 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40000400 	.word	0x40000400
 8001f34:	40000800 	.word	0x40000800

08001f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d122      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d11b      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0202 	mvn.w	r2, #2
 8001f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7fe f8f8 	bl	8000170 <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 faff 	bl	8002586 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fb05 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d122      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d11b      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0204 	mvn.w	r2, #4
 8001fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe f8ce 	bl	8000170 <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fad5 	bl	8002586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fadb 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b08      	cmp	r3, #8
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0208 	mvn.w	r2, #8
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2204      	movs	r2, #4
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe f8a4 	bl	8000170 <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 faab 	bl	8002586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fab1 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b10      	cmp	r3, #16
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b10      	cmp	r3, #16
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0210 	mvn.w	r2, #16
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2208      	movs	r2, #8
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe f87a 	bl	8000170 <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fa81 	bl	8002586 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 fa87 	bl	8002598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10e      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0201 	mvn.w	r2, #1
 80020b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fa5c 	bl	8002574 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c6:	2b80      	cmp	r3, #128	; 0x80
 80020c8:	d10e      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d4:	2b80      	cmp	r3, #128	; 0x80
 80020d6:	d107      	bne.n	80020e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fed4 	bl	8002e90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d10e      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002100:	2b40      	cmp	r3, #64	; 0x40
 8002102:	d107      	bne.n	8002114 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fa4b 	bl	80025aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b20      	cmp	r3, #32
 8002120:	d10e      	bne.n	8002140 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b20      	cmp	r3, #32
 800212e:	d107      	bne.n	8002140 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0220 	mvn.w	r2, #32
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fe9f 	bl	8002e7e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_TIM_IC_ConfigChannel+0x1a>
 800215e:	2302      	movs	r3, #2
 8002160:	e082      	b.n	8002268 <HAL_TIM_IC_ConfigChannel+0x120>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d11b      	bne.n	80021a8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f000 fc06 	bl	8002990 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 020c 	bic.w	r2, r2, #12
 8002192:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6999      	ldr	r1, [r3, #24]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	619a      	str	r2, [r3, #24]
 80021a6:	e05a      	b.n	800225e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d11c      	bne.n	80021e8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f000 fc6f 	bl	8002aa0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80021d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6999      	ldr	r1, [r3, #24]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	021a      	lsls	r2, r3, #8
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	619a      	str	r2, [r3, #24]
 80021e6:	e03a      	b.n	800225e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d11b      	bne.n	8002226 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6819      	ldr	r1, [r3, #0]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f000 fcba 	bl	8002b76 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 020c 	bic.w	r2, r2, #12
 8002210:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69d9      	ldr	r1, [r3, #28]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	61da      	str	r2, [r3, #28]
 8002224:	e01b      	b.n	800225e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f000 fcd9 	bl	8002bec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002248:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69d9      	ldr	r1, [r3, #28]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	021a      	lsls	r2, r3, #8
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002286:	2302      	movs	r3, #2
 8002288:	e0ac      	b.n	80023e4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b0c      	cmp	r3, #12
 8002296:	f200 809f 	bhi.w	80023d8 <HAL_TIM_PWM_ConfigChannel+0x168>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	080022d5 	.word	0x080022d5
 80022a4:	080023d9 	.word	0x080023d9
 80022a8:	080023d9 	.word	0x080023d9
 80022ac:	080023d9 	.word	0x080023d9
 80022b0:	08002315 	.word	0x08002315
 80022b4:	080023d9 	.word	0x080023d9
 80022b8:	080023d9 	.word	0x080023d9
 80022bc:	080023d9 	.word	0x080023d9
 80022c0:	08002357 	.word	0x08002357
 80022c4:	080023d9 	.word	0x080023d9
 80022c8:	080023d9 	.word	0x080023d9
 80022cc:	080023d9 	.word	0x080023d9
 80022d0:	08002397 	.word	0x08002397
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f9d0 	bl	8002680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0208 	orr.w	r2, r2, #8
 80022ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0204 	bic.w	r2, r2, #4
 80022fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6999      	ldr	r1, [r3, #24]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	619a      	str	r2, [r3, #24]
      break;
 8002312:	e062      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fa16 	bl	800274c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800233e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6999      	ldr	r1, [r3, #24]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	021a      	lsls	r2, r3, #8
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	619a      	str	r2, [r3, #24]
      break;
 8002354:	e041      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fa5f 	bl	8002820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0208 	orr.w	r2, r2, #8
 8002370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69da      	ldr	r2, [r3, #28]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0204 	bic.w	r2, r2, #4
 8002380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69d9      	ldr	r1, [r3, #28]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	61da      	str	r2, [r3, #28]
      break;
 8002394:	e021      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68b9      	ldr	r1, [r7, #8]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 faa9 	bl	80028f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69da      	ldr	r2, [r3, #28]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69d9      	ldr	r1, [r3, #28]
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	021a      	lsls	r2, r3, #8
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	61da      	str	r2, [r3, #28]
      break;
 80023d6:	e000      	b.n	80023da <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80023d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_TIM_ConfigClockSource+0x18>
 8002400:	2302      	movs	r3, #2
 8002402:	e0b3      	b.n	800256c <HAL_TIM_ConfigClockSource+0x180>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800242a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800243c:	d03e      	beq.n	80024bc <HAL_TIM_ConfigClockSource+0xd0>
 800243e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002442:	f200 8087 	bhi.w	8002554 <HAL_TIM_ConfigClockSource+0x168>
 8002446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244a:	f000 8085 	beq.w	8002558 <HAL_TIM_ConfigClockSource+0x16c>
 800244e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002452:	d87f      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 8002454:	2b70      	cmp	r3, #112	; 0x70
 8002456:	d01a      	beq.n	800248e <HAL_TIM_ConfigClockSource+0xa2>
 8002458:	2b70      	cmp	r3, #112	; 0x70
 800245a:	d87b      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 800245c:	2b60      	cmp	r3, #96	; 0x60
 800245e:	d050      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x116>
 8002460:	2b60      	cmp	r3, #96	; 0x60
 8002462:	d877      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 8002464:	2b50      	cmp	r3, #80	; 0x50
 8002466:	d03c      	beq.n	80024e2 <HAL_TIM_ConfigClockSource+0xf6>
 8002468:	2b50      	cmp	r3, #80	; 0x50
 800246a:	d873      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 800246c:	2b40      	cmp	r3, #64	; 0x40
 800246e:	d058      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x136>
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d86f      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 8002474:	2b30      	cmp	r3, #48	; 0x30
 8002476:	d064      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x156>
 8002478:	2b30      	cmp	r3, #48	; 0x30
 800247a:	d86b      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 800247c:	2b20      	cmp	r3, #32
 800247e:	d060      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x156>
 8002480:	2b20      	cmp	r3, #32
 8002482:	d867      	bhi.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05c      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x156>
 8002488:	2b10      	cmp	r3, #16
 800248a:	d05a      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800248c:	e062      	b.n	8002554 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f000 fbfb 	bl	8002c98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	609a      	str	r2, [r3, #8]
      break;
 80024ba:	e04e      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f000 fbe4 	bl	8002c98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024de:	609a      	str	r2, [r3, #8]
      break;
 80024e0:	e03b      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f000 faa8 	bl	8002a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2150      	movs	r1, #80	; 0x50
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fbb2 	bl	8002c64 <TIM_ITRx_SetConfig>
      break;
 8002500:	e02b      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f000 fb02 	bl	8002b18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2160      	movs	r1, #96	; 0x60
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fba2 	bl	8002c64 <TIM_ITRx_SetConfig>
      break;
 8002520:	e01b      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	461a      	mov	r2, r3
 8002530:	f000 fa88 	bl	8002a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fb92 	bl	8002c64 <TIM_ITRx_SetConfig>
      break;
 8002540:	e00b      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f000 fb89 	bl	8002c64 <TIM_ITRx_SetConfig>
        break;
 8002552:	e002      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002554:	bf00      	nop
 8002556:	e000      	b.n	800255a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002558:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr

080025aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a29      	ldr	r2, [pc, #164]	; (8002674 <TIM_Base_SetConfig+0xb8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00b      	beq.n	80025ec <TIM_Base_SetConfig+0x30>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025da:	d007      	beq.n	80025ec <TIM_Base_SetConfig+0x30>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a26      	ldr	r2, [pc, #152]	; (8002678 <TIM_Base_SetConfig+0xbc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d003      	beq.n	80025ec <TIM_Base_SetConfig+0x30>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a25      	ldr	r2, [pc, #148]	; (800267c <TIM_Base_SetConfig+0xc0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d108      	bne.n	80025fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a1c      	ldr	r2, [pc, #112]	; (8002674 <TIM_Base_SetConfig+0xb8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00b      	beq.n	800261e <TIM_Base_SetConfig+0x62>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260c:	d007      	beq.n	800261e <TIM_Base_SetConfig+0x62>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a19      	ldr	r2, [pc, #100]	; (8002678 <TIM_Base_SetConfig+0xbc>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d003      	beq.n	800261e <TIM_Base_SetConfig+0x62>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a18      	ldr	r2, [pc, #96]	; (800267c <TIM_Base_SetConfig+0xc0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d108      	bne.n	8002630 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a07      	ldr	r2, [pc, #28]	; (8002674 <TIM_Base_SetConfig+0xb8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d103      	bne.n	8002664 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	615a      	str	r2, [r3, #20]
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40000400 	.word	0x40000400
 800267c:	40000800 	.word	0x40000800

08002680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	f023 0201 	bic.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0303 	bic.w	r3, r3, #3
 80026b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f023 0302 	bic.w	r3, r3, #2
 80026c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <TIM_OC1_SetConfig+0xc8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d10c      	bne.n	80026f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f023 0308 	bic.w	r3, r3, #8
 80026e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f023 0304 	bic.w	r3, r3, #4
 80026f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a13      	ldr	r2, [pc, #76]	; (8002748 <TIM_OC1_SetConfig+0xc8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d111      	bne.n	8002722 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800270c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	621a      	str	r2, [r3, #32]
}
 800273c:	bf00      	nop
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40012c00 	.word	0x40012c00

0800274c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f023 0210 	bic.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800277a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f023 0320 	bic.w	r3, r3, #32
 8002796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <TIM_OC2_SetConfig+0xd0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d10d      	bne.n	80027c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a14      	ldr	r2, [pc, #80]	; (800281c <TIM_OC2_SetConfig+0xd0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d113      	bne.n	80027f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	621a      	str	r2, [r3, #32]
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40012c00 	.word	0x40012c00

08002820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002820:	b480      	push	{r7}
 8002822:	b087      	sub	sp, #28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <TIM_OC3_SetConfig+0xd0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10d      	bne.n	800289a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <TIM_OC3_SetConfig+0xd0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d113      	bne.n	80028ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	621a      	str	r2, [r3, #32]
}
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40012c00 	.word	0x40012c00

080028f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800293e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	031b      	lsls	r3, r3, #12
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a0f      	ldr	r2, [pc, #60]	; (800298c <TIM_OC4_SetConfig+0x98>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d109      	bne.n	8002968 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800295a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	019b      	lsls	r3, r3, #6
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	621a      	str	r2, [r3, #32]
}
 8002982:	bf00      	nop
 8002984:	371c      	adds	r7, #28
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40012c00 	.word	0x40012c00

08002990 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f023 0201 	bic.w	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <TIM_TI1_SetConfig+0xa8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d00b      	beq.n	80029d6 <TIM_TI1_SetConfig+0x46>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d007      	beq.n	80029d6 <TIM_TI1_SetConfig+0x46>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a1c      	ldr	r2, [pc, #112]	; (8002a3c <TIM_TI1_SetConfig+0xac>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d003      	beq.n	80029d6 <TIM_TI1_SetConfig+0x46>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <TIM_TI1_SetConfig+0xb0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <TIM_TI1_SetConfig+0x4a>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <TIM_TI1_SetConfig+0x4c>
 80029da:	2300      	movs	r3, #0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f023 0303 	bic.w	r3, r3, #3
 80029e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	e003      	b.n	80029fa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f023 030a 	bic.w	r3, r3, #10
 8002a14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f003 030a 	and.w	r3, r3, #10
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	40012c00 	.word	0x40012c00
 8002a3c:	40000400 	.word	0x40000400
 8002a40:	40000800 	.word	0x40000800

08002a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	f023 0201 	bic.w	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f023 030a 	bic.w	r3, r3, #10
 8002a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
 8002aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f023 0210 	bic.w	r2, r3, #16
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	021b      	lsls	r3, r3, #8
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ade:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	031b      	lsls	r3, r3, #12
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002af2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	621a      	str	r2, [r3, #32]
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f023 0210 	bic.w	r2, r3, #16
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	031b      	lsls	r3, r3, #12
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	621a      	str	r2, [r3, #32]
}
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b087      	sub	sp, #28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bc6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	621a      	str	r2, [r3, #32]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	031b      	lsls	r3, r3, #12
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	031b      	lsls	r3, r3, #12
 8002c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	621a      	str	r2, [r3, #32]
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f043 0307 	orr.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	609a      	str	r2, [r3, #8]
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	021a      	lsls	r2, r3, #8
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	609a      	str	r2, [r3, #8]
}
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b087      	sub	sp, #28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	2201      	movs	r2, #1
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a1a      	ldr	r2, [r3, #32]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	401a      	ands	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	621a      	str	r2, [r3, #32]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e046      	b.n	8002dc6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a16      	ldr	r2, [pc, #88]	; (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d009      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10c      	bne.n	8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800

08002ddc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e03d      	b.n	8002e74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e03f      	b.n	8002f34 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d106      	bne.n	8002ece <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7fd fc97 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2224      	movs	r2, #36	; 0x24
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f904 	bl	80030f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002efa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f0a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	603b      	str	r3, [r7, #0]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d17c      	bne.n	8003056 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_UART_Transmit+0x2c>
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e075      	b.n	8003058 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_UART_Transmit+0x3e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e06e      	b.n	8003058 <HAL_UART_Transmit+0x11c>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2221      	movs	r2, #33	; 0x21
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f90:	f7fd fdd0 	bl	8000b34 <HAL_GetTick>
 8002f94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	88fa      	ldrh	r2, [r7, #6]
 8002fa0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002faa:	d108      	bne.n	8002fbe <HAL_UART_Transmit+0x82>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d104      	bne.n	8002fbe <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e003      	b.n	8002fc6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fce:	e02a      	b.n	8003026 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2180      	movs	r1, #128	; 0x80
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f840 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e036      	b.n	8003058 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10b      	bne.n	8003008 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ffe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	3302      	adds	r3, #2
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e007      	b.n	8003018 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1cf      	bne.n	8002fd0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2200      	movs	r2, #0
 8003038:	2140      	movs	r1, #64	; 0x40
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f810 	bl	8003060 <UART_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e006      	b.n	8003058 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003056:	2302      	movs	r3, #2
  }
}
 8003058:	4618      	mov	r0, r3
 800305a:	3720      	adds	r7, #32
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003070:	e02c      	b.n	80030cc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d028      	beq.n	80030cc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <UART_WaitOnFlagUntilTimeout+0x30>
 8003080:	f7fd fd58 	bl	8000b34 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	429a      	cmp	r2, r3
 800308e:	d21d      	bcs.n	80030cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800309e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e00f      	b.n	80030ec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	429a      	cmp	r2, r3
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d0c3      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800312e:	f023 030c 	bic.w	r3, r3, #12
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	68b9      	ldr	r1, [r7, #8]
 8003138:	430b      	orrs	r3, r1
 800313a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <UART_SetConfig+0x114>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d103      	bne.n	8003164 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800315c:	f7fe fbcc 	bl	80018f8 <HAL_RCC_GetPCLK2Freq>
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	e002      	b.n	800316a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003164:	f7fe fbb4 	bl	80018d0 <HAL_RCC_GetPCLK1Freq>
 8003168:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009a      	lsls	r2, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003180:	4a22      	ldr	r2, [pc, #136]	; (800320c <UART_SetConfig+0x118>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	0119      	lsls	r1, r3, #4
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4613      	mov	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	4413      	add	r3, r2
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	441a      	add	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	fbb2 f2f3 	udiv	r2, r2, r3
 80031a0:	4b1a      	ldr	r3, [pc, #104]	; (800320c <UART_SetConfig+0x118>)
 80031a2:	fba3 0302 	umull	r0, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2064      	movs	r0, #100	; 0x64
 80031aa:	fb00 f303 	mul.w	r3, r0, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	3332      	adds	r3, #50	; 0x32
 80031b4:	4a15      	ldr	r2, [pc, #84]	; (800320c <UART_SetConfig+0x118>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031c0:	4419      	add	r1, r3
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	009a      	lsls	r2, r3, #2
 80031cc:	441a      	add	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <UART_SetConfig+0x118>)
 80031da:	fba3 0302 	umull	r0, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2064      	movs	r0, #100	; 0x64
 80031e2:	fb00 f303 	mul.w	r3, r0, r3
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	3332      	adds	r3, #50	; 0x32
 80031ec:	4a07      	ldr	r2, [pc, #28]	; (800320c <UART_SetConfig+0x118>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	f003 020f 	and.w	r2, r3, #15
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	440a      	add	r2, r1
 80031fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40013800 	.word	0x40013800
 800320c:	51eb851f 	.word	0x51eb851f

08003210 <__errno>:
 8003210:	4b01      	ldr	r3, [pc, #4]	; (8003218 <__errno+0x8>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	2000000c 	.word	0x2000000c

0800321c <__libc_init_array>:
 800321c:	b570      	push	{r4, r5, r6, lr}
 800321e:	2600      	movs	r6, #0
 8003220:	4d0c      	ldr	r5, [pc, #48]	; (8003254 <__libc_init_array+0x38>)
 8003222:	4c0d      	ldr	r4, [pc, #52]	; (8003258 <__libc_init_array+0x3c>)
 8003224:	1b64      	subs	r4, r4, r5
 8003226:	10a4      	asrs	r4, r4, #2
 8003228:	42a6      	cmp	r6, r4
 800322a:	d109      	bne.n	8003240 <__libc_init_array+0x24>
 800322c:	f000 ffb6 	bl	800419c <_init>
 8003230:	2600      	movs	r6, #0
 8003232:	4d0a      	ldr	r5, [pc, #40]	; (800325c <__libc_init_array+0x40>)
 8003234:	4c0a      	ldr	r4, [pc, #40]	; (8003260 <__libc_init_array+0x44>)
 8003236:	1b64      	subs	r4, r4, r5
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	42a6      	cmp	r6, r4
 800323c:	d105      	bne.n	800324a <__libc_init_array+0x2e>
 800323e:	bd70      	pop	{r4, r5, r6, pc}
 8003240:	f855 3b04 	ldr.w	r3, [r5], #4
 8003244:	4798      	blx	r3
 8003246:	3601      	adds	r6, #1
 8003248:	e7ee      	b.n	8003228 <__libc_init_array+0xc>
 800324a:	f855 3b04 	ldr.w	r3, [r5], #4
 800324e:	4798      	blx	r3
 8003250:	3601      	adds	r6, #1
 8003252:	e7f2      	b.n	800323a <__libc_init_array+0x1e>
 8003254:	080042b8 	.word	0x080042b8
 8003258:	080042b8 	.word	0x080042b8
 800325c:	080042b8 	.word	0x080042b8
 8003260:	080042bc 	.word	0x080042bc

08003264 <memset>:
 8003264:	4603      	mov	r3, r0
 8003266:	4402      	add	r2, r0
 8003268:	4293      	cmp	r3, r2
 800326a:	d100      	bne.n	800326e <memset+0xa>
 800326c:	4770      	bx	lr
 800326e:	f803 1b01 	strb.w	r1, [r3], #1
 8003272:	e7f9      	b.n	8003268 <memset+0x4>

08003274 <iprintf>:
 8003274:	b40f      	push	{r0, r1, r2, r3}
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <iprintf+0x2c>)
 8003278:	b513      	push	{r0, r1, r4, lr}
 800327a:	681c      	ldr	r4, [r3, #0]
 800327c:	b124      	cbz	r4, 8003288 <iprintf+0x14>
 800327e:	69a3      	ldr	r3, [r4, #24]
 8003280:	b913      	cbnz	r3, 8003288 <iprintf+0x14>
 8003282:	4620      	mov	r0, r4
 8003284:	f000 f866 	bl	8003354 <__sinit>
 8003288:	ab05      	add	r3, sp, #20
 800328a:	4620      	mov	r0, r4
 800328c:	9a04      	ldr	r2, [sp, #16]
 800328e:	68a1      	ldr	r1, [r4, #8]
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	f000 f9bb 	bl	800360c <_vfiprintf_r>
 8003296:	b002      	add	sp, #8
 8003298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800329c:	b004      	add	sp, #16
 800329e:	4770      	bx	lr
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <std>:
 80032a4:	2300      	movs	r3, #0
 80032a6:	b510      	push	{r4, lr}
 80032a8:	4604      	mov	r4, r0
 80032aa:	e9c0 3300 	strd	r3, r3, [r0]
 80032ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032b2:	6083      	str	r3, [r0, #8]
 80032b4:	8181      	strh	r1, [r0, #12]
 80032b6:	6643      	str	r3, [r0, #100]	; 0x64
 80032b8:	81c2      	strh	r2, [r0, #14]
 80032ba:	6183      	str	r3, [r0, #24]
 80032bc:	4619      	mov	r1, r3
 80032be:	2208      	movs	r2, #8
 80032c0:	305c      	adds	r0, #92	; 0x5c
 80032c2:	f7ff ffcf 	bl	8003264 <memset>
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <std+0x38>)
 80032c8:	6224      	str	r4, [r4, #32]
 80032ca:	6263      	str	r3, [r4, #36]	; 0x24
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <std+0x3c>)
 80032ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <std+0x40>)
 80032d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <std+0x44>)
 80032d6:	6323      	str	r3, [r4, #48]	; 0x30
 80032d8:	bd10      	pop	{r4, pc}
 80032da:	bf00      	nop
 80032dc:	08003bb9 	.word	0x08003bb9
 80032e0:	08003bdb 	.word	0x08003bdb
 80032e4:	08003c13 	.word	0x08003c13
 80032e8:	08003c37 	.word	0x08003c37

080032ec <_cleanup_r>:
 80032ec:	4901      	ldr	r1, [pc, #4]	; (80032f4 <_cleanup_r+0x8>)
 80032ee:	f000 b8af 	b.w	8003450 <_fwalk_reent>
 80032f2:	bf00      	nop
 80032f4:	08003f09 	.word	0x08003f09

080032f8 <__sfmoreglue>:
 80032f8:	2268      	movs	r2, #104	; 0x68
 80032fa:	b570      	push	{r4, r5, r6, lr}
 80032fc:	1e4d      	subs	r5, r1, #1
 80032fe:	4355      	muls	r5, r2
 8003300:	460e      	mov	r6, r1
 8003302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003306:	f000 f8e5 	bl	80034d4 <_malloc_r>
 800330a:	4604      	mov	r4, r0
 800330c:	b140      	cbz	r0, 8003320 <__sfmoreglue+0x28>
 800330e:	2100      	movs	r1, #0
 8003310:	e9c0 1600 	strd	r1, r6, [r0]
 8003314:	300c      	adds	r0, #12
 8003316:	60a0      	str	r0, [r4, #8]
 8003318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800331c:	f7ff ffa2 	bl	8003264 <memset>
 8003320:	4620      	mov	r0, r4
 8003322:	bd70      	pop	{r4, r5, r6, pc}

08003324 <__sfp_lock_acquire>:
 8003324:	4801      	ldr	r0, [pc, #4]	; (800332c <__sfp_lock_acquire+0x8>)
 8003326:	f000 b8b3 	b.w	8003490 <__retarget_lock_acquire_recursive>
 800332a:	bf00      	nop
 800332c:	20000179 	.word	0x20000179

08003330 <__sfp_lock_release>:
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <__sfp_lock_release+0x8>)
 8003332:	f000 b8ae 	b.w	8003492 <__retarget_lock_release_recursive>
 8003336:	bf00      	nop
 8003338:	20000179 	.word	0x20000179

0800333c <__sinit_lock_acquire>:
 800333c:	4801      	ldr	r0, [pc, #4]	; (8003344 <__sinit_lock_acquire+0x8>)
 800333e:	f000 b8a7 	b.w	8003490 <__retarget_lock_acquire_recursive>
 8003342:	bf00      	nop
 8003344:	2000017a 	.word	0x2000017a

08003348 <__sinit_lock_release>:
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <__sinit_lock_release+0x8>)
 800334a:	f000 b8a2 	b.w	8003492 <__retarget_lock_release_recursive>
 800334e:	bf00      	nop
 8003350:	2000017a 	.word	0x2000017a

08003354 <__sinit>:
 8003354:	b510      	push	{r4, lr}
 8003356:	4604      	mov	r4, r0
 8003358:	f7ff fff0 	bl	800333c <__sinit_lock_acquire>
 800335c:	69a3      	ldr	r3, [r4, #24]
 800335e:	b11b      	cbz	r3, 8003368 <__sinit+0x14>
 8003360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003364:	f7ff bff0 	b.w	8003348 <__sinit_lock_release>
 8003368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800336c:	6523      	str	r3, [r4, #80]	; 0x50
 800336e:	4b13      	ldr	r3, [pc, #76]	; (80033bc <__sinit+0x68>)
 8003370:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <__sinit+0x6c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	62a2      	str	r2, [r4, #40]	; 0x28
 8003376:	42a3      	cmp	r3, r4
 8003378:	bf08      	it	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	4620      	mov	r0, r4
 800337e:	bf08      	it	eq
 8003380:	61a3      	streq	r3, [r4, #24]
 8003382:	f000 f81f 	bl	80033c4 <__sfp>
 8003386:	6060      	str	r0, [r4, #4]
 8003388:	4620      	mov	r0, r4
 800338a:	f000 f81b 	bl	80033c4 <__sfp>
 800338e:	60a0      	str	r0, [r4, #8]
 8003390:	4620      	mov	r0, r4
 8003392:	f000 f817 	bl	80033c4 <__sfp>
 8003396:	2200      	movs	r2, #0
 8003398:	2104      	movs	r1, #4
 800339a:	60e0      	str	r0, [r4, #12]
 800339c:	6860      	ldr	r0, [r4, #4]
 800339e:	f7ff ff81 	bl	80032a4 <std>
 80033a2:	2201      	movs	r2, #1
 80033a4:	2109      	movs	r1, #9
 80033a6:	68a0      	ldr	r0, [r4, #8]
 80033a8:	f7ff ff7c 	bl	80032a4 <std>
 80033ac:	2202      	movs	r2, #2
 80033ae:	2112      	movs	r1, #18
 80033b0:	68e0      	ldr	r0, [r4, #12]
 80033b2:	f7ff ff77 	bl	80032a4 <std>
 80033b6:	2301      	movs	r3, #1
 80033b8:	61a3      	str	r3, [r4, #24]
 80033ba:	e7d1      	b.n	8003360 <__sinit+0xc>
 80033bc:	08004220 	.word	0x08004220
 80033c0:	080032ed 	.word	0x080032ed

080033c4 <__sfp>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	4607      	mov	r7, r0
 80033c8:	f7ff ffac 	bl	8003324 <__sfp_lock_acquire>
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <__sfp+0x84>)
 80033ce:	681e      	ldr	r6, [r3, #0]
 80033d0:	69b3      	ldr	r3, [r6, #24]
 80033d2:	b913      	cbnz	r3, 80033da <__sfp+0x16>
 80033d4:	4630      	mov	r0, r6
 80033d6:	f7ff ffbd 	bl	8003354 <__sinit>
 80033da:	3648      	adds	r6, #72	; 0x48
 80033dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	d503      	bpl.n	80033ec <__sfp+0x28>
 80033e4:	6833      	ldr	r3, [r6, #0]
 80033e6:	b30b      	cbz	r3, 800342c <__sfp+0x68>
 80033e8:	6836      	ldr	r6, [r6, #0]
 80033ea:	e7f7      	b.n	80033dc <__sfp+0x18>
 80033ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033f0:	b9d5      	cbnz	r5, 8003428 <__sfp+0x64>
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <__sfp+0x88>)
 80033f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033f8:	60e3      	str	r3, [r4, #12]
 80033fa:	6665      	str	r5, [r4, #100]	; 0x64
 80033fc:	f000 f847 	bl	800348e <__retarget_lock_init_recursive>
 8003400:	f7ff ff96 	bl	8003330 <__sfp_lock_release>
 8003404:	2208      	movs	r2, #8
 8003406:	4629      	mov	r1, r5
 8003408:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800340c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003410:	6025      	str	r5, [r4, #0]
 8003412:	61a5      	str	r5, [r4, #24]
 8003414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003418:	f7ff ff24 	bl	8003264 <memset>
 800341c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003424:	4620      	mov	r0, r4
 8003426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003428:	3468      	adds	r4, #104	; 0x68
 800342a:	e7d9      	b.n	80033e0 <__sfp+0x1c>
 800342c:	2104      	movs	r1, #4
 800342e:	4638      	mov	r0, r7
 8003430:	f7ff ff62 	bl	80032f8 <__sfmoreglue>
 8003434:	4604      	mov	r4, r0
 8003436:	6030      	str	r0, [r6, #0]
 8003438:	2800      	cmp	r0, #0
 800343a:	d1d5      	bne.n	80033e8 <__sfp+0x24>
 800343c:	f7ff ff78 	bl	8003330 <__sfp_lock_release>
 8003440:	230c      	movs	r3, #12
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	e7ee      	b.n	8003424 <__sfp+0x60>
 8003446:	bf00      	nop
 8003448:	08004220 	.word	0x08004220
 800344c:	ffff0001 	.word	0xffff0001

08003450 <_fwalk_reent>:
 8003450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003454:	4606      	mov	r6, r0
 8003456:	4688      	mov	r8, r1
 8003458:	2700      	movs	r7, #0
 800345a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800345e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003462:	f1b9 0901 	subs.w	r9, r9, #1
 8003466:	d505      	bpl.n	8003474 <_fwalk_reent+0x24>
 8003468:	6824      	ldr	r4, [r4, #0]
 800346a:	2c00      	cmp	r4, #0
 800346c:	d1f7      	bne.n	800345e <_fwalk_reent+0xe>
 800346e:	4638      	mov	r0, r7
 8003470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003474:	89ab      	ldrh	r3, [r5, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d907      	bls.n	800348a <_fwalk_reent+0x3a>
 800347a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800347e:	3301      	adds	r3, #1
 8003480:	d003      	beq.n	800348a <_fwalk_reent+0x3a>
 8003482:	4629      	mov	r1, r5
 8003484:	4630      	mov	r0, r6
 8003486:	47c0      	blx	r8
 8003488:	4307      	orrs	r7, r0
 800348a:	3568      	adds	r5, #104	; 0x68
 800348c:	e7e9      	b.n	8003462 <_fwalk_reent+0x12>

0800348e <__retarget_lock_init_recursive>:
 800348e:	4770      	bx	lr

08003490 <__retarget_lock_acquire_recursive>:
 8003490:	4770      	bx	lr

08003492 <__retarget_lock_release_recursive>:
 8003492:	4770      	bx	lr

08003494 <sbrk_aligned>:
 8003494:	b570      	push	{r4, r5, r6, lr}
 8003496:	4e0e      	ldr	r6, [pc, #56]	; (80034d0 <sbrk_aligned+0x3c>)
 8003498:	460c      	mov	r4, r1
 800349a:	6831      	ldr	r1, [r6, #0]
 800349c:	4605      	mov	r5, r0
 800349e:	b911      	cbnz	r1, 80034a6 <sbrk_aligned+0x12>
 80034a0:	f000 fb7a 	bl	8003b98 <_sbrk_r>
 80034a4:	6030      	str	r0, [r6, #0]
 80034a6:	4621      	mov	r1, r4
 80034a8:	4628      	mov	r0, r5
 80034aa:	f000 fb75 	bl	8003b98 <_sbrk_r>
 80034ae:	1c43      	adds	r3, r0, #1
 80034b0:	d00a      	beq.n	80034c8 <sbrk_aligned+0x34>
 80034b2:	1cc4      	adds	r4, r0, #3
 80034b4:	f024 0403 	bic.w	r4, r4, #3
 80034b8:	42a0      	cmp	r0, r4
 80034ba:	d007      	beq.n	80034cc <sbrk_aligned+0x38>
 80034bc:	1a21      	subs	r1, r4, r0
 80034be:	4628      	mov	r0, r5
 80034c0:	f000 fb6a 	bl	8003b98 <_sbrk_r>
 80034c4:	3001      	adds	r0, #1
 80034c6:	d101      	bne.n	80034cc <sbrk_aligned+0x38>
 80034c8:	f04f 34ff 	mov.w	r4, #4294967295
 80034cc:	4620      	mov	r0, r4
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	20000180 	.word	0x20000180

080034d4 <_malloc_r>:
 80034d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034d8:	1ccd      	adds	r5, r1, #3
 80034da:	f025 0503 	bic.w	r5, r5, #3
 80034de:	3508      	adds	r5, #8
 80034e0:	2d0c      	cmp	r5, #12
 80034e2:	bf38      	it	cc
 80034e4:	250c      	movcc	r5, #12
 80034e6:	2d00      	cmp	r5, #0
 80034e8:	4607      	mov	r7, r0
 80034ea:	db01      	blt.n	80034f0 <_malloc_r+0x1c>
 80034ec:	42a9      	cmp	r1, r5
 80034ee:	d905      	bls.n	80034fc <_malloc_r+0x28>
 80034f0:	230c      	movs	r3, #12
 80034f2:	2600      	movs	r6, #0
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	4630      	mov	r0, r6
 80034f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034fc:	4e2e      	ldr	r6, [pc, #184]	; (80035b8 <_malloc_r+0xe4>)
 80034fe:	f000 fdc5 	bl	800408c <__malloc_lock>
 8003502:	6833      	ldr	r3, [r6, #0]
 8003504:	461c      	mov	r4, r3
 8003506:	bb34      	cbnz	r4, 8003556 <_malloc_r+0x82>
 8003508:	4629      	mov	r1, r5
 800350a:	4638      	mov	r0, r7
 800350c:	f7ff ffc2 	bl	8003494 <sbrk_aligned>
 8003510:	1c43      	adds	r3, r0, #1
 8003512:	4604      	mov	r4, r0
 8003514:	d14d      	bne.n	80035b2 <_malloc_r+0xde>
 8003516:	6834      	ldr	r4, [r6, #0]
 8003518:	4626      	mov	r6, r4
 800351a:	2e00      	cmp	r6, #0
 800351c:	d140      	bne.n	80035a0 <_malloc_r+0xcc>
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	4631      	mov	r1, r6
 8003522:	4638      	mov	r0, r7
 8003524:	eb04 0803 	add.w	r8, r4, r3
 8003528:	f000 fb36 	bl	8003b98 <_sbrk_r>
 800352c:	4580      	cmp	r8, r0
 800352e:	d13a      	bne.n	80035a6 <_malloc_r+0xd2>
 8003530:	6821      	ldr	r1, [r4, #0]
 8003532:	3503      	adds	r5, #3
 8003534:	1a6d      	subs	r5, r5, r1
 8003536:	f025 0503 	bic.w	r5, r5, #3
 800353a:	3508      	adds	r5, #8
 800353c:	2d0c      	cmp	r5, #12
 800353e:	bf38      	it	cc
 8003540:	250c      	movcc	r5, #12
 8003542:	4638      	mov	r0, r7
 8003544:	4629      	mov	r1, r5
 8003546:	f7ff ffa5 	bl	8003494 <sbrk_aligned>
 800354a:	3001      	adds	r0, #1
 800354c:	d02b      	beq.n	80035a6 <_malloc_r+0xd2>
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	442b      	add	r3, r5
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	e00e      	b.n	8003574 <_malloc_r+0xa0>
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	1b52      	subs	r2, r2, r5
 800355a:	d41e      	bmi.n	800359a <_malloc_r+0xc6>
 800355c:	2a0b      	cmp	r2, #11
 800355e:	d916      	bls.n	800358e <_malloc_r+0xba>
 8003560:	1961      	adds	r1, r4, r5
 8003562:	42a3      	cmp	r3, r4
 8003564:	6025      	str	r5, [r4, #0]
 8003566:	bf18      	it	ne
 8003568:	6059      	strne	r1, [r3, #4]
 800356a:	6863      	ldr	r3, [r4, #4]
 800356c:	bf08      	it	eq
 800356e:	6031      	streq	r1, [r6, #0]
 8003570:	5162      	str	r2, [r4, r5]
 8003572:	604b      	str	r3, [r1, #4]
 8003574:	4638      	mov	r0, r7
 8003576:	f104 060b 	add.w	r6, r4, #11
 800357a:	f000 fd8d 	bl	8004098 <__malloc_unlock>
 800357e:	f026 0607 	bic.w	r6, r6, #7
 8003582:	1d23      	adds	r3, r4, #4
 8003584:	1af2      	subs	r2, r6, r3
 8003586:	d0b6      	beq.n	80034f6 <_malloc_r+0x22>
 8003588:	1b9b      	subs	r3, r3, r6
 800358a:	50a3      	str	r3, [r4, r2]
 800358c:	e7b3      	b.n	80034f6 <_malloc_r+0x22>
 800358e:	6862      	ldr	r2, [r4, #4]
 8003590:	42a3      	cmp	r3, r4
 8003592:	bf0c      	ite	eq
 8003594:	6032      	streq	r2, [r6, #0]
 8003596:	605a      	strne	r2, [r3, #4]
 8003598:	e7ec      	b.n	8003574 <_malloc_r+0xa0>
 800359a:	4623      	mov	r3, r4
 800359c:	6864      	ldr	r4, [r4, #4]
 800359e:	e7b2      	b.n	8003506 <_malloc_r+0x32>
 80035a0:	4634      	mov	r4, r6
 80035a2:	6876      	ldr	r6, [r6, #4]
 80035a4:	e7b9      	b.n	800351a <_malloc_r+0x46>
 80035a6:	230c      	movs	r3, #12
 80035a8:	4638      	mov	r0, r7
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	f000 fd74 	bl	8004098 <__malloc_unlock>
 80035b0:	e7a1      	b.n	80034f6 <_malloc_r+0x22>
 80035b2:	6025      	str	r5, [r4, #0]
 80035b4:	e7de      	b.n	8003574 <_malloc_r+0xa0>
 80035b6:	bf00      	nop
 80035b8:	2000017c 	.word	0x2000017c

080035bc <__sfputc_r>:
 80035bc:	6893      	ldr	r3, [r2, #8]
 80035be:	b410      	push	{r4}
 80035c0:	3b01      	subs	r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	6093      	str	r3, [r2, #8]
 80035c6:	da07      	bge.n	80035d8 <__sfputc_r+0x1c>
 80035c8:	6994      	ldr	r4, [r2, #24]
 80035ca:	42a3      	cmp	r3, r4
 80035cc:	db01      	blt.n	80035d2 <__sfputc_r+0x16>
 80035ce:	290a      	cmp	r1, #10
 80035d0:	d102      	bne.n	80035d8 <__sfputc_r+0x1c>
 80035d2:	bc10      	pop	{r4}
 80035d4:	f000 bb34 	b.w	8003c40 <__swbuf_r>
 80035d8:	6813      	ldr	r3, [r2, #0]
 80035da:	1c58      	adds	r0, r3, #1
 80035dc:	6010      	str	r0, [r2, #0]
 80035de:	7019      	strb	r1, [r3, #0]
 80035e0:	4608      	mov	r0, r1
 80035e2:	bc10      	pop	{r4}
 80035e4:	4770      	bx	lr

080035e6 <__sfputs_r>:
 80035e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e8:	4606      	mov	r6, r0
 80035ea:	460f      	mov	r7, r1
 80035ec:	4614      	mov	r4, r2
 80035ee:	18d5      	adds	r5, r2, r3
 80035f0:	42ac      	cmp	r4, r5
 80035f2:	d101      	bne.n	80035f8 <__sfputs_r+0x12>
 80035f4:	2000      	movs	r0, #0
 80035f6:	e007      	b.n	8003608 <__sfputs_r+0x22>
 80035f8:	463a      	mov	r2, r7
 80035fa:	4630      	mov	r0, r6
 80035fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003600:	f7ff ffdc 	bl	80035bc <__sfputc_r>
 8003604:	1c43      	adds	r3, r0, #1
 8003606:	d1f3      	bne.n	80035f0 <__sfputs_r+0xa>
 8003608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800360c <_vfiprintf_r>:
 800360c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003610:	460d      	mov	r5, r1
 8003612:	4614      	mov	r4, r2
 8003614:	4698      	mov	r8, r3
 8003616:	4606      	mov	r6, r0
 8003618:	b09d      	sub	sp, #116	; 0x74
 800361a:	b118      	cbz	r0, 8003624 <_vfiprintf_r+0x18>
 800361c:	6983      	ldr	r3, [r0, #24]
 800361e:	b90b      	cbnz	r3, 8003624 <_vfiprintf_r+0x18>
 8003620:	f7ff fe98 	bl	8003354 <__sinit>
 8003624:	4b89      	ldr	r3, [pc, #548]	; (800384c <_vfiprintf_r+0x240>)
 8003626:	429d      	cmp	r5, r3
 8003628:	d11b      	bne.n	8003662 <_vfiprintf_r+0x56>
 800362a:	6875      	ldr	r5, [r6, #4]
 800362c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800362e:	07d9      	lsls	r1, r3, #31
 8003630:	d405      	bmi.n	800363e <_vfiprintf_r+0x32>
 8003632:	89ab      	ldrh	r3, [r5, #12]
 8003634:	059a      	lsls	r2, r3, #22
 8003636:	d402      	bmi.n	800363e <_vfiprintf_r+0x32>
 8003638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800363a:	f7ff ff29 	bl	8003490 <__retarget_lock_acquire_recursive>
 800363e:	89ab      	ldrh	r3, [r5, #12]
 8003640:	071b      	lsls	r3, r3, #28
 8003642:	d501      	bpl.n	8003648 <_vfiprintf_r+0x3c>
 8003644:	692b      	ldr	r3, [r5, #16]
 8003646:	b9eb      	cbnz	r3, 8003684 <_vfiprintf_r+0x78>
 8003648:	4629      	mov	r1, r5
 800364a:	4630      	mov	r0, r6
 800364c:	f000 fb5c 	bl	8003d08 <__swsetup_r>
 8003650:	b1c0      	cbz	r0, 8003684 <_vfiprintf_r+0x78>
 8003652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003654:	07dc      	lsls	r4, r3, #31
 8003656:	d50e      	bpl.n	8003676 <_vfiprintf_r+0x6a>
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	b01d      	add	sp, #116	; 0x74
 800365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003662:	4b7b      	ldr	r3, [pc, #492]	; (8003850 <_vfiprintf_r+0x244>)
 8003664:	429d      	cmp	r5, r3
 8003666:	d101      	bne.n	800366c <_vfiprintf_r+0x60>
 8003668:	68b5      	ldr	r5, [r6, #8]
 800366a:	e7df      	b.n	800362c <_vfiprintf_r+0x20>
 800366c:	4b79      	ldr	r3, [pc, #484]	; (8003854 <_vfiprintf_r+0x248>)
 800366e:	429d      	cmp	r5, r3
 8003670:	bf08      	it	eq
 8003672:	68f5      	ldreq	r5, [r6, #12]
 8003674:	e7da      	b.n	800362c <_vfiprintf_r+0x20>
 8003676:	89ab      	ldrh	r3, [r5, #12]
 8003678:	0598      	lsls	r0, r3, #22
 800367a:	d4ed      	bmi.n	8003658 <_vfiprintf_r+0x4c>
 800367c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800367e:	f7ff ff08 	bl	8003492 <__retarget_lock_release_recursive>
 8003682:	e7e9      	b.n	8003658 <_vfiprintf_r+0x4c>
 8003684:	2300      	movs	r3, #0
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
 8003688:	2320      	movs	r3, #32
 800368a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800368e:	2330      	movs	r3, #48	; 0x30
 8003690:	f04f 0901 	mov.w	r9, #1
 8003694:	f8cd 800c 	str.w	r8, [sp, #12]
 8003698:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003858 <_vfiprintf_r+0x24c>
 800369c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036a0:	4623      	mov	r3, r4
 80036a2:	469a      	mov	sl, r3
 80036a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036a8:	b10a      	cbz	r2, 80036ae <_vfiprintf_r+0xa2>
 80036aa:	2a25      	cmp	r2, #37	; 0x25
 80036ac:	d1f9      	bne.n	80036a2 <_vfiprintf_r+0x96>
 80036ae:	ebba 0b04 	subs.w	fp, sl, r4
 80036b2:	d00b      	beq.n	80036cc <_vfiprintf_r+0xc0>
 80036b4:	465b      	mov	r3, fp
 80036b6:	4622      	mov	r2, r4
 80036b8:	4629      	mov	r1, r5
 80036ba:	4630      	mov	r0, r6
 80036bc:	f7ff ff93 	bl	80035e6 <__sfputs_r>
 80036c0:	3001      	adds	r0, #1
 80036c2:	f000 80aa 	beq.w	800381a <_vfiprintf_r+0x20e>
 80036c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036c8:	445a      	add	r2, fp
 80036ca:	9209      	str	r2, [sp, #36]	; 0x24
 80036cc:	f89a 3000 	ldrb.w	r3, [sl]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80a2 	beq.w	800381a <_vfiprintf_r+0x20e>
 80036d6:	2300      	movs	r3, #0
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295
 80036dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036e0:	f10a 0a01 	add.w	sl, sl, #1
 80036e4:	9304      	str	r3, [sp, #16]
 80036e6:	9307      	str	r3, [sp, #28]
 80036e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036ec:	931a      	str	r3, [sp, #104]	; 0x68
 80036ee:	4654      	mov	r4, sl
 80036f0:	2205      	movs	r2, #5
 80036f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036f6:	4858      	ldr	r0, [pc, #352]	; (8003858 <_vfiprintf_r+0x24c>)
 80036f8:	f000 fcba 	bl	8004070 <memchr>
 80036fc:	9a04      	ldr	r2, [sp, #16]
 80036fe:	b9d8      	cbnz	r0, 8003738 <_vfiprintf_r+0x12c>
 8003700:	06d1      	lsls	r1, r2, #27
 8003702:	bf44      	itt	mi
 8003704:	2320      	movmi	r3, #32
 8003706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800370a:	0713      	lsls	r3, r2, #28
 800370c:	bf44      	itt	mi
 800370e:	232b      	movmi	r3, #43	; 0x2b
 8003710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003714:	f89a 3000 	ldrb.w	r3, [sl]
 8003718:	2b2a      	cmp	r3, #42	; 0x2a
 800371a:	d015      	beq.n	8003748 <_vfiprintf_r+0x13c>
 800371c:	4654      	mov	r4, sl
 800371e:	2000      	movs	r0, #0
 8003720:	f04f 0c0a 	mov.w	ip, #10
 8003724:	9a07      	ldr	r2, [sp, #28]
 8003726:	4621      	mov	r1, r4
 8003728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800372c:	3b30      	subs	r3, #48	; 0x30
 800372e:	2b09      	cmp	r3, #9
 8003730:	d94e      	bls.n	80037d0 <_vfiprintf_r+0x1c4>
 8003732:	b1b0      	cbz	r0, 8003762 <_vfiprintf_r+0x156>
 8003734:	9207      	str	r2, [sp, #28]
 8003736:	e014      	b.n	8003762 <_vfiprintf_r+0x156>
 8003738:	eba0 0308 	sub.w	r3, r0, r8
 800373c:	fa09 f303 	lsl.w	r3, r9, r3
 8003740:	4313      	orrs	r3, r2
 8003742:	46a2      	mov	sl, r4
 8003744:	9304      	str	r3, [sp, #16]
 8003746:	e7d2      	b.n	80036ee <_vfiprintf_r+0xe2>
 8003748:	9b03      	ldr	r3, [sp, #12]
 800374a:	1d19      	adds	r1, r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	9103      	str	r1, [sp, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	bfbb      	ittet	lt
 8003754:	425b      	neglt	r3, r3
 8003756:	f042 0202 	orrlt.w	r2, r2, #2
 800375a:	9307      	strge	r3, [sp, #28]
 800375c:	9307      	strlt	r3, [sp, #28]
 800375e:	bfb8      	it	lt
 8003760:	9204      	strlt	r2, [sp, #16]
 8003762:	7823      	ldrb	r3, [r4, #0]
 8003764:	2b2e      	cmp	r3, #46	; 0x2e
 8003766:	d10c      	bne.n	8003782 <_vfiprintf_r+0x176>
 8003768:	7863      	ldrb	r3, [r4, #1]
 800376a:	2b2a      	cmp	r3, #42	; 0x2a
 800376c:	d135      	bne.n	80037da <_vfiprintf_r+0x1ce>
 800376e:	9b03      	ldr	r3, [sp, #12]
 8003770:	3402      	adds	r4, #2
 8003772:	1d1a      	adds	r2, r3, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	9203      	str	r2, [sp, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	bfb8      	it	lt
 800377c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003780:	9305      	str	r3, [sp, #20]
 8003782:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800385c <_vfiprintf_r+0x250>
 8003786:	2203      	movs	r2, #3
 8003788:	4650      	mov	r0, sl
 800378a:	7821      	ldrb	r1, [r4, #0]
 800378c:	f000 fc70 	bl	8004070 <memchr>
 8003790:	b140      	cbz	r0, 80037a4 <_vfiprintf_r+0x198>
 8003792:	2340      	movs	r3, #64	; 0x40
 8003794:	eba0 000a 	sub.w	r0, r0, sl
 8003798:	fa03 f000 	lsl.w	r0, r3, r0
 800379c:	9b04      	ldr	r3, [sp, #16]
 800379e:	3401      	adds	r4, #1
 80037a0:	4303      	orrs	r3, r0
 80037a2:	9304      	str	r3, [sp, #16]
 80037a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037a8:	2206      	movs	r2, #6
 80037aa:	482d      	ldr	r0, [pc, #180]	; (8003860 <_vfiprintf_r+0x254>)
 80037ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037b0:	f000 fc5e 	bl	8004070 <memchr>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	d03f      	beq.n	8003838 <_vfiprintf_r+0x22c>
 80037b8:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <_vfiprintf_r+0x258>)
 80037ba:	bb1b      	cbnz	r3, 8003804 <_vfiprintf_r+0x1f8>
 80037bc:	9b03      	ldr	r3, [sp, #12]
 80037be:	3307      	adds	r3, #7
 80037c0:	f023 0307 	bic.w	r3, r3, #7
 80037c4:	3308      	adds	r3, #8
 80037c6:	9303      	str	r3, [sp, #12]
 80037c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ca:	443b      	add	r3, r7
 80037cc:	9309      	str	r3, [sp, #36]	; 0x24
 80037ce:	e767      	b.n	80036a0 <_vfiprintf_r+0x94>
 80037d0:	460c      	mov	r4, r1
 80037d2:	2001      	movs	r0, #1
 80037d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80037d8:	e7a5      	b.n	8003726 <_vfiprintf_r+0x11a>
 80037da:	2300      	movs	r3, #0
 80037dc:	f04f 0c0a 	mov.w	ip, #10
 80037e0:	4619      	mov	r1, r3
 80037e2:	3401      	adds	r4, #1
 80037e4:	9305      	str	r3, [sp, #20]
 80037e6:	4620      	mov	r0, r4
 80037e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037ec:	3a30      	subs	r2, #48	; 0x30
 80037ee:	2a09      	cmp	r2, #9
 80037f0:	d903      	bls.n	80037fa <_vfiprintf_r+0x1ee>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0c5      	beq.n	8003782 <_vfiprintf_r+0x176>
 80037f6:	9105      	str	r1, [sp, #20]
 80037f8:	e7c3      	b.n	8003782 <_vfiprintf_r+0x176>
 80037fa:	4604      	mov	r4, r0
 80037fc:	2301      	movs	r3, #1
 80037fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8003802:	e7f0      	b.n	80037e6 <_vfiprintf_r+0x1da>
 8003804:	ab03      	add	r3, sp, #12
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	462a      	mov	r2, r5
 800380a:	4630      	mov	r0, r6
 800380c:	4b16      	ldr	r3, [pc, #88]	; (8003868 <_vfiprintf_r+0x25c>)
 800380e:	a904      	add	r1, sp, #16
 8003810:	f3af 8000 	nop.w
 8003814:	4607      	mov	r7, r0
 8003816:	1c78      	adds	r0, r7, #1
 8003818:	d1d6      	bne.n	80037c8 <_vfiprintf_r+0x1bc>
 800381a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800381c:	07d9      	lsls	r1, r3, #31
 800381e:	d405      	bmi.n	800382c <_vfiprintf_r+0x220>
 8003820:	89ab      	ldrh	r3, [r5, #12]
 8003822:	059a      	lsls	r2, r3, #22
 8003824:	d402      	bmi.n	800382c <_vfiprintf_r+0x220>
 8003826:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003828:	f7ff fe33 	bl	8003492 <__retarget_lock_release_recursive>
 800382c:	89ab      	ldrh	r3, [r5, #12]
 800382e:	065b      	lsls	r3, r3, #25
 8003830:	f53f af12 	bmi.w	8003658 <_vfiprintf_r+0x4c>
 8003834:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003836:	e711      	b.n	800365c <_vfiprintf_r+0x50>
 8003838:	ab03      	add	r3, sp, #12
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	462a      	mov	r2, r5
 800383e:	4630      	mov	r0, r6
 8003840:	4b09      	ldr	r3, [pc, #36]	; (8003868 <_vfiprintf_r+0x25c>)
 8003842:	a904      	add	r1, sp, #16
 8003844:	f000 f882 	bl	800394c <_printf_i>
 8003848:	e7e4      	b.n	8003814 <_vfiprintf_r+0x208>
 800384a:	bf00      	nop
 800384c:	08004244 	.word	0x08004244
 8003850:	08004264 	.word	0x08004264
 8003854:	08004224 	.word	0x08004224
 8003858:	08004284 	.word	0x08004284
 800385c:	0800428a 	.word	0x0800428a
 8003860:	0800428e 	.word	0x0800428e
 8003864:	00000000 	.word	0x00000000
 8003868:	080035e7 	.word	0x080035e7

0800386c <_printf_common>:
 800386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003870:	4616      	mov	r6, r2
 8003872:	4699      	mov	r9, r3
 8003874:	688a      	ldr	r2, [r1, #8]
 8003876:	690b      	ldr	r3, [r1, #16]
 8003878:	4607      	mov	r7, r0
 800387a:	4293      	cmp	r3, r2
 800387c:	bfb8      	it	lt
 800387e:	4613      	movlt	r3, r2
 8003880:	6033      	str	r3, [r6, #0]
 8003882:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003886:	460c      	mov	r4, r1
 8003888:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800388c:	b10a      	cbz	r2, 8003892 <_printf_common+0x26>
 800388e:	3301      	adds	r3, #1
 8003890:	6033      	str	r3, [r6, #0]
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	0699      	lsls	r1, r3, #26
 8003896:	bf42      	ittt	mi
 8003898:	6833      	ldrmi	r3, [r6, #0]
 800389a:	3302      	addmi	r3, #2
 800389c:	6033      	strmi	r3, [r6, #0]
 800389e:	6825      	ldr	r5, [r4, #0]
 80038a0:	f015 0506 	ands.w	r5, r5, #6
 80038a4:	d106      	bne.n	80038b4 <_printf_common+0x48>
 80038a6:	f104 0a19 	add.w	sl, r4, #25
 80038aa:	68e3      	ldr	r3, [r4, #12]
 80038ac:	6832      	ldr	r2, [r6, #0]
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	42ab      	cmp	r3, r5
 80038b2:	dc28      	bgt.n	8003906 <_printf_common+0x9a>
 80038b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038b8:	1e13      	subs	r3, r2, #0
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	bf18      	it	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	0692      	lsls	r2, r2, #26
 80038c2:	d42d      	bmi.n	8003920 <_printf_common+0xb4>
 80038c4:	4649      	mov	r1, r9
 80038c6:	4638      	mov	r0, r7
 80038c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038cc:	47c0      	blx	r8
 80038ce:	3001      	adds	r0, #1
 80038d0:	d020      	beq.n	8003914 <_printf_common+0xa8>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	68e5      	ldr	r5, [r4, #12]
 80038d6:	f003 0306 	and.w	r3, r3, #6
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf18      	it	ne
 80038de:	2500      	movne	r5, #0
 80038e0:	6832      	ldr	r2, [r6, #0]
 80038e2:	f04f 0600 	mov.w	r6, #0
 80038e6:	68a3      	ldr	r3, [r4, #8]
 80038e8:	bf08      	it	eq
 80038ea:	1aad      	subeq	r5, r5, r2
 80038ec:	6922      	ldr	r2, [r4, #16]
 80038ee:	bf08      	it	eq
 80038f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bfc4      	itt	gt
 80038f8:	1a9b      	subgt	r3, r3, r2
 80038fa:	18ed      	addgt	r5, r5, r3
 80038fc:	341a      	adds	r4, #26
 80038fe:	42b5      	cmp	r5, r6
 8003900:	d11a      	bne.n	8003938 <_printf_common+0xcc>
 8003902:	2000      	movs	r0, #0
 8003904:	e008      	b.n	8003918 <_printf_common+0xac>
 8003906:	2301      	movs	r3, #1
 8003908:	4652      	mov	r2, sl
 800390a:	4649      	mov	r1, r9
 800390c:	4638      	mov	r0, r7
 800390e:	47c0      	blx	r8
 8003910:	3001      	adds	r0, #1
 8003912:	d103      	bne.n	800391c <_printf_common+0xb0>
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800391c:	3501      	adds	r5, #1
 800391e:	e7c4      	b.n	80038aa <_printf_common+0x3e>
 8003920:	2030      	movs	r0, #48	; 0x30
 8003922:	18e1      	adds	r1, r4, r3
 8003924:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800392e:	4422      	add	r2, r4
 8003930:	3302      	adds	r3, #2
 8003932:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003936:	e7c5      	b.n	80038c4 <_printf_common+0x58>
 8003938:	2301      	movs	r3, #1
 800393a:	4622      	mov	r2, r4
 800393c:	4649      	mov	r1, r9
 800393e:	4638      	mov	r0, r7
 8003940:	47c0      	blx	r8
 8003942:	3001      	adds	r0, #1
 8003944:	d0e6      	beq.n	8003914 <_printf_common+0xa8>
 8003946:	3601      	adds	r6, #1
 8003948:	e7d9      	b.n	80038fe <_printf_common+0x92>
	...

0800394c <_printf_i>:
 800394c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003950:	7e0f      	ldrb	r7, [r1, #24]
 8003952:	4691      	mov	r9, r2
 8003954:	2f78      	cmp	r7, #120	; 0x78
 8003956:	4680      	mov	r8, r0
 8003958:	460c      	mov	r4, r1
 800395a:	469a      	mov	sl, r3
 800395c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800395e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003962:	d807      	bhi.n	8003974 <_printf_i+0x28>
 8003964:	2f62      	cmp	r7, #98	; 0x62
 8003966:	d80a      	bhi.n	800397e <_printf_i+0x32>
 8003968:	2f00      	cmp	r7, #0
 800396a:	f000 80d9 	beq.w	8003b20 <_printf_i+0x1d4>
 800396e:	2f58      	cmp	r7, #88	; 0x58
 8003970:	f000 80a4 	beq.w	8003abc <_printf_i+0x170>
 8003974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800397c:	e03a      	b.n	80039f4 <_printf_i+0xa8>
 800397e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003982:	2b15      	cmp	r3, #21
 8003984:	d8f6      	bhi.n	8003974 <_printf_i+0x28>
 8003986:	a101      	add	r1, pc, #4	; (adr r1, 800398c <_printf_i+0x40>)
 8003988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800398c:	080039e5 	.word	0x080039e5
 8003990:	080039f9 	.word	0x080039f9
 8003994:	08003975 	.word	0x08003975
 8003998:	08003975 	.word	0x08003975
 800399c:	08003975 	.word	0x08003975
 80039a0:	08003975 	.word	0x08003975
 80039a4:	080039f9 	.word	0x080039f9
 80039a8:	08003975 	.word	0x08003975
 80039ac:	08003975 	.word	0x08003975
 80039b0:	08003975 	.word	0x08003975
 80039b4:	08003975 	.word	0x08003975
 80039b8:	08003b07 	.word	0x08003b07
 80039bc:	08003a29 	.word	0x08003a29
 80039c0:	08003ae9 	.word	0x08003ae9
 80039c4:	08003975 	.word	0x08003975
 80039c8:	08003975 	.word	0x08003975
 80039cc:	08003b29 	.word	0x08003b29
 80039d0:	08003975 	.word	0x08003975
 80039d4:	08003a29 	.word	0x08003a29
 80039d8:	08003975 	.word	0x08003975
 80039dc:	08003975 	.word	0x08003975
 80039e0:	08003af1 	.word	0x08003af1
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	602a      	str	r2, [r5, #0]
 80039ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0a4      	b.n	8003b42 <_printf_i+0x1f6>
 80039f8:	6820      	ldr	r0, [r4, #0]
 80039fa:	6829      	ldr	r1, [r5, #0]
 80039fc:	0606      	lsls	r6, r0, #24
 80039fe:	f101 0304 	add.w	r3, r1, #4
 8003a02:	d50a      	bpl.n	8003a1a <_printf_i+0xce>
 8003a04:	680e      	ldr	r6, [r1, #0]
 8003a06:	602b      	str	r3, [r5, #0]
 8003a08:	2e00      	cmp	r6, #0
 8003a0a:	da03      	bge.n	8003a14 <_printf_i+0xc8>
 8003a0c:	232d      	movs	r3, #45	; 0x2d
 8003a0e:	4276      	negs	r6, r6
 8003a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a14:	230a      	movs	r3, #10
 8003a16:	485e      	ldr	r0, [pc, #376]	; (8003b90 <_printf_i+0x244>)
 8003a18:	e019      	b.n	8003a4e <_printf_i+0x102>
 8003a1a:	680e      	ldr	r6, [r1, #0]
 8003a1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a20:	602b      	str	r3, [r5, #0]
 8003a22:	bf18      	it	ne
 8003a24:	b236      	sxthne	r6, r6
 8003a26:	e7ef      	b.n	8003a08 <_printf_i+0xbc>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	6820      	ldr	r0, [r4, #0]
 8003a2c:	1d19      	adds	r1, r3, #4
 8003a2e:	6029      	str	r1, [r5, #0]
 8003a30:	0601      	lsls	r1, r0, #24
 8003a32:	d501      	bpl.n	8003a38 <_printf_i+0xec>
 8003a34:	681e      	ldr	r6, [r3, #0]
 8003a36:	e002      	b.n	8003a3e <_printf_i+0xf2>
 8003a38:	0646      	lsls	r6, r0, #25
 8003a3a:	d5fb      	bpl.n	8003a34 <_printf_i+0xe8>
 8003a3c:	881e      	ldrh	r6, [r3, #0]
 8003a3e:	2f6f      	cmp	r7, #111	; 0x6f
 8003a40:	bf0c      	ite	eq
 8003a42:	2308      	moveq	r3, #8
 8003a44:	230a      	movne	r3, #10
 8003a46:	4852      	ldr	r0, [pc, #328]	; (8003b90 <_printf_i+0x244>)
 8003a48:	2100      	movs	r1, #0
 8003a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a4e:	6865      	ldr	r5, [r4, #4]
 8003a50:	2d00      	cmp	r5, #0
 8003a52:	bfa8      	it	ge
 8003a54:	6821      	ldrge	r1, [r4, #0]
 8003a56:	60a5      	str	r5, [r4, #8]
 8003a58:	bfa4      	itt	ge
 8003a5a:	f021 0104 	bicge.w	r1, r1, #4
 8003a5e:	6021      	strge	r1, [r4, #0]
 8003a60:	b90e      	cbnz	r6, 8003a66 <_printf_i+0x11a>
 8003a62:	2d00      	cmp	r5, #0
 8003a64:	d04d      	beq.n	8003b02 <_printf_i+0x1b6>
 8003a66:	4615      	mov	r5, r2
 8003a68:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a6c:	fb03 6711 	mls	r7, r3, r1, r6
 8003a70:	5dc7      	ldrb	r7, [r0, r7]
 8003a72:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a76:	4637      	mov	r7, r6
 8003a78:	42bb      	cmp	r3, r7
 8003a7a:	460e      	mov	r6, r1
 8003a7c:	d9f4      	bls.n	8003a68 <_printf_i+0x11c>
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d10b      	bne.n	8003a9a <_printf_i+0x14e>
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	07de      	lsls	r6, r3, #31
 8003a86:	d508      	bpl.n	8003a9a <_printf_i+0x14e>
 8003a88:	6923      	ldr	r3, [r4, #16]
 8003a8a:	6861      	ldr	r1, [r4, #4]
 8003a8c:	4299      	cmp	r1, r3
 8003a8e:	bfde      	ittt	le
 8003a90:	2330      	movle	r3, #48	; 0x30
 8003a92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a9a:	1b52      	subs	r2, r2, r5
 8003a9c:	6122      	str	r2, [r4, #16]
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f8cd a000 	str.w	sl, [sp]
 8003aa8:	aa03      	add	r2, sp, #12
 8003aaa:	f7ff fedf 	bl	800386c <_printf_common>
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d14c      	bne.n	8003b4c <_printf_i+0x200>
 8003ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab6:	b004      	add	sp, #16
 8003ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003abc:	4834      	ldr	r0, [pc, #208]	; (8003b90 <_printf_i+0x244>)
 8003abe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ac2:	6829      	ldr	r1, [r5, #0]
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	f851 6b04 	ldr.w	r6, [r1], #4
 8003aca:	6029      	str	r1, [r5, #0]
 8003acc:	061d      	lsls	r5, r3, #24
 8003ace:	d514      	bpl.n	8003afa <_printf_i+0x1ae>
 8003ad0:	07df      	lsls	r7, r3, #31
 8003ad2:	bf44      	itt	mi
 8003ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8003ad8:	6023      	strmi	r3, [r4, #0]
 8003ada:	b91e      	cbnz	r6, 8003ae4 <_printf_i+0x198>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	f023 0320 	bic.w	r3, r3, #32
 8003ae2:	6023      	str	r3, [r4, #0]
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	e7af      	b.n	8003a48 <_printf_i+0xfc>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	f043 0320 	orr.w	r3, r3, #32
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	2378      	movs	r3, #120	; 0x78
 8003af2:	4828      	ldr	r0, [pc, #160]	; (8003b94 <_printf_i+0x248>)
 8003af4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003af8:	e7e3      	b.n	8003ac2 <_printf_i+0x176>
 8003afa:	0659      	lsls	r1, r3, #25
 8003afc:	bf48      	it	mi
 8003afe:	b2b6      	uxthmi	r6, r6
 8003b00:	e7e6      	b.n	8003ad0 <_printf_i+0x184>
 8003b02:	4615      	mov	r5, r2
 8003b04:	e7bb      	b.n	8003a7e <_printf_i+0x132>
 8003b06:	682b      	ldr	r3, [r5, #0]
 8003b08:	6826      	ldr	r6, [r4, #0]
 8003b0a:	1d18      	adds	r0, r3, #4
 8003b0c:	6961      	ldr	r1, [r4, #20]
 8003b0e:	6028      	str	r0, [r5, #0]
 8003b10:	0635      	lsls	r5, r6, #24
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	d501      	bpl.n	8003b1a <_printf_i+0x1ce>
 8003b16:	6019      	str	r1, [r3, #0]
 8003b18:	e002      	b.n	8003b20 <_printf_i+0x1d4>
 8003b1a:	0670      	lsls	r0, r6, #25
 8003b1c:	d5fb      	bpl.n	8003b16 <_printf_i+0x1ca>
 8003b1e:	8019      	strh	r1, [r3, #0]
 8003b20:	2300      	movs	r3, #0
 8003b22:	4615      	mov	r5, r2
 8003b24:	6123      	str	r3, [r4, #16]
 8003b26:	e7ba      	b.n	8003a9e <_printf_i+0x152>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	1d1a      	adds	r2, r3, #4
 8003b2e:	602a      	str	r2, [r5, #0]
 8003b30:	681d      	ldr	r5, [r3, #0]
 8003b32:	6862      	ldr	r2, [r4, #4]
 8003b34:	4628      	mov	r0, r5
 8003b36:	f000 fa9b 	bl	8004070 <memchr>
 8003b3a:	b108      	cbz	r0, 8003b40 <_printf_i+0x1f4>
 8003b3c:	1b40      	subs	r0, r0, r5
 8003b3e:	6060      	str	r0, [r4, #4]
 8003b40:	6863      	ldr	r3, [r4, #4]
 8003b42:	6123      	str	r3, [r4, #16]
 8003b44:	2300      	movs	r3, #0
 8003b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b4a:	e7a8      	b.n	8003a9e <_printf_i+0x152>
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4649      	mov	r1, r9
 8003b50:	4640      	mov	r0, r8
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	47d0      	blx	sl
 8003b56:	3001      	adds	r0, #1
 8003b58:	d0ab      	beq.n	8003ab2 <_printf_i+0x166>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	079b      	lsls	r3, r3, #30
 8003b5e:	d413      	bmi.n	8003b88 <_printf_i+0x23c>
 8003b60:	68e0      	ldr	r0, [r4, #12]
 8003b62:	9b03      	ldr	r3, [sp, #12]
 8003b64:	4298      	cmp	r0, r3
 8003b66:	bfb8      	it	lt
 8003b68:	4618      	movlt	r0, r3
 8003b6a:	e7a4      	b.n	8003ab6 <_printf_i+0x16a>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	4632      	mov	r2, r6
 8003b70:	4649      	mov	r1, r9
 8003b72:	4640      	mov	r0, r8
 8003b74:	47d0      	blx	sl
 8003b76:	3001      	adds	r0, #1
 8003b78:	d09b      	beq.n	8003ab2 <_printf_i+0x166>
 8003b7a:	3501      	adds	r5, #1
 8003b7c:	68e3      	ldr	r3, [r4, #12]
 8003b7e:	9903      	ldr	r1, [sp, #12]
 8003b80:	1a5b      	subs	r3, r3, r1
 8003b82:	42ab      	cmp	r3, r5
 8003b84:	dcf2      	bgt.n	8003b6c <_printf_i+0x220>
 8003b86:	e7eb      	b.n	8003b60 <_printf_i+0x214>
 8003b88:	2500      	movs	r5, #0
 8003b8a:	f104 0619 	add.w	r6, r4, #25
 8003b8e:	e7f5      	b.n	8003b7c <_printf_i+0x230>
 8003b90:	08004295 	.word	0x08004295
 8003b94:	080042a6 	.word	0x080042a6

08003b98 <_sbrk_r>:
 8003b98:	b538      	push	{r3, r4, r5, lr}
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	4d05      	ldr	r5, [pc, #20]	; (8003bb4 <_sbrk_r+0x1c>)
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	602b      	str	r3, [r5, #0]
 8003ba4:	f7fc ff0c 	bl	80009c0 <_sbrk>
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	d102      	bne.n	8003bb2 <_sbrk_r+0x1a>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	b103      	cbz	r3, 8003bb2 <_sbrk_r+0x1a>
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
 8003bb4:	20000184 	.word	0x20000184

08003bb8 <__sread>:
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	460c      	mov	r4, r1
 8003bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc0:	f000 fab8 	bl	8004134 <_read_r>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	bfab      	itete	ge
 8003bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bca:	89a3      	ldrhlt	r3, [r4, #12]
 8003bcc:	181b      	addge	r3, r3, r0
 8003bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bd2:	bfac      	ite	ge
 8003bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bd6:	81a3      	strhlt	r3, [r4, #12]
 8003bd8:	bd10      	pop	{r4, pc}

08003bda <__swrite>:
 8003bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bde:	461f      	mov	r7, r3
 8003be0:	898b      	ldrh	r3, [r1, #12]
 8003be2:	4605      	mov	r5, r0
 8003be4:	05db      	lsls	r3, r3, #23
 8003be6:	460c      	mov	r4, r1
 8003be8:	4616      	mov	r6, r2
 8003bea:	d505      	bpl.n	8003bf8 <__swrite+0x1e>
 8003bec:	2302      	movs	r3, #2
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf4:	f000 f9c4 	bl	8003f80 <_lseek_r>
 8003bf8:	89a3      	ldrh	r3, [r4, #12]
 8003bfa:	4632      	mov	r2, r6
 8003bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c00:	81a3      	strh	r3, [r4, #12]
 8003c02:	4628      	mov	r0, r5
 8003c04:	463b      	mov	r3, r7
 8003c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0e:	f000 b869 	b.w	8003ce4 <_write_r>

08003c12 <__sseek>:
 8003c12:	b510      	push	{r4, lr}
 8003c14:	460c      	mov	r4, r1
 8003c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c1a:	f000 f9b1 	bl	8003f80 <_lseek_r>
 8003c1e:	1c43      	adds	r3, r0, #1
 8003c20:	89a3      	ldrh	r3, [r4, #12]
 8003c22:	bf15      	itete	ne
 8003c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c2e:	81a3      	strheq	r3, [r4, #12]
 8003c30:	bf18      	it	ne
 8003c32:	81a3      	strhne	r3, [r4, #12]
 8003c34:	bd10      	pop	{r4, pc}

08003c36 <__sclose>:
 8003c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c3a:	f000 b8d3 	b.w	8003de4 <_close_r>
	...

08003c40 <__swbuf_r>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	460e      	mov	r6, r1
 8003c44:	4614      	mov	r4, r2
 8003c46:	4605      	mov	r5, r0
 8003c48:	b118      	cbz	r0, 8003c52 <__swbuf_r+0x12>
 8003c4a:	6983      	ldr	r3, [r0, #24]
 8003c4c:	b90b      	cbnz	r3, 8003c52 <__swbuf_r+0x12>
 8003c4e:	f7ff fb81 	bl	8003354 <__sinit>
 8003c52:	4b21      	ldr	r3, [pc, #132]	; (8003cd8 <__swbuf_r+0x98>)
 8003c54:	429c      	cmp	r4, r3
 8003c56:	d12b      	bne.n	8003cb0 <__swbuf_r+0x70>
 8003c58:	686c      	ldr	r4, [r5, #4]
 8003c5a:	69a3      	ldr	r3, [r4, #24]
 8003c5c:	60a3      	str	r3, [r4, #8]
 8003c5e:	89a3      	ldrh	r3, [r4, #12]
 8003c60:	071a      	lsls	r2, r3, #28
 8003c62:	d52f      	bpl.n	8003cc4 <__swbuf_r+0x84>
 8003c64:	6923      	ldr	r3, [r4, #16]
 8003c66:	b36b      	cbz	r3, 8003cc4 <__swbuf_r+0x84>
 8003c68:	6923      	ldr	r3, [r4, #16]
 8003c6a:	6820      	ldr	r0, [r4, #0]
 8003c6c:	b2f6      	uxtb	r6, r6
 8003c6e:	1ac0      	subs	r0, r0, r3
 8003c70:	6963      	ldr	r3, [r4, #20]
 8003c72:	4637      	mov	r7, r6
 8003c74:	4283      	cmp	r3, r0
 8003c76:	dc04      	bgt.n	8003c82 <__swbuf_r+0x42>
 8003c78:	4621      	mov	r1, r4
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f000 f944 	bl	8003f08 <_fflush_r>
 8003c80:	bb30      	cbnz	r0, 8003cd0 <__swbuf_r+0x90>
 8003c82:	68a3      	ldr	r3, [r4, #8]
 8003c84:	3001      	adds	r0, #1
 8003c86:	3b01      	subs	r3, #1
 8003c88:	60a3      	str	r3, [r4, #8]
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	6022      	str	r2, [r4, #0]
 8003c90:	701e      	strb	r6, [r3, #0]
 8003c92:	6963      	ldr	r3, [r4, #20]
 8003c94:	4283      	cmp	r3, r0
 8003c96:	d004      	beq.n	8003ca2 <__swbuf_r+0x62>
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	07db      	lsls	r3, r3, #31
 8003c9c:	d506      	bpl.n	8003cac <__swbuf_r+0x6c>
 8003c9e:	2e0a      	cmp	r6, #10
 8003ca0:	d104      	bne.n	8003cac <__swbuf_r+0x6c>
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f000 f92f 	bl	8003f08 <_fflush_r>
 8003caa:	b988      	cbnz	r0, 8003cd0 <__swbuf_r+0x90>
 8003cac:	4638      	mov	r0, r7
 8003cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <__swbuf_r+0x9c>)
 8003cb2:	429c      	cmp	r4, r3
 8003cb4:	d101      	bne.n	8003cba <__swbuf_r+0x7a>
 8003cb6:	68ac      	ldr	r4, [r5, #8]
 8003cb8:	e7cf      	b.n	8003c5a <__swbuf_r+0x1a>
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <__swbuf_r+0xa0>)
 8003cbc:	429c      	cmp	r4, r3
 8003cbe:	bf08      	it	eq
 8003cc0:	68ec      	ldreq	r4, [r5, #12]
 8003cc2:	e7ca      	b.n	8003c5a <__swbuf_r+0x1a>
 8003cc4:	4621      	mov	r1, r4
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 f81e 	bl	8003d08 <__swsetup_r>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d0cb      	beq.n	8003c68 <__swbuf_r+0x28>
 8003cd0:	f04f 37ff 	mov.w	r7, #4294967295
 8003cd4:	e7ea      	b.n	8003cac <__swbuf_r+0x6c>
 8003cd6:	bf00      	nop
 8003cd8:	08004244 	.word	0x08004244
 8003cdc:	08004264 	.word	0x08004264
 8003ce0:	08004224 	.word	0x08004224

08003ce4 <_write_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	2200      	movs	r2, #0
 8003cee:	4d05      	ldr	r5, [pc, #20]	; (8003d04 <_write_r+0x20>)
 8003cf0:	602a      	str	r2, [r5, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fc fe17 	bl	8000926 <_write>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_write_r+0x1e>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_write_r+0x1e>
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	20000184 	.word	0x20000184

08003d08 <__swsetup_r>:
 8003d08:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <__swsetup_r+0xcc>)
 8003d0a:	b570      	push	{r4, r5, r6, lr}
 8003d0c:	681d      	ldr	r5, [r3, #0]
 8003d0e:	4606      	mov	r6, r0
 8003d10:	460c      	mov	r4, r1
 8003d12:	b125      	cbz	r5, 8003d1e <__swsetup_r+0x16>
 8003d14:	69ab      	ldr	r3, [r5, #24]
 8003d16:	b913      	cbnz	r3, 8003d1e <__swsetup_r+0x16>
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f7ff fb1b 	bl	8003354 <__sinit>
 8003d1e:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <__swsetup_r+0xd0>)
 8003d20:	429c      	cmp	r4, r3
 8003d22:	d10f      	bne.n	8003d44 <__swsetup_r+0x3c>
 8003d24:	686c      	ldr	r4, [r5, #4]
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d2c:	0719      	lsls	r1, r3, #28
 8003d2e:	d42c      	bmi.n	8003d8a <__swsetup_r+0x82>
 8003d30:	06dd      	lsls	r5, r3, #27
 8003d32:	d411      	bmi.n	8003d58 <__swsetup_r+0x50>
 8003d34:	2309      	movs	r3, #9
 8003d36:	6033      	str	r3, [r6, #0]
 8003d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d40:	81a3      	strh	r3, [r4, #12]
 8003d42:	e03e      	b.n	8003dc2 <__swsetup_r+0xba>
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <__swsetup_r+0xd4>)
 8003d46:	429c      	cmp	r4, r3
 8003d48:	d101      	bne.n	8003d4e <__swsetup_r+0x46>
 8003d4a:	68ac      	ldr	r4, [r5, #8]
 8003d4c:	e7eb      	b.n	8003d26 <__swsetup_r+0x1e>
 8003d4e:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <__swsetup_r+0xd8>)
 8003d50:	429c      	cmp	r4, r3
 8003d52:	bf08      	it	eq
 8003d54:	68ec      	ldreq	r4, [r5, #12]
 8003d56:	e7e6      	b.n	8003d26 <__swsetup_r+0x1e>
 8003d58:	0758      	lsls	r0, r3, #29
 8003d5a:	d512      	bpl.n	8003d82 <__swsetup_r+0x7a>
 8003d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d5e:	b141      	cbz	r1, 8003d72 <__swsetup_r+0x6a>
 8003d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d64:	4299      	cmp	r1, r3
 8003d66:	d002      	beq.n	8003d6e <__swsetup_r+0x66>
 8003d68:	4630      	mov	r0, r6
 8003d6a:	f000 f99b 	bl	80040a4 <_free_r>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6363      	str	r3, [r4, #52]	; 0x34
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d78:	81a3      	strh	r3, [r4, #12]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6063      	str	r3, [r4, #4]
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	f043 0308 	orr.w	r3, r3, #8
 8003d88:	81a3      	strh	r3, [r4, #12]
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	b94b      	cbnz	r3, 8003da2 <__swsetup_r+0x9a>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d98:	d003      	beq.n	8003da2 <__swsetup_r+0x9a>
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f000 f927 	bl	8003ff0 <__smakebuf_r>
 8003da2:	89a0      	ldrh	r0, [r4, #12]
 8003da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003da8:	f010 0301 	ands.w	r3, r0, #1
 8003dac:	d00a      	beq.n	8003dc4 <__swsetup_r+0xbc>
 8003dae:	2300      	movs	r3, #0
 8003db0:	60a3      	str	r3, [r4, #8]
 8003db2:	6963      	ldr	r3, [r4, #20]
 8003db4:	425b      	negs	r3, r3
 8003db6:	61a3      	str	r3, [r4, #24]
 8003db8:	6923      	ldr	r3, [r4, #16]
 8003dba:	b943      	cbnz	r3, 8003dce <__swsetup_r+0xc6>
 8003dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003dc0:	d1ba      	bne.n	8003d38 <__swsetup_r+0x30>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	0781      	lsls	r1, r0, #30
 8003dc6:	bf58      	it	pl
 8003dc8:	6963      	ldrpl	r3, [r4, #20]
 8003dca:	60a3      	str	r3, [r4, #8]
 8003dcc:	e7f4      	b.n	8003db8 <__swsetup_r+0xb0>
 8003dce:	2000      	movs	r0, #0
 8003dd0:	e7f7      	b.n	8003dc2 <__swsetup_r+0xba>
 8003dd2:	bf00      	nop
 8003dd4:	2000000c 	.word	0x2000000c
 8003dd8:	08004244 	.word	0x08004244
 8003ddc:	08004264 	.word	0x08004264
 8003de0:	08004224 	.word	0x08004224

08003de4 <_close_r>:
 8003de4:	b538      	push	{r3, r4, r5, lr}
 8003de6:	2300      	movs	r3, #0
 8003de8:	4d05      	ldr	r5, [pc, #20]	; (8003e00 <_close_r+0x1c>)
 8003dea:	4604      	mov	r4, r0
 8003dec:	4608      	mov	r0, r1
 8003dee:	602b      	str	r3, [r5, #0]
 8003df0:	f7fc fdb5 	bl	800095e <_close>
 8003df4:	1c43      	adds	r3, r0, #1
 8003df6:	d102      	bne.n	8003dfe <_close_r+0x1a>
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	b103      	cbz	r3, 8003dfe <_close_r+0x1a>
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
 8003e00:	20000184 	.word	0x20000184

08003e04 <__sflush_r>:
 8003e04:	898a      	ldrh	r2, [r1, #12]
 8003e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e08:	4605      	mov	r5, r0
 8003e0a:	0710      	lsls	r0, r2, #28
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	d457      	bmi.n	8003ec0 <__sflush_r+0xbc>
 8003e10:	684b      	ldr	r3, [r1, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	dc04      	bgt.n	8003e20 <__sflush_r+0x1c>
 8003e16:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	dc01      	bgt.n	8003e20 <__sflush_r+0x1c>
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e22:	2e00      	cmp	r6, #0
 8003e24:	d0fa      	beq.n	8003e1c <__sflush_r+0x18>
 8003e26:	2300      	movs	r3, #0
 8003e28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e2c:	682f      	ldr	r7, [r5, #0]
 8003e2e:	602b      	str	r3, [r5, #0]
 8003e30:	d032      	beq.n	8003e98 <__sflush_r+0x94>
 8003e32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	075a      	lsls	r2, r3, #29
 8003e38:	d505      	bpl.n	8003e46 <__sflush_r+0x42>
 8003e3a:	6863      	ldr	r3, [r4, #4]
 8003e3c:	1ac0      	subs	r0, r0, r3
 8003e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e40:	b10b      	cbz	r3, 8003e46 <__sflush_r+0x42>
 8003e42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e44:	1ac0      	subs	r0, r0, r3
 8003e46:	2300      	movs	r3, #0
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	6a21      	ldr	r1, [r4, #32]
 8003e50:	47b0      	blx	r6
 8003e52:	1c43      	adds	r3, r0, #1
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	d106      	bne.n	8003e66 <__sflush_r+0x62>
 8003e58:	6829      	ldr	r1, [r5, #0]
 8003e5a:	291d      	cmp	r1, #29
 8003e5c:	d82c      	bhi.n	8003eb8 <__sflush_r+0xb4>
 8003e5e:	4a29      	ldr	r2, [pc, #164]	; (8003f04 <__sflush_r+0x100>)
 8003e60:	40ca      	lsrs	r2, r1
 8003e62:	07d6      	lsls	r6, r2, #31
 8003e64:	d528      	bpl.n	8003eb8 <__sflush_r+0xb4>
 8003e66:	2200      	movs	r2, #0
 8003e68:	6062      	str	r2, [r4, #4]
 8003e6a:	6922      	ldr	r2, [r4, #16]
 8003e6c:	04d9      	lsls	r1, r3, #19
 8003e6e:	6022      	str	r2, [r4, #0]
 8003e70:	d504      	bpl.n	8003e7c <__sflush_r+0x78>
 8003e72:	1c42      	adds	r2, r0, #1
 8003e74:	d101      	bne.n	8003e7a <__sflush_r+0x76>
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	b903      	cbnz	r3, 8003e7c <__sflush_r+0x78>
 8003e7a:	6560      	str	r0, [r4, #84]	; 0x54
 8003e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e7e:	602f      	str	r7, [r5, #0]
 8003e80:	2900      	cmp	r1, #0
 8003e82:	d0cb      	beq.n	8003e1c <__sflush_r+0x18>
 8003e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e88:	4299      	cmp	r1, r3
 8003e8a:	d002      	beq.n	8003e92 <__sflush_r+0x8e>
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	f000 f909 	bl	80040a4 <_free_r>
 8003e92:	2000      	movs	r0, #0
 8003e94:	6360      	str	r0, [r4, #52]	; 0x34
 8003e96:	e7c2      	b.n	8003e1e <__sflush_r+0x1a>
 8003e98:	6a21      	ldr	r1, [r4, #32]
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b0      	blx	r6
 8003ea0:	1c41      	adds	r1, r0, #1
 8003ea2:	d1c7      	bne.n	8003e34 <__sflush_r+0x30>
 8003ea4:	682b      	ldr	r3, [r5, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0c4      	beq.n	8003e34 <__sflush_r+0x30>
 8003eaa:	2b1d      	cmp	r3, #29
 8003eac:	d001      	beq.n	8003eb2 <__sflush_r+0xae>
 8003eae:	2b16      	cmp	r3, #22
 8003eb0:	d101      	bne.n	8003eb6 <__sflush_r+0xb2>
 8003eb2:	602f      	str	r7, [r5, #0]
 8003eb4:	e7b2      	b.n	8003e1c <__sflush_r+0x18>
 8003eb6:	89a3      	ldrh	r3, [r4, #12]
 8003eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ebc:	81a3      	strh	r3, [r4, #12]
 8003ebe:	e7ae      	b.n	8003e1e <__sflush_r+0x1a>
 8003ec0:	690f      	ldr	r7, [r1, #16]
 8003ec2:	2f00      	cmp	r7, #0
 8003ec4:	d0aa      	beq.n	8003e1c <__sflush_r+0x18>
 8003ec6:	0793      	lsls	r3, r2, #30
 8003ec8:	bf18      	it	ne
 8003eca:	2300      	movne	r3, #0
 8003ecc:	680e      	ldr	r6, [r1, #0]
 8003ece:	bf08      	it	eq
 8003ed0:	694b      	ldreq	r3, [r1, #20]
 8003ed2:	1bf6      	subs	r6, r6, r7
 8003ed4:	600f      	str	r7, [r1, #0]
 8003ed6:	608b      	str	r3, [r1, #8]
 8003ed8:	2e00      	cmp	r6, #0
 8003eda:	dd9f      	ble.n	8003e1c <__sflush_r+0x18>
 8003edc:	4633      	mov	r3, r6
 8003ede:	463a      	mov	r2, r7
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	6a21      	ldr	r1, [r4, #32]
 8003ee4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003ee8:	47e0      	blx	ip
 8003eea:	2800      	cmp	r0, #0
 8003eec:	dc06      	bgt.n	8003efc <__sflush_r+0xf8>
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ef8:	81a3      	strh	r3, [r4, #12]
 8003efa:	e790      	b.n	8003e1e <__sflush_r+0x1a>
 8003efc:	4407      	add	r7, r0
 8003efe:	1a36      	subs	r6, r6, r0
 8003f00:	e7ea      	b.n	8003ed8 <__sflush_r+0xd4>
 8003f02:	bf00      	nop
 8003f04:	20400001 	.word	0x20400001

08003f08 <_fflush_r>:
 8003f08:	b538      	push	{r3, r4, r5, lr}
 8003f0a:	690b      	ldr	r3, [r1, #16]
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	460c      	mov	r4, r1
 8003f10:	b913      	cbnz	r3, 8003f18 <_fflush_r+0x10>
 8003f12:	2500      	movs	r5, #0
 8003f14:	4628      	mov	r0, r5
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	b118      	cbz	r0, 8003f22 <_fflush_r+0x1a>
 8003f1a:	6983      	ldr	r3, [r0, #24]
 8003f1c:	b90b      	cbnz	r3, 8003f22 <_fflush_r+0x1a>
 8003f1e:	f7ff fa19 	bl	8003354 <__sinit>
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <_fflush_r+0x6c>)
 8003f24:	429c      	cmp	r4, r3
 8003f26:	d11b      	bne.n	8003f60 <_fflush_r+0x58>
 8003f28:	686c      	ldr	r4, [r5, #4]
 8003f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0ef      	beq.n	8003f12 <_fflush_r+0xa>
 8003f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f34:	07d0      	lsls	r0, r2, #31
 8003f36:	d404      	bmi.n	8003f42 <_fflush_r+0x3a>
 8003f38:	0599      	lsls	r1, r3, #22
 8003f3a:	d402      	bmi.n	8003f42 <_fflush_r+0x3a>
 8003f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f3e:	f7ff faa7 	bl	8003490 <__retarget_lock_acquire_recursive>
 8003f42:	4628      	mov	r0, r5
 8003f44:	4621      	mov	r1, r4
 8003f46:	f7ff ff5d 	bl	8003e04 <__sflush_r>
 8003f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f4c:	4605      	mov	r5, r0
 8003f4e:	07da      	lsls	r2, r3, #31
 8003f50:	d4e0      	bmi.n	8003f14 <_fflush_r+0xc>
 8003f52:	89a3      	ldrh	r3, [r4, #12]
 8003f54:	059b      	lsls	r3, r3, #22
 8003f56:	d4dd      	bmi.n	8003f14 <_fflush_r+0xc>
 8003f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f5a:	f7ff fa9a 	bl	8003492 <__retarget_lock_release_recursive>
 8003f5e:	e7d9      	b.n	8003f14 <_fflush_r+0xc>
 8003f60:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <_fflush_r+0x70>)
 8003f62:	429c      	cmp	r4, r3
 8003f64:	d101      	bne.n	8003f6a <_fflush_r+0x62>
 8003f66:	68ac      	ldr	r4, [r5, #8]
 8003f68:	e7df      	b.n	8003f2a <_fflush_r+0x22>
 8003f6a:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <_fflush_r+0x74>)
 8003f6c:	429c      	cmp	r4, r3
 8003f6e:	bf08      	it	eq
 8003f70:	68ec      	ldreq	r4, [r5, #12]
 8003f72:	e7da      	b.n	8003f2a <_fflush_r+0x22>
 8003f74:	08004244 	.word	0x08004244
 8003f78:	08004264 	.word	0x08004264
 8003f7c:	08004224 	.word	0x08004224

08003f80 <_lseek_r>:
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4d05      	ldr	r5, [pc, #20]	; (8003fa0 <_lseek_r+0x20>)
 8003f8c:	602a      	str	r2, [r5, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f7fc fd09 	bl	80009a6 <_lseek>
 8003f94:	1c43      	adds	r3, r0, #1
 8003f96:	d102      	bne.n	8003f9e <_lseek_r+0x1e>
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	b103      	cbz	r3, 8003f9e <_lseek_r+0x1e>
 8003f9c:	6023      	str	r3, [r4, #0]
 8003f9e:	bd38      	pop	{r3, r4, r5, pc}
 8003fa0:	20000184 	.word	0x20000184

08003fa4 <__swhatbuf_r>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	460e      	mov	r6, r1
 8003fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fac:	4614      	mov	r4, r2
 8003fae:	2900      	cmp	r1, #0
 8003fb0:	461d      	mov	r5, r3
 8003fb2:	b096      	sub	sp, #88	; 0x58
 8003fb4:	da08      	bge.n	8003fc8 <__swhatbuf_r+0x24>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003fbc:	602a      	str	r2, [r5, #0]
 8003fbe:	061a      	lsls	r2, r3, #24
 8003fc0:	d410      	bmi.n	8003fe4 <__swhatbuf_r+0x40>
 8003fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc6:	e00e      	b.n	8003fe6 <__swhatbuf_r+0x42>
 8003fc8:	466a      	mov	r2, sp
 8003fca:	f000 f8c5 	bl	8004158 <_fstat_r>
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	dbf1      	blt.n	8003fb6 <__swhatbuf_r+0x12>
 8003fd2:	9a01      	ldr	r2, [sp, #4]
 8003fd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fdc:	425a      	negs	r2, r3
 8003fde:	415a      	adcs	r2, r3
 8003fe0:	602a      	str	r2, [r5, #0]
 8003fe2:	e7ee      	b.n	8003fc2 <__swhatbuf_r+0x1e>
 8003fe4:	2340      	movs	r3, #64	; 0x40
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	b016      	add	sp, #88	; 0x58
 8003fec:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ff0 <__smakebuf_r>:
 8003ff0:	898b      	ldrh	r3, [r1, #12]
 8003ff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ff4:	079d      	lsls	r5, r3, #30
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	d507      	bpl.n	800400c <__smakebuf_r+0x1c>
 8003ffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	6123      	str	r3, [r4, #16]
 8004004:	2301      	movs	r3, #1
 8004006:	6163      	str	r3, [r4, #20]
 8004008:	b002      	add	sp, #8
 800400a:	bd70      	pop	{r4, r5, r6, pc}
 800400c:	466a      	mov	r2, sp
 800400e:	ab01      	add	r3, sp, #4
 8004010:	f7ff ffc8 	bl	8003fa4 <__swhatbuf_r>
 8004014:	9900      	ldr	r1, [sp, #0]
 8004016:	4605      	mov	r5, r0
 8004018:	4630      	mov	r0, r6
 800401a:	f7ff fa5b 	bl	80034d4 <_malloc_r>
 800401e:	b948      	cbnz	r0, 8004034 <__smakebuf_r+0x44>
 8004020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004024:	059a      	lsls	r2, r3, #22
 8004026:	d4ef      	bmi.n	8004008 <__smakebuf_r+0x18>
 8004028:	f023 0303 	bic.w	r3, r3, #3
 800402c:	f043 0302 	orr.w	r3, r3, #2
 8004030:	81a3      	strh	r3, [r4, #12]
 8004032:	e7e3      	b.n	8003ffc <__smakebuf_r+0xc>
 8004034:	4b0d      	ldr	r3, [pc, #52]	; (800406c <__smakebuf_r+0x7c>)
 8004036:	62b3      	str	r3, [r6, #40]	; 0x28
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	6020      	str	r0, [r4, #0]
 800403c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004040:	81a3      	strh	r3, [r4, #12]
 8004042:	9b00      	ldr	r3, [sp, #0]
 8004044:	6120      	str	r0, [r4, #16]
 8004046:	6163      	str	r3, [r4, #20]
 8004048:	9b01      	ldr	r3, [sp, #4]
 800404a:	b15b      	cbz	r3, 8004064 <__smakebuf_r+0x74>
 800404c:	4630      	mov	r0, r6
 800404e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004052:	f000 f893 	bl	800417c <_isatty_r>
 8004056:	b128      	cbz	r0, 8004064 <__smakebuf_r+0x74>
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	81a3      	strh	r3, [r4, #12]
 8004064:	89a0      	ldrh	r0, [r4, #12]
 8004066:	4305      	orrs	r5, r0
 8004068:	81a5      	strh	r5, [r4, #12]
 800406a:	e7cd      	b.n	8004008 <__smakebuf_r+0x18>
 800406c:	080032ed 	.word	0x080032ed

08004070 <memchr>:
 8004070:	4603      	mov	r3, r0
 8004072:	b510      	push	{r4, lr}
 8004074:	b2c9      	uxtb	r1, r1
 8004076:	4402      	add	r2, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	4618      	mov	r0, r3
 800407c:	d101      	bne.n	8004082 <memchr+0x12>
 800407e:	2000      	movs	r0, #0
 8004080:	e003      	b.n	800408a <memchr+0x1a>
 8004082:	7804      	ldrb	r4, [r0, #0]
 8004084:	3301      	adds	r3, #1
 8004086:	428c      	cmp	r4, r1
 8004088:	d1f6      	bne.n	8004078 <memchr+0x8>
 800408a:	bd10      	pop	{r4, pc}

0800408c <__malloc_lock>:
 800408c:	4801      	ldr	r0, [pc, #4]	; (8004094 <__malloc_lock+0x8>)
 800408e:	f7ff b9ff 	b.w	8003490 <__retarget_lock_acquire_recursive>
 8004092:	bf00      	nop
 8004094:	20000178 	.word	0x20000178

08004098 <__malloc_unlock>:
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <__malloc_unlock+0x8>)
 800409a:	f7ff b9fa 	b.w	8003492 <__retarget_lock_release_recursive>
 800409e:	bf00      	nop
 80040a0:	20000178 	.word	0x20000178

080040a4 <_free_r>:
 80040a4:	b538      	push	{r3, r4, r5, lr}
 80040a6:	4605      	mov	r5, r0
 80040a8:	2900      	cmp	r1, #0
 80040aa:	d040      	beq.n	800412e <_free_r+0x8a>
 80040ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040b0:	1f0c      	subs	r4, r1, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bfb8      	it	lt
 80040b6:	18e4      	addlt	r4, r4, r3
 80040b8:	f7ff ffe8 	bl	800408c <__malloc_lock>
 80040bc:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <_free_r+0x8c>)
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	b933      	cbnz	r3, 80040d0 <_free_r+0x2c>
 80040c2:	6063      	str	r3, [r4, #4]
 80040c4:	6014      	str	r4, [r2, #0]
 80040c6:	4628      	mov	r0, r5
 80040c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040cc:	f7ff bfe4 	b.w	8004098 <__malloc_unlock>
 80040d0:	42a3      	cmp	r3, r4
 80040d2:	d908      	bls.n	80040e6 <_free_r+0x42>
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	1821      	adds	r1, r4, r0
 80040d8:	428b      	cmp	r3, r1
 80040da:	bf01      	itttt	eq
 80040dc:	6819      	ldreq	r1, [r3, #0]
 80040de:	685b      	ldreq	r3, [r3, #4]
 80040e0:	1809      	addeq	r1, r1, r0
 80040e2:	6021      	streq	r1, [r4, #0]
 80040e4:	e7ed      	b.n	80040c2 <_free_r+0x1e>
 80040e6:	461a      	mov	r2, r3
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	b10b      	cbz	r3, 80040f0 <_free_r+0x4c>
 80040ec:	42a3      	cmp	r3, r4
 80040ee:	d9fa      	bls.n	80040e6 <_free_r+0x42>
 80040f0:	6811      	ldr	r1, [r2, #0]
 80040f2:	1850      	adds	r0, r2, r1
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d10b      	bne.n	8004110 <_free_r+0x6c>
 80040f8:	6820      	ldr	r0, [r4, #0]
 80040fa:	4401      	add	r1, r0
 80040fc:	1850      	adds	r0, r2, r1
 80040fe:	4283      	cmp	r3, r0
 8004100:	6011      	str	r1, [r2, #0]
 8004102:	d1e0      	bne.n	80040c6 <_free_r+0x22>
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4401      	add	r1, r0
 800410a:	6011      	str	r1, [r2, #0]
 800410c:	6053      	str	r3, [r2, #4]
 800410e:	e7da      	b.n	80040c6 <_free_r+0x22>
 8004110:	d902      	bls.n	8004118 <_free_r+0x74>
 8004112:	230c      	movs	r3, #12
 8004114:	602b      	str	r3, [r5, #0]
 8004116:	e7d6      	b.n	80040c6 <_free_r+0x22>
 8004118:	6820      	ldr	r0, [r4, #0]
 800411a:	1821      	adds	r1, r4, r0
 800411c:	428b      	cmp	r3, r1
 800411e:	bf01      	itttt	eq
 8004120:	6819      	ldreq	r1, [r3, #0]
 8004122:	685b      	ldreq	r3, [r3, #4]
 8004124:	1809      	addeq	r1, r1, r0
 8004126:	6021      	streq	r1, [r4, #0]
 8004128:	6063      	str	r3, [r4, #4]
 800412a:	6054      	str	r4, [r2, #4]
 800412c:	e7cb      	b.n	80040c6 <_free_r+0x22>
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	2000017c 	.word	0x2000017c

08004134 <_read_r>:
 8004134:	b538      	push	{r3, r4, r5, lr}
 8004136:	4604      	mov	r4, r0
 8004138:	4608      	mov	r0, r1
 800413a:	4611      	mov	r1, r2
 800413c:	2200      	movs	r2, #0
 800413e:	4d05      	ldr	r5, [pc, #20]	; (8004154 <_read_r+0x20>)
 8004140:	602a      	str	r2, [r5, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	f7fc fbd2 	bl	80008ec <_read>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d102      	bne.n	8004152 <_read_r+0x1e>
 800414c:	682b      	ldr	r3, [r5, #0]
 800414e:	b103      	cbz	r3, 8004152 <_read_r+0x1e>
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	20000184 	.word	0x20000184

08004158 <_fstat_r>:
 8004158:	b538      	push	{r3, r4, r5, lr}
 800415a:	2300      	movs	r3, #0
 800415c:	4d06      	ldr	r5, [pc, #24]	; (8004178 <_fstat_r+0x20>)
 800415e:	4604      	mov	r4, r0
 8004160:	4608      	mov	r0, r1
 8004162:	4611      	mov	r1, r2
 8004164:	602b      	str	r3, [r5, #0]
 8004166:	f7fc fc05 	bl	8000974 <_fstat>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	d102      	bne.n	8004174 <_fstat_r+0x1c>
 800416e:	682b      	ldr	r3, [r5, #0]
 8004170:	b103      	cbz	r3, 8004174 <_fstat_r+0x1c>
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	bd38      	pop	{r3, r4, r5, pc}
 8004176:	bf00      	nop
 8004178:	20000184 	.word	0x20000184

0800417c <_isatty_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	2300      	movs	r3, #0
 8004180:	4d05      	ldr	r5, [pc, #20]	; (8004198 <_isatty_r+0x1c>)
 8004182:	4604      	mov	r4, r0
 8004184:	4608      	mov	r0, r1
 8004186:	602b      	str	r3, [r5, #0]
 8004188:	f7fc fc03 	bl	8000992 <_isatty>
 800418c:	1c43      	adds	r3, r0, #1
 800418e:	d102      	bne.n	8004196 <_isatty_r+0x1a>
 8004190:	682b      	ldr	r3, [r5, #0]
 8004192:	b103      	cbz	r3, 8004196 <_isatty_r+0x1a>
 8004194:	6023      	str	r3, [r4, #0]
 8004196:	bd38      	pop	{r3, r4, r5, pc}
 8004198:	20000184 	.word	0x20000184

0800419c <_init>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr

080041a8 <_fini>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr
