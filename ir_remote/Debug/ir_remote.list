
ir_remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002f3c  08002f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003014  08003014  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003014  08003014  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003014  08003014  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003014  08003014  00013014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003018  08003018  00013018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800301c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  0800308c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  0800308c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e6d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001995  00000000  00000000  00029f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ec  00000000  00000000  0002d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcc6  00000000  00000000  00045424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7c7  00000000  00000000  000510ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc8b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000dc904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f24 	.word	0x08002f24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f24 	.word	0x08002f24

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f001 fdb0 	bl	8001cc2 <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000d4 	.word	0x200000d4

08000170 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	uint32_t time;
	if(GPIO_Pin == GPIO_PIN_1) {
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b02      	cmp	r3, #2
 800017e:	d16f      	bne.n	8000260 <HAL_GPIO_EXTI_Callback+0xf0>
		if(Is_Start == 0) {
 8000180:	4b39      	ldr	r3, [pc, #228]	; (8000268 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d107      	bne.n	8000198 <HAL_GPIO_EXTI_Callback+0x28>
			TIM2->CNT = 0; //__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800018c:	2200      	movs	r2, #0
 800018e:	625a      	str	r2, [r3, #36]	; 0x24
			Is_Start = 1;
 8000190:	4b35      	ldr	r3, [pc, #212]	; (8000268 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000192:	2201      	movs	r2, #1
 8000194:	601a      	str	r2, [r3, #0]
					bitCount++;
				}
			}
		}
	}
}
 8000196:	e063      	b.n	8000260 <HAL_GPIO_EXTI_Callback+0xf0>
			time = TIM2->CNT; //time = __HAL_TIM_GET_COUNTER(&htim2);
 8000198:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800019c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800019e:	60fb      	str	r3, [r7, #12]
			TIM2->CNT = 0; //__HAL_TIM_SET_COUNTER(&htim2, 0);
 80001a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001a4:	2200      	movs	r2, #0
 80001a6:	625a      	str	r2, [r3, #36]	; 0x24
			if(bitCount == 32) {
 80001a8:	4b30      	ldr	r3, [pc, #192]	; (800026c <HAL_GPIO_EXTI_Callback+0xfc>)
 80001aa:	881b      	ldrh	r3, [r3, #0]
 80001ac:	b29b      	uxth	r3, r3
 80001ae:	2b20      	cmp	r3, #32
 80001b0:	d125      	bne.n	80001fe <HAL_GPIO_EXTI_Callback+0x8e>
				if((time > 12500) && (time < 14500)) { //12500 < time < 14500
 80001b2:	68fb      	ldr	r3, [r7, #12]
 80001b4:	f243 02d4 	movw	r2, #12500	; 0x30d4
 80001b8:	4293      	cmp	r3, r2
 80001ba:	d90b      	bls.n	80001d4 <HAL_GPIO_EXTI_Callback+0x64>
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	f643 02a3 	movw	r2, #14499	; 0x38a3
 80001c2:	4293      	cmp	r3, r2
 80001c4:	d806      	bhi.n	80001d4 <HAL_GPIO_EXTI_Callback+0x64>
					receivedData = 0;
 80001c6:	4b2a      	ldr	r3, [pc, #168]	; (8000270 <HAL_GPIO_EXTI_Callback+0x100>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
					bitCount = 0;
 80001cc:	4b27      	ldr	r3, [pc, #156]	; (800026c <HAL_GPIO_EXTI_Callback+0xfc>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	801a      	strh	r2, [r3, #0]
 80001d2:	e045      	b.n	8000260 <HAL_GPIO_EXTI_Callback+0xf0>
				else if((time > 10500) && (time < 12000)) { //10500 < time < 12000
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	f642 1204 	movw	r2, #10500	; 0x2904
 80001da:	4293      	cmp	r3, r2
 80001dc:	d908      	bls.n	80001f0 <HAL_GPIO_EXTI_Callback+0x80>
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d803      	bhi.n	80001f0 <HAL_GPIO_EXTI_Callback+0x80>
					Is_Start = 0;
 80001e8:	4b1f      	ldr	r3, [pc, #124]	; (8000268 <HAL_GPIO_EXTI_Callback+0xf8>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	e037      	b.n	8000260 <HAL_GPIO_EXTI_Callback+0xf0>
					bitCount = 32;
 80001f0:	4b1e      	ldr	r3, [pc, #120]	; (800026c <HAL_GPIO_EXTI_Callback+0xfc>)
 80001f2:	2220      	movs	r2, #32
 80001f4:	801a      	strh	r2, [r3, #0]
					Is_Start = 0;
 80001f6:	4b1c      	ldr	r3, [pc, #112]	; (8000268 <HAL_GPIO_EXTI_Callback+0xf8>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	601a      	str	r2, [r3, #0]
}
 80001fc:	e030      	b.n	8000260 <HAL_GPIO_EXTI_Callback+0xf0>
				if(time > 4000) {
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000204:	d906      	bls.n	8000214 <HAL_GPIO_EXTI_Callback+0xa4>
					bitCount = 32;
 8000206:	4b19      	ldr	r3, [pc, #100]	; (800026c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000208:	2220      	movs	r2, #32
 800020a:	801a      	strh	r2, [r3, #0]
					Is_Start = 0;
 800020c:	4b16      	ldr	r3, [pc, #88]	; (8000268 <HAL_GPIO_EXTI_Callback+0xf8>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
}
 8000212:	e025      	b.n	8000260 <HAL_GPIO_EXTI_Callback+0xf0>
					if(time > 1600)
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800021a:	d906      	bls.n	800022a <HAL_GPIO_EXTI_Callback+0xba>
						receivedData = (receivedData << 1) + 1;
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <HAL_GPIO_EXTI_Callback+0x100>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	3301      	adds	r3, #1
 8000224:	4a12      	ldr	r2, [pc, #72]	; (8000270 <HAL_GPIO_EXTI_Callback+0x100>)
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	e004      	b.n	8000234 <HAL_GPIO_EXTI_Callback+0xc4>
						receivedData = (receivedData << 1);
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <HAL_GPIO_EXTI_Callback+0x100>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	4a0f      	ldr	r2, [pc, #60]	; (8000270 <HAL_GPIO_EXTI_Callback+0x100>)
 8000232:	6013      	str	r3, [r2, #0]
					if(bitCount == 31) {
 8000234:	4b0d      	ldr	r3, [pc, #52]	; (800026c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000236:	881b      	ldrh	r3, [r3, #0]
 8000238:	b29b      	uxth	r3, r3
 800023a:	2b1f      	cmp	r3, #31
 800023c:	d108      	bne.n	8000250 <HAL_GPIO_EXTI_Callback+0xe0>
						printf("receivedData : 0x%0lx\n", receivedData);
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <HAL_GPIO_EXTI_Callback+0x100>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4619      	mov	r1, r3
 8000244:	480b      	ldr	r0, [pc, #44]	; (8000274 <HAL_GPIO_EXTI_Callback+0x104>)
 8000246:	f001 fed9 	bl	8001ffc <iprintf>
						Is_Start = 0;
 800024a:	4b07      	ldr	r3, [pc, #28]	; (8000268 <HAL_GPIO_EXTI_Callback+0xf8>)
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
					bitCount++;
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	b29b      	uxth	r3, r3
 8000256:	3301      	adds	r3, #1
 8000258:	b29a      	uxth	r2, r3
 800025a:	4b04      	ldr	r3, [pc, #16]	; (800026c <HAL_GPIO_EXTI_Callback+0xfc>)
 800025c:	801a      	strh	r2, [r3, #0]
}
 800025e:	e7ff      	b.n	8000260 <HAL_GPIO_EXTI_Callback+0xf0>
 8000260:	bf00      	nop
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000120 	.word	0x20000120
 800026c:	20000118 	.word	0x20000118
 8000270:	2000011c 	.word	0x2000011c
 8000274:	08002f3c 	.word	0x08002f3c

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 fae2 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f812 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f8c8 	bl	8000418 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000288:	f000 f89c 	bl	80003c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800028c:	f000 f84e 	bl	800032c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  bitCount = 32;
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <main+0x28>)
 8000292:	2220      	movs	r2, #32
 8000294:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <main+0x2c>)
 8000298:	f001 fa62 	bl	8001760 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x24>
 800029e:	bf00      	nop
 80002a0:	20000118 	.word	0x20000118
 80002a4:	2000008c 	.word	0x2000008c

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b090      	sub	sp, #64	; 0x40
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fe98 	bl	8001fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ca:	2302      	movs	r3, #2
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	2310      	movs	r3, #16
 80002d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002da:	2300      	movs	r3, #0
 80002dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002de:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fdcf 	bl	8000e8c <HAL_RCC_OscConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002f4:	f000 f912 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	230f      	movs	r3, #15
 80002fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	2302      	movs	r3, #2
 80002fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2102      	movs	r1, #2
 8000312:	4618      	mov	r0, r3
 8000314:	f001 f83c 	bl	8001390 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800031e:	f000 f8fd 	bl	800051c <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3740      	adds	r7, #64	; 0x40
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b086      	sub	sp, #24
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000332:	f107 0308 	add.w	r3, r7, #8
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000340:	463b      	mov	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <MX_TIM2_Init+0x94>)
 800034a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000350:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000352:	223f      	movs	r2, #63	; 0x3f
 8000354:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000356:	4b1a      	ldr	r3, [pc, #104]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800035c:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <MX_TIM2_Init+0x94>)
 800035e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000362:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000364:	4b16      	ldr	r3, [pc, #88]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800036a:	4b15      	ldr	r3, [pc, #84]	; (80003c0 <MX_TIM2_Init+0x94>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000370:	4813      	ldr	r0, [pc, #76]	; (80003c0 <MX_TIM2_Init+0x94>)
 8000372:	f001 f9a5 	bl	80016c0 <HAL_TIM_Base_Init>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800037c:	f000 f8ce 	bl	800051c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	4619      	mov	r1, r3
 800038c:	480c      	ldr	r0, [pc, #48]	; (80003c0 <MX_TIM2_Init+0x94>)
 800038e:	f001 fa31 	bl	80017f4 <HAL_TIM_ConfigClockSource>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000398:	f000 f8c0 	bl	800051c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800039c:	2300      	movs	r3, #0
 800039e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a0:	2300      	movs	r3, #0
 80003a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a4:	463b      	mov	r3, r7
 80003a6:	4619      	mov	r1, r3
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <MX_TIM2_Init+0x94>)
 80003aa:	f001 fbdf 	bl	8001b6c <HAL_TIMEx_MasterConfigSynchronization>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003b4:	f000 f8b2 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	3718      	adds	r7, #24
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000008c 	.word	0x2000008c

080003c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <MX_USART2_UART_Init+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003ea:	220c      	movs	r2, #12
 80003ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_USART2_UART_Init+0x4c>)
 80003fc:	f001 fc14 	bl	8001c28 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000406:	f000 f889 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	200000d4 	.word	0x200000d4
 8000414:	40004400 	.word	0x40004400

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042c:	4b37      	ldr	r3, [pc, #220]	; (800050c <MX_GPIO_Init+0xf4>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a36      	ldr	r2, [pc, #216]	; (800050c <MX_GPIO_Init+0xf4>)
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b34      	ldr	r3, [pc, #208]	; (800050c <MX_GPIO_Init+0xf4>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0310 	and.w	r3, r3, #16
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	4b31      	ldr	r3, [pc, #196]	; (800050c <MX_GPIO_Init+0xf4>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a30      	ldr	r2, [pc, #192]	; (800050c <MX_GPIO_Init+0xf4>)
 800044a:	f043 0320 	orr.w	r3, r3, #32
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b2e      	ldr	r3, [pc, #184]	; (800050c <MX_GPIO_Init+0xf4>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0320 	and.w	r3, r3, #32
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045c:	4b2b      	ldr	r3, [pc, #172]	; (800050c <MX_GPIO_Init+0xf4>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a2a      	ldr	r2, [pc, #168]	; (800050c <MX_GPIO_Init+0xf4>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b28      	ldr	r3, [pc, #160]	; (800050c <MX_GPIO_Init+0xf4>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0304 	and.w	r3, r3, #4
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000474:	4b25      	ldr	r3, [pc, #148]	; (800050c <MX_GPIO_Init+0xf4>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a24      	ldr	r2, [pc, #144]	; (800050c <MX_GPIO_Init+0xf4>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b22      	ldr	r3, [pc, #136]	; (800050c <MX_GPIO_Init+0xf4>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0308 	and.w	r3, r3, #8
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	2120      	movs	r1, #32
 8000490:	481f      	ldr	r0, [pc, #124]	; (8000510 <MX_GPIO_Init+0xf8>)
 8000492:	f000 fccb 	bl	8000e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000496:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800049a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800049c:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <MX_GPIO_Init+0xfc>)
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	481b      	ldr	r0, [pc, #108]	; (8000518 <MX_GPIO_Init+0x100>)
 80004ac:	f000 fb3a 	bl	8000b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004b0:	2302      	movs	r3, #2
 80004b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <MX_GPIO_Init+0xfc>)
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	4813      	ldr	r0, [pc, #76]	; (8000510 <MX_GPIO_Init+0xf8>)
 80004c4:	f000 fb2e 	bl	8000b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004c8:	2320      	movs	r3, #32
 80004ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004cc:	2301      	movs	r3, #1
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	2302      	movs	r3, #2
 80004d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	480c      	ldr	r0, [pc, #48]	; (8000510 <MX_GPIO_Init+0xf8>)
 80004e0:	f000 fb20 	bl	8000b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	2007      	movs	r0, #7
 80004ea:	f000 fae4 	bl	8000ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004ee:	2007      	movs	r0, #7
 80004f0:	f000 fafd 	bl	8000aee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2028      	movs	r0, #40	; 0x28
 80004fa:	f000 fadc 	bl	8000ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004fe:	2028      	movs	r0, #40	; 0x28
 8000500:	f000 faf5 	bl	8000aee <HAL_NVIC_EnableIRQ>

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	40010800 	.word	0x40010800
 8000514:	10110000 	.word	0x10110000
 8000518:	40011000 	.word	0x40011000

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a14      	ldr	r2, [pc, #80]	; (8000584 <HAL_MspInit+0x5c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_MspInit+0x5c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a0e      	ldr	r2, [pc, #56]	; (8000584 <HAL_MspInit+0x5c>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <HAL_MspInit+0x5c>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055e:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HAL_MspInit+0x60>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	4a04      	ldr	r2, [pc, #16]	; (8000588 <HAL_MspInit+0x60>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057a:	bf00      	nop
 800057c:	3714      	adds	r7, #20
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	40010000 	.word	0x40010000

0800058c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800059c:	d10b      	bne.n	80005b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_TIM_Base_MspInit+0x34>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_TIM_Base_MspInit+0x34>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_TIM_Base_MspInit+0x34>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a15      	ldr	r2, [pc, #84]	; (8000634 <HAL_UART_MspInit+0x70>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d123      	bne.n	800062c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <HAL_UART_MspInit+0x74>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	4a13      	ldr	r2, [pc, #76]	; (8000638 <HAL_UART_MspInit+0x74>)
 80005ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ee:	61d3      	str	r3, [r2, #28]
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <HAL_UART_MspInit+0x74>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fc:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <HAL_UART_MspInit+0x74>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <HAL_UART_MspInit+0x74>)
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_UART_MspInit+0x74>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000614:	230c      	movs	r3, #12
 8000616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2302      	movs	r3, #2
 800061e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <HAL_UART_MspInit+0x78>)
 8000628:	f000 fa7c 	bl	8000b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40004400 	.word	0x40004400
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <NMI_Handler+0x4>

08000646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <HardFault_Handler+0x4>

0800064c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <MemManage_Handler+0x4>

08000652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <UsageFault_Handler+0x4>

0800065e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000686:	f000 f923 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}

0800068e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800068e:	b580      	push	{r7, lr}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000692:	2002      	movs	r0, #2
 8000694:	f000 fbe2 	bl	8000e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006a4:	f000 fbda 	bl	8000e5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	e00a      	b.n	80006d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006be:	f3af 8000 	nop.w
 80006c2:	4601      	mov	r1, r0
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	60ba      	str	r2, [r7, #8]
 80006ca:	b2ca      	uxtb	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbf0      	blt.n	80006be <_read+0x12>
	}

return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	e009      	b.n	800070c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	60ba      	str	r2, [r7, #8]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fd23 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3301      	adds	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	429a      	cmp	r2, r3
 8000712:	dbf1      	blt.n	80006f8 <_write+0x12>
	}
	return len;
 8000714:	687b      	ldr	r3, [r7, #4]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <_close>:

int _close(int file)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
	return -1;
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000744:	605a      	str	r2, [r3, #4]
	return 0;
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <_isatty>:

int _isatty(int file)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	return 1;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000766:	b480      	push	{r7}
 8000768:	b085      	sub	sp, #20
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
	return 0;
 8000772:	2300      	movs	r3, #0
}
 8000774:	4618      	mov	r0, r3
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
	...

08000780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <_sbrk+0x5c>)
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_sbrk+0x60>)
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <_sbrk+0x64>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <_sbrk+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b0:	f001 fbf2 	bl	8001f98 <__errno>
 80007b4:	4603      	mov	r3, r0
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	e009      	b.n	80007d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <_sbrk+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20005000 	.word	0x20005000
 80007e0:	00000400 	.word	0x00000400
 80007e4:	20000124 	.word	0x20000124
 80007e8:	20000140 	.word	0x20000140

080007ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800081e:	f7ff ffe5 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f001 fbbf 	bl	8001fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fd27 	bl	8000278 <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000834:	0800301c 	.word	0x0800301c
  ldr r2, =_sbss
 8000838:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800083c:	2000013c 	.word	0x2000013c

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_Init+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <HAL_Init+0x28>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f923 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	2000      	movs	r0, #0
 800085c:	f000 f808 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fe62 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_InitTick+0x54>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x58>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000886:	fbb3 f3f1 	udiv	r3, r3, r1
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f93b 	bl	8000b0a <HAL_SYSTICK_Config>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e00e      	b.n	80008bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d80a      	bhi.n	80008ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f000 f903 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <HAL_InitTick+0x5c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x1c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x20>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a03      	ldr	r2, [pc, #12]	; (80008f0 <HAL_IncTick+0x20>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000128 	.word	0x20000128

080008f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return uwTick;
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <HAL_GetTick+0x10>)
 80008fa:	681b      	ldr	r3, [r3, #0]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	20000128 	.word	0x20000128

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	db0b      	blt.n	8000996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f003 021f 	and.w	r2, r3, #31
 8000984:	4906      	ldr	r1, [pc, #24]	; (80009a0 <__NVIC_EnableIRQ+0x34>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	095b      	lsrs	r3, r3, #5
 800098c:	2001      	movs	r0, #1
 800098e:	fa00 f202 	lsl.w	r2, r0, r2
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	; 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff90 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff2d 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff42 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff90 	bl	80009f8 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5f 	bl	80009a4 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff35 	bl	800096c <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffa2 	bl	8000a5c <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b08b      	sub	sp, #44	; 0x2c
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	e169      	b.n	8000e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	f040 8158 	bne.w	8000e06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	4a9a      	ldr	r2, [pc, #616]	; (8000dc4 <HAL_GPIO_Init+0x2a0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d05e      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b60:	4a98      	ldr	r2, [pc, #608]	; (8000dc4 <HAL_GPIO_Init+0x2a0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d875      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b66:	4a98      	ldr	r2, [pc, #608]	; (8000dc8 <HAL_GPIO_Init+0x2a4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d058      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b6c:	4a96      	ldr	r2, [pc, #600]	; (8000dc8 <HAL_GPIO_Init+0x2a4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d86f      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b72:	4a96      	ldr	r2, [pc, #600]	; (8000dcc <HAL_GPIO_Init+0x2a8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d052      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b78:	4a94      	ldr	r2, [pc, #592]	; (8000dcc <HAL_GPIO_Init+0x2a8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d869      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b7e:	4a94      	ldr	r2, [pc, #592]	; (8000dd0 <HAL_GPIO_Init+0x2ac>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d04c      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b84:	4a92      	ldr	r2, [pc, #584]	; (8000dd0 <HAL_GPIO_Init+0x2ac>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d863      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b8a:	4a92      	ldr	r2, [pc, #584]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d046      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
 8000b90:	4a90      	ldr	r2, [pc, #576]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d85d      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b96:	2b12      	cmp	r3, #18
 8000b98:	d82a      	bhi.n	8000bf0 <HAL_GPIO_Init+0xcc>
 8000b9a:	2b12      	cmp	r3, #18
 8000b9c:	d859      	bhi.n	8000c52 <HAL_GPIO_Init+0x12e>
 8000b9e:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <HAL_GPIO_Init+0x80>)
 8000ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba4:	08000c1f 	.word	0x08000c1f
 8000ba8:	08000bf9 	.word	0x08000bf9
 8000bac:	08000c0b 	.word	0x08000c0b
 8000bb0:	08000c4d 	.word	0x08000c4d
 8000bb4:	08000c53 	.word	0x08000c53
 8000bb8:	08000c53 	.word	0x08000c53
 8000bbc:	08000c53 	.word	0x08000c53
 8000bc0:	08000c53 	.word	0x08000c53
 8000bc4:	08000c53 	.word	0x08000c53
 8000bc8:	08000c53 	.word	0x08000c53
 8000bcc:	08000c53 	.word	0x08000c53
 8000bd0:	08000c53 	.word	0x08000c53
 8000bd4:	08000c53 	.word	0x08000c53
 8000bd8:	08000c53 	.word	0x08000c53
 8000bdc:	08000c53 	.word	0x08000c53
 8000be0:	08000c53 	.word	0x08000c53
 8000be4:	08000c53 	.word	0x08000c53
 8000be8:	08000c01 	.word	0x08000c01
 8000bec:	08000c15 	.word	0x08000c15
 8000bf0:	4a79      	ldr	r2, [pc, #484]	; (8000dd8 <HAL_GPIO_Init+0x2b4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d013      	beq.n	8000c1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bf6:	e02c      	b.n	8000c52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	623b      	str	r3, [r7, #32]
          break;
 8000bfe:	e029      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	3304      	adds	r3, #4
 8000c06:	623b      	str	r3, [r7, #32]
          break;
 8000c08:	e024      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	3308      	adds	r3, #8
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e01f      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	330c      	adds	r3, #12
 8000c1a:	623b      	str	r3, [r7, #32]
          break;
 8000c1c:	e01a      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c26:	2304      	movs	r3, #4
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e013      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d105      	bne.n	8000c40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c34:	2308      	movs	r3, #8
 8000c36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	611a      	str	r2, [r3, #16]
          break;
 8000c3e:	e009      	b.n	8000c54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c40:	2308      	movs	r3, #8
 8000c42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69fa      	ldr	r2, [r7, #28]
 8000c48:	615a      	str	r2, [r3, #20]
          break;
 8000c4a:	e003      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	e000      	b.n	8000c54 <HAL_GPIO_Init+0x130>
          break;
 8000c52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d801      	bhi.n	8000c5e <HAL_GPIO_Init+0x13a>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	e001      	b.n	8000c62 <HAL_GPIO_Init+0x13e>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3304      	adds	r3, #4
 8000c62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2bff      	cmp	r3, #255	; 0xff
 8000c68:	d802      	bhi.n	8000c70 <HAL_GPIO_Init+0x14c>
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0x152>
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	3b08      	subs	r3, #8
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	401a      	ands	r2, r3
 8000c88:	6a39      	ldr	r1, [r7, #32]
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c90:	431a      	orrs	r2, r3
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 80b1 	beq.w	8000e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca4:	4b4d      	ldr	r3, [pc, #308]	; (8000ddc <HAL_GPIO_Init+0x2b8>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a4c      	ldr	r2, [pc, #304]	; (8000ddc <HAL_GPIO_Init+0x2b8>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b4a      	ldr	r3, [pc, #296]	; (8000ddc <HAL_GPIO_Init+0x2b8>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cbc:	4a48      	ldr	r2, [pc, #288]	; (8000de0 <HAL_GPIO_Init+0x2bc>)
 8000cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc0:	089b      	lsrs	r3, r3, #2
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	220f      	movs	r2, #15
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a40      	ldr	r2, [pc, #256]	; (8000de4 <HAL_GPIO_Init+0x2c0>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d013      	beq.n	8000d10 <HAL_GPIO_Init+0x1ec>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a3f      	ldr	r2, [pc, #252]	; (8000de8 <HAL_GPIO_Init+0x2c4>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d00d      	beq.n	8000d0c <HAL_GPIO_Init+0x1e8>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a3e      	ldr	r2, [pc, #248]	; (8000dec <HAL_GPIO_Init+0x2c8>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d007      	beq.n	8000d08 <HAL_GPIO_Init+0x1e4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a3d      	ldr	r2, [pc, #244]	; (8000df0 <HAL_GPIO_Init+0x2cc>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d101      	bne.n	8000d04 <HAL_GPIO_Init+0x1e0>
 8000d00:	2303      	movs	r3, #3
 8000d02:	e006      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d04:	2304      	movs	r3, #4
 8000d06:	e004      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e002      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e000      	b.n	8000d12 <HAL_GPIO_Init+0x1ee>
 8000d10:	2300      	movs	r3, #0
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	f002 0203 	and.w	r2, r2, #3
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	4093      	lsls	r3, r2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d22:	492f      	ldr	r1, [pc, #188]	; (8000de0 <HAL_GPIO_Init+0x2bc>)
 8000d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	3302      	adds	r3, #2
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	492c      	ldr	r1, [pc, #176]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4928      	ldr	r1, [pc, #160]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d54:	4013      	ands	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d006      	beq.n	8000d72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	4922      	ldr	r1, [pc, #136]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	604b      	str	r3, [r1, #4]
 8000d70:	e006      	b.n	8000d80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	491e      	ldr	r1, [pc, #120]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d006      	beq.n	8000d9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	4918      	ldr	r1, [pc, #96]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	608b      	str	r3, [r1, #8]
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d9a:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4914      	ldr	r1, [pc, #80]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000da4:	4013      	ands	r3, r2
 8000da6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d021      	beq.n	8000df8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	490e      	ldr	r1, [pc, #56]	; (8000df4 <HAL_GPIO_Init+0x2d0>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60cb      	str	r3, [r1, #12]
 8000dc0:	e021      	b.n	8000e06 <HAL_GPIO_Init+0x2e2>
 8000dc2:	bf00      	nop
 8000dc4:	10320000 	.word	0x10320000
 8000dc8:	10310000 	.word	0x10310000
 8000dcc:	10220000 	.word	0x10220000
 8000dd0:	10210000 	.word	0x10210000
 8000dd4:	10120000 	.word	0x10120000
 8000dd8:	10110000 	.word	0x10110000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40010000 	.word	0x40010000
 8000de4:	40010800 	.word	0x40010800
 8000de8:	40010c00 	.word	0x40010c00
 8000dec:	40011000 	.word	0x40011000
 8000df0:	40011400 	.word	0x40011400
 8000df4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	4909      	ldr	r1, [pc, #36]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000e02:	4013      	ands	r3, r2
 8000e04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	3301      	adds	r3, #1
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	fa22 f303 	lsr.w	r3, r2, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f47f ae8e 	bne.w	8000b38 <HAL_GPIO_Init+0x14>
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	372c      	adds	r7, #44	; 0x2c
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40010400 	.word	0x40010400

08000e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e3c:	787b      	ldrb	r3, [r7, #1]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e42:	887a      	ldrh	r2, [r7, #2]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e48:	e003      	b.n	8000e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	041a      	lsls	r2, r3, #16
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	611a      	str	r2, [r3, #16]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e68:	695a      	ldr	r2, [r3, #20]
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d006      	beq.n	8000e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff f978 	bl	8000170 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40010400 	.word	0x40010400

08000e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e272      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 8087 	beq.w	8000fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eac:	4b92      	ldr	r3, [pc, #584]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d00c      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb8:	4b8f      	ldr	r3, [pc, #572]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d112      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
 8000ec4:	4b8c      	ldr	r3, [pc, #560]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed0:	d10b      	bne.n	8000eea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed2:	4b89      	ldr	r3, [pc, #548]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d06c      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d168      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e24c      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef2:	d106      	bne.n	8000f02 <HAL_RCC_OscConfig+0x76>
 8000ef4:	4b80      	ldr	r3, [pc, #512]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a7f      	ldr	r2, [pc, #508]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	e02e      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x98>
 8000f0a:	4b7b      	ldr	r3, [pc, #492]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a7a      	ldr	r2, [pc, #488]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f14:	6013      	str	r3, [r2, #0]
 8000f16:	4b78      	ldr	r3, [pc, #480]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a77      	ldr	r2, [pc, #476]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e01d      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f2c:	d10c      	bne.n	8000f48 <HAL_RCC_OscConfig+0xbc>
 8000f2e:	4b72      	ldr	r3, [pc, #456]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a71      	ldr	r2, [pc, #452]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6e      	ldr	r2, [pc, #440]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	e00b      	b.n	8000f60 <HAL_RCC_OscConfig+0xd4>
 8000f48:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a6a      	ldr	r2, [pc, #424]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a67      	ldr	r2, [pc, #412]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d013      	beq.n	8000f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f68:	f7ff fcc4 	bl	80008f4 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f70:	f7ff fcc0 	bl	80008f4 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b64      	cmp	r3, #100	; 0x64
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e200      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0xe4>
 8000f8e:	e014      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f90:	f7ff fcb0 	bl	80008f4 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f98:	f7ff fcac 	bl	80008f4 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b64      	cmp	r3, #100	; 0x64
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e1ec      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000faa:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f0      	bne.n	8000f98 <HAL_RCC_OscConfig+0x10c>
 8000fb6:	e000      	b.n	8000fba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d063      	beq.n	800108e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fd2:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b08      	cmp	r3, #8
 8000fdc:	d11c      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
 8000fde:	4b46      	ldr	r3, [pc, #280]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d116      	bne.n	8001018 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fea:	4b43      	ldr	r3, [pc, #268]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d001      	beq.n	8001002 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e1c0      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001002:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4939      	ldr	r1, [pc, #228]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	e03a      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fc65 	bl	80008f4 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff fc61 	bl	80008f4 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e1a1      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001040:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	4927      	ldr	r1, [pc, #156]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
 8001060:	e015      	b.n	800108e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <HAL_RCC_OscConfig+0x270>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc44 	bl	80008f4 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001070:	f7ff fc40 	bl	80008f4 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e180      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d03a      	beq.n	8001110 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d019      	beq.n	80010d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fc24 	bl	80008f4 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b0:	f7ff fc20 	bl	80008f4 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e160      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 fad8 	bl	8001684 <RCC_Delay>
 80010d4:	e01c      	b.n	8001110 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_RCC_OscConfig+0x274>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fc0a 	bl	80008f4 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e2:	e00f      	b.n	8001104 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc06 	bl	80008f4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d908      	bls.n	8001104 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e146      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000
 80010fc:	42420000 	.word	0x42420000
 8001100:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	4b92      	ldr	r3, [pc, #584]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1e9      	bne.n	80010e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80a6 	beq.w	800126a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001122:	4b8b      	ldr	r3, [pc, #556]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10d      	bne.n	800114a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b88      	ldr	r3, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a87      	ldr	r2, [pc, #540]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b85      	ldr	r3, [pc, #532]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001146:	2301      	movs	r3, #1
 8001148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	4b82      	ldr	r3, [pc, #520]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001156:	4b7f      	ldr	r3, [pc, #508]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7e      	ldr	r2, [pc, #504]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800115c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001162:	f7ff fbc7 	bl	80008f4 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116a:	f7ff fbc3 	bl	80008f4 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b64      	cmp	r3, #100	; 0x64
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e103      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117c:	4b75      	ldr	r3, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x4c8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x312>
 8001190:	4b6f      	ldr	r3, [pc, #444]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	4a6e      	ldr	r2, [pc, #440]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6213      	str	r3, [r2, #32]
 800119c:	e02d      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x334>
 80011a6:	4b6a      	ldr	r3, [pc, #424]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4a69      	ldr	r2, [pc, #420]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	6213      	str	r3, [r2, #32]
 80011b2:	4b67      	ldr	r3, [pc, #412]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4a66      	ldr	r2, [pc, #408]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011b8:	f023 0304 	bic.w	r3, r3, #4
 80011bc:	6213      	str	r3, [r2, #32]
 80011be:	e01c      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x356>
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	4a60      	ldr	r2, [pc, #384]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6213      	str	r3, [r2, #32]
 80011d4:	4b5e      	ldr	r3, [pc, #376]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a5d      	ldr	r2, [pc, #372]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6213      	str	r3, [r2, #32]
 80011e0:	e00b      	b.n	80011fa <HAL_RCC_OscConfig+0x36e>
 80011e2:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	4a5a      	ldr	r2, [pc, #360]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	6213      	str	r3, [r2, #32]
 80011ee:	4b58      	ldr	r3, [pc, #352]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	4a57      	ldr	r2, [pc, #348]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	f023 0304 	bic.w	r3, r3, #4
 80011f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d015      	beq.n	800122e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001202:	f7ff fb77 	bl	80008f4 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001208:	e00a      	b.n	8001220 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff fb73 	bl	80008f4 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	f241 3288 	movw	r2, #5000	; 0x1388
 8001218:	4293      	cmp	r3, r2
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e0b1      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	4b4b      	ldr	r3, [pc, #300]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ee      	beq.n	800120a <HAL_RCC_OscConfig+0x37e>
 800122c:	e014      	b.n	8001258 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb61 	bl	80008f4 <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001234:	e00a      	b.n	800124c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001236:	f7ff fb5d 	bl	80008f4 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	f241 3288 	movw	r2, #5000	; 0x1388
 8001244:	4293      	cmp	r3, r2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e09b      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124c:	4b40      	ldr	r3, [pc, #256]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1ee      	bne.n	8001236 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d105      	bne.n	800126a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125e:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a3b      	ldr	r2, [pc, #236]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001268:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 8087 	beq.w	8001382 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d061      	beq.n	8001344 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d146      	bne.n	8001316 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128e:	f7ff fb31 	bl	80008f4 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001296:	f7ff fb2d 	bl	80008f4 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e06d      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a8:	4b29      	ldr	r3, [pc, #164]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f0      	bne.n	8001296 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012bc:	d108      	bne.n	80012d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012be:	4b24      	ldr	r3, [pc, #144]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4921      	ldr	r1, [pc, #132]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d0:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a19      	ldr	r1, [r3, #32]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e0:	430b      	orrs	r3, r1
 80012e2:	491b      	ldr	r1, [pc, #108]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fb01 	bl	80008f4 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fafd 	bl	80008f4 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e03d      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x46a>
 8001314:	e035      	b.n	8001382 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_RCC_OscConfig+0x4cc>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff faea 	bl	80008f4 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fae6 	bl	80008f4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e026      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x498>
 8001342:	e01e      	b.n	8001382 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e019      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
 8001350:	40021000 	.word	0x40021000
 8001354:	40007000 	.word	0x40007000
 8001358:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x500>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	429a      	cmp	r2, r3
 800136e:	d106      	bne.n	800137e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000

08001390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0d0      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d910      	bls.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 0207 	bic.w	r2, r3, #7
 80013ba:	4965      	ldr	r1, [pc, #404]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0b8      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a52      	ldr	r2, [pc, #328]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800140e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	4b50      	ldr	r3, [pc, #320]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	494d      	ldr	r1, [pc, #308]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d040      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d115      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e07f      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e073      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06b      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f023 0203 	bic.w	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4936      	ldr	r1, [pc, #216]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff fa38 	bl	80008f4 <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	e00a      	b.n	800149e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001488:	f7ff fa34 	bl	80008f4 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e053      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 020c 	and.w	r2, r3, #12
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1eb      	bne.n	8001488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d210      	bcs.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0207 	bic.w	r2, r3, #7
 80014c6:	4922      	ldr	r1, [pc, #136]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e032      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4916      	ldr	r1, [pc, #88]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	490e      	ldr	r1, [pc, #56]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151e:	f000 f821 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001522:	4602      	mov	r2, r0
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	490a      	ldr	r1, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x1c8>)
 8001530:	5ccb      	ldrb	r3, [r1, r3]
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1cc>)
 8001538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_ClockConfig+0x1d0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f996 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000
 8001554:	40021000 	.word	0x40021000
 8001558:	08002f64 	.word	0x08002f64
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004

08001564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b490      	push	{r4, r7}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <HAL_RCC_GetSysClockFreq+0xac>)
 800156c:	1d3c      	adds	r4, r7, #4
 800156e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001574:	f240 2301 	movw	r3, #513	; 0x201
 8001578:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b04      	cmp	r3, #4
 800159c:	d002      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x40>
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d003      	beq.n	80015aa <HAL_RCC_GetSysClockFreq+0x46>
 80015a2:	e02b      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015a6:	623b      	str	r3, [r7, #32]
      break;
 80015a8:	e02b      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	0c9b      	lsrs	r3, r3, #18
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3328      	adds	r3, #40	; 0x28
 80015b4:	443b      	add	r3, r7
 80015b6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015ba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d012      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	0c5b      	lsrs	r3, r3, #17
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	3328      	adds	r3, #40	; 0x28
 80015d2:	443b      	add	r3, r7
 80015d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015de:	fb03 f202 	mul.w	r2, r3, r2
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	e004      	b.n	80015f6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	4a0b      	ldr	r2, [pc, #44]	; (800161c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f0:	fb02 f303 	mul.w	r3, r2, r3
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	623b      	str	r3, [r7, #32]
      break;
 80015fa:	e002      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015fe:	623b      	str	r3, [r7, #32]
      break;
 8001600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001602:	6a3b      	ldr	r3, [r7, #32]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bc90      	pop	{r4, r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	08002f54 	.word	0x08002f54
 8001614:	40021000 	.word	0x40021000
 8001618:	007a1200 	.word	0x007a1200
 800161c:	003d0900 	.word	0x003d0900

08001620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <HAL_RCC_GetHCLKFreq+0x10>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000000 	.word	0x20000000

08001634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001638:	f7ff fff2 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 800163c:	4602      	mov	r2, r0
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	4903      	ldr	r1, [pc, #12]	; (8001658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800164a:	5ccb      	ldrb	r3, [r1, r3]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001650:	4618      	mov	r0, r3
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	08002f74 	.word	0x08002f74

0800165c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001660:	f7ff ffde 	bl	8001620 <HAL_RCC_GetHCLKFreq>
 8001664:	4602      	mov	r2, r0
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	0adb      	lsrs	r3, r3, #11
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	4903      	ldr	r1, [pc, #12]	; (8001680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001672:	5ccb      	ldrb	r3, [r1, r3]
 8001674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001678:	4618      	mov	r0, r3
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	08002f74 	.word	0x08002f74

08001684 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <RCC_Delay+0x34>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <RCC_Delay+0x38>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0a5b      	lsrs	r3, r3, #9
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016a0:	bf00      	nop
  }
  while (Delay --);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1e5a      	subs	r2, r3, #1
 80016a6:	60fa      	str	r2, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f9      	bne.n	80016a0 <RCC_Delay+0x1c>
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000000 	.word	0x20000000
 80016bc:	10624dd3 	.word	0x10624dd3

080016c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e041      	b.n	8001756 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d106      	bne.n	80016ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7fe ff50 	bl	800058c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2202      	movs	r2, #2
 80016f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3304      	adds	r3, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f000 f93c 	bl	800197c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d001      	beq.n	8001778 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <HAL_TIM_Base_Start+0x88>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00e      	beq.n	80017a8 <HAL_TIM_Base_Start+0x48>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001792:	d009      	beq.n	80017a8 <HAL_TIM_Base_Start+0x48>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_TIM_Base_Start+0x8c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d004      	beq.n	80017a8 <HAL_TIM_Base_Start+0x48>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <HAL_TIM_Base_Start+0x90>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d111      	bne.n	80017cc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d010      	beq.n	80017dc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ca:	e007      	b.n	80017dc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40000800 	.word	0x40000800

080017f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_TIM_ConfigClockSource+0x18>
 8001808:	2302      	movs	r3, #2
 800180a:	e0b3      	b.n	8001974 <HAL_TIM_ConfigClockSource+0x180>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2202      	movs	r2, #2
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800182a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001832:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001844:	d03e      	beq.n	80018c4 <HAL_TIM_ConfigClockSource+0xd0>
 8001846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800184a:	f200 8087 	bhi.w	800195c <HAL_TIM_ConfigClockSource+0x168>
 800184e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001852:	f000 8085 	beq.w	8001960 <HAL_TIM_ConfigClockSource+0x16c>
 8001856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800185a:	d87f      	bhi.n	800195c <HAL_TIM_ConfigClockSource+0x168>
 800185c:	2b70      	cmp	r3, #112	; 0x70
 800185e:	d01a      	beq.n	8001896 <HAL_TIM_ConfigClockSource+0xa2>
 8001860:	2b70      	cmp	r3, #112	; 0x70
 8001862:	d87b      	bhi.n	800195c <HAL_TIM_ConfigClockSource+0x168>
 8001864:	2b60      	cmp	r3, #96	; 0x60
 8001866:	d050      	beq.n	800190a <HAL_TIM_ConfigClockSource+0x116>
 8001868:	2b60      	cmp	r3, #96	; 0x60
 800186a:	d877      	bhi.n	800195c <HAL_TIM_ConfigClockSource+0x168>
 800186c:	2b50      	cmp	r3, #80	; 0x50
 800186e:	d03c      	beq.n	80018ea <HAL_TIM_ConfigClockSource+0xf6>
 8001870:	2b50      	cmp	r3, #80	; 0x50
 8001872:	d873      	bhi.n	800195c <HAL_TIM_ConfigClockSource+0x168>
 8001874:	2b40      	cmp	r3, #64	; 0x40
 8001876:	d058      	beq.n	800192a <HAL_TIM_ConfigClockSource+0x136>
 8001878:	2b40      	cmp	r3, #64	; 0x40
 800187a:	d86f      	bhi.n	800195c <HAL_TIM_ConfigClockSource+0x168>
 800187c:	2b30      	cmp	r3, #48	; 0x30
 800187e:	d064      	beq.n	800194a <HAL_TIM_ConfigClockSource+0x156>
 8001880:	2b30      	cmp	r3, #48	; 0x30
 8001882:	d86b      	bhi.n	800195c <HAL_TIM_ConfigClockSource+0x168>
 8001884:	2b20      	cmp	r3, #32
 8001886:	d060      	beq.n	800194a <HAL_TIM_ConfigClockSource+0x156>
 8001888:	2b20      	cmp	r3, #32
 800188a:	d867      	bhi.n	800195c <HAL_TIM_ConfigClockSource+0x168>
 800188c:	2b00      	cmp	r3, #0
 800188e:	d05c      	beq.n	800194a <HAL_TIM_ConfigClockSource+0x156>
 8001890:	2b10      	cmp	r3, #16
 8001892:	d05a      	beq.n	800194a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001894:	e062      	b.n	800195c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f000 f942 	bl	8001b2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80018b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	609a      	str	r2, [r3, #8]
      break;
 80018c2:	e04e      	b.n	8001962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	6899      	ldr	r1, [r3, #8]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f000 f92b 	bl	8001b2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018e6:	609a      	str	r2, [r3, #8]
      break;
 80018e8:	e03b      	b.n	8001962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6859      	ldr	r1, [r3, #4]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f000 f8a2 	bl	8001a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2150      	movs	r1, #80	; 0x50
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f8f9 	bl	8001afa <TIM_ITRx_SetConfig>
      break;
 8001908:	e02b      	b.n	8001962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	461a      	mov	r2, r3
 8001918:	f000 f8c0 	bl	8001a9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2160      	movs	r1, #96	; 0x60
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f8e9 	bl	8001afa <TIM_ITRx_SetConfig>
      break;
 8001928:	e01b      	b.n	8001962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6859      	ldr	r1, [r3, #4]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	461a      	mov	r2, r3
 8001938:	f000 f882 	bl	8001a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2140      	movs	r1, #64	; 0x40
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f8d9 	bl	8001afa <TIM_ITRx_SetConfig>
      break;
 8001948:	e00b      	b.n	8001962 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	4610      	mov	r0, r2
 8001956:	f000 f8d0 	bl	8001afa <TIM_ITRx_SetConfig>
        break;
 800195a:	e002      	b.n	8001962 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800195c:	bf00      	nop
 800195e:	e000      	b.n	8001962 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001960:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a29      	ldr	r2, [pc, #164]	; (8001a34 <TIM_Base_SetConfig+0xb8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00b      	beq.n	80019ac <TIM_Base_SetConfig+0x30>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199a:	d007      	beq.n	80019ac <TIM_Base_SetConfig+0x30>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <TIM_Base_SetConfig+0xbc>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d003      	beq.n	80019ac <TIM_Base_SetConfig+0x30>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <TIM_Base_SetConfig+0xc0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d108      	bne.n	80019be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <TIM_Base_SetConfig+0xb8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00b      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019cc:	d007      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <TIM_Base_SetConfig+0xbc>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d003      	beq.n	80019de <TIM_Base_SetConfig+0x62>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a18      	ldr	r2, [pc, #96]	; (8001a3c <TIM_Base_SetConfig+0xc0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d108      	bne.n	80019f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a07      	ldr	r2, [pc, #28]	; (8001a34 <TIM_Base_SetConfig+0xb8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d103      	bne.n	8001a24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	615a      	str	r2, [r3, #20]
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800

08001a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	f023 0201 	bic.w	r2, r3, #1
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f023 030a 	bic.w	r3, r3, #10
 8001a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	621a      	str	r2, [r3, #32]
}
 8001a92:	bf00      	nop
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f023 0210 	bic.w	r2, r3, #16
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ac6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	031b      	lsls	r3, r3, #12
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	621a      	str	r2, [r3, #32]
}
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	f043 0307 	orr.w	r3, r3, #7
 8001b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	609a      	str	r2, [r3, #8]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr

08001b2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b087      	sub	sp, #28
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	021a      	lsls	r2, r3, #8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	609a      	str	r2, [r3, #8]
}
 8001b62:	bf00      	nop
 8001b64:	371c      	adds	r7, #28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e046      	b.n	8001c12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a16      	ldr	r2, [pc, #88]	; (8001c1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00e      	beq.n	8001be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd0:	d009      	beq.n	8001be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d004      	beq.n	8001be6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10c      	bne.n	8001c00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40000800 	.word	0x40000800

08001c28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e03f      	b.n	8001cba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe fcb8 	bl	80005c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f905 	bl	8001e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ca0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b08a      	sub	sp, #40	; 0x28
 8001cc6:	af02      	add	r7, sp, #8
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d17c      	bne.n	8001ddc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_UART_Transmit+0x2c>
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e075      	b.n	8001dde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_UART_Transmit+0x3e>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e06e      	b.n	8001dde <HAL_UART_Transmit+0x11c>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2221      	movs	r2, #33	; 0x21
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d16:	f7fe fded 	bl	80008f4 <HAL_GetTick>
 8001d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	88fa      	ldrh	r2, [r7, #6]
 8001d20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d30:	d108      	bne.n	8001d44 <HAL_UART_Transmit+0x82>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d104      	bne.n	8001d44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e003      	b.n	8001d4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d54:	e02a      	b.n	8001dac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f000 f840 	bl	8001de6 <UART_WaitOnFlagUntilTimeout>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e036      	b.n	8001dde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10b      	bne.n	8001d8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	e007      	b.n	8001d9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1cf      	bne.n	8001d56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f810 	bl	8001de6 <UART_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e006      	b.n	8001dde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b084      	sub	sp, #16
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001df6:	e02c      	b.n	8001e52 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfe:	d028      	beq.n	8001e52 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e06:	f7fe fd75 	bl	80008f4 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d21d      	bcs.n	8001e52 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e24:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e00f      	b.n	8001e72 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	bf0c      	ite	eq
 8001e62:	2301      	moveq	r3, #1
 8001e64:	2300      	movne	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d0c3      	beq.n	8001df8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001eb6:	f023 030c 	bic.w	r3, r3, #12
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a2c      	ldr	r2, [pc, #176]	; (8001f90 <UART_SetConfig+0x114>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d103      	bne.n	8001eec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ee4:	f7ff fbba 	bl	800165c <HAL_RCC_GetPCLK2Freq>
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	e002      	b.n	8001ef2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001eec:	f7ff fba2 	bl	8001634 <HAL_RCC_GetPCLK1Freq>
 8001ef0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	009a      	lsls	r2, r3, #2
 8001efc:	441a      	add	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	4a22      	ldr	r2, [pc, #136]	; (8001f94 <UART_SetConfig+0x118>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	0119      	lsls	r1, r3, #4
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	4613      	mov	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	009a      	lsls	r2, r3, #2
 8001f1c:	441a      	add	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f28:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <UART_SetConfig+0x118>)
 8001f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	2064      	movs	r0, #100	; 0x64
 8001f32:	fb00 f303 	mul.w	r3, r0, r3
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	3332      	adds	r3, #50	; 0x32
 8001f3c:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <UART_SetConfig+0x118>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f48:	4419      	add	r1, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	009a      	lsls	r2, r3, #2
 8001f54:	441a      	add	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <UART_SetConfig+0x118>)
 8001f62:	fba3 0302 	umull	r0, r3, r3, r2
 8001f66:	095b      	lsrs	r3, r3, #5
 8001f68:	2064      	movs	r0, #100	; 0x64
 8001f6a:	fb00 f303 	mul.w	r3, r0, r3
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	3332      	adds	r3, #50	; 0x32
 8001f74:	4a07      	ldr	r2, [pc, #28]	; (8001f94 <UART_SetConfig+0x118>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	f003 020f 	and.w	r2, r3, #15
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	440a      	add	r2, r1
 8001f86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40013800 	.word	0x40013800
 8001f94:	51eb851f 	.word	0x51eb851f

08001f98 <__errno>:
 8001f98:	4b01      	ldr	r3, [pc, #4]	; (8001fa0 <__errno+0x8>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	2000000c 	.word	0x2000000c

08001fa4 <__libc_init_array>:
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	2600      	movs	r6, #0
 8001fa8:	4d0c      	ldr	r5, [pc, #48]	; (8001fdc <__libc_init_array+0x38>)
 8001faa:	4c0d      	ldr	r4, [pc, #52]	; (8001fe0 <__libc_init_array+0x3c>)
 8001fac:	1b64      	subs	r4, r4, r5
 8001fae:	10a4      	asrs	r4, r4, #2
 8001fb0:	42a6      	cmp	r6, r4
 8001fb2:	d109      	bne.n	8001fc8 <__libc_init_array+0x24>
 8001fb4:	f000 ffb6 	bl	8002f24 <_init>
 8001fb8:	2600      	movs	r6, #0
 8001fba:	4d0a      	ldr	r5, [pc, #40]	; (8001fe4 <__libc_init_array+0x40>)
 8001fbc:	4c0a      	ldr	r4, [pc, #40]	; (8001fe8 <__libc_init_array+0x44>)
 8001fbe:	1b64      	subs	r4, r4, r5
 8001fc0:	10a4      	asrs	r4, r4, #2
 8001fc2:	42a6      	cmp	r6, r4
 8001fc4:	d105      	bne.n	8001fd2 <__libc_init_array+0x2e>
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}
 8001fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fcc:	4798      	blx	r3
 8001fce:	3601      	adds	r6, #1
 8001fd0:	e7ee      	b.n	8001fb0 <__libc_init_array+0xc>
 8001fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fd6:	4798      	blx	r3
 8001fd8:	3601      	adds	r6, #1
 8001fda:	e7f2      	b.n	8001fc2 <__libc_init_array+0x1e>
 8001fdc:	08003014 	.word	0x08003014
 8001fe0:	08003014 	.word	0x08003014
 8001fe4:	08003014 	.word	0x08003014
 8001fe8:	08003018 	.word	0x08003018

08001fec <memset>:
 8001fec:	4603      	mov	r3, r0
 8001fee:	4402      	add	r2, r0
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d100      	bne.n	8001ff6 <memset+0xa>
 8001ff4:	4770      	bx	lr
 8001ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8001ffa:	e7f9      	b.n	8001ff0 <memset+0x4>

08001ffc <iprintf>:
 8001ffc:	b40f      	push	{r0, r1, r2, r3}
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <iprintf+0x2c>)
 8002000:	b513      	push	{r0, r1, r4, lr}
 8002002:	681c      	ldr	r4, [r3, #0]
 8002004:	b124      	cbz	r4, 8002010 <iprintf+0x14>
 8002006:	69a3      	ldr	r3, [r4, #24]
 8002008:	b913      	cbnz	r3, 8002010 <iprintf+0x14>
 800200a:	4620      	mov	r0, r4
 800200c:	f000 f866 	bl	80020dc <__sinit>
 8002010:	ab05      	add	r3, sp, #20
 8002012:	4620      	mov	r0, r4
 8002014:	9a04      	ldr	r2, [sp, #16]
 8002016:	68a1      	ldr	r1, [r4, #8]
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	f000 f9bb 	bl	8002394 <_vfiprintf_r>
 800201e:	b002      	add	sp, #8
 8002020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002024:	b004      	add	sp, #16
 8002026:	4770      	bx	lr
 8002028:	2000000c 	.word	0x2000000c

0800202c <std>:
 800202c:	2300      	movs	r3, #0
 800202e:	b510      	push	{r4, lr}
 8002030:	4604      	mov	r4, r0
 8002032:	e9c0 3300 	strd	r3, r3, [r0]
 8002036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800203a:	6083      	str	r3, [r0, #8]
 800203c:	8181      	strh	r1, [r0, #12]
 800203e:	6643      	str	r3, [r0, #100]	; 0x64
 8002040:	81c2      	strh	r2, [r0, #14]
 8002042:	6183      	str	r3, [r0, #24]
 8002044:	4619      	mov	r1, r3
 8002046:	2208      	movs	r2, #8
 8002048:	305c      	adds	r0, #92	; 0x5c
 800204a:	f7ff ffcf 	bl	8001fec <memset>
 800204e:	4b05      	ldr	r3, [pc, #20]	; (8002064 <std+0x38>)
 8002050:	6224      	str	r4, [r4, #32]
 8002052:	6263      	str	r3, [r4, #36]	; 0x24
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <std+0x3c>)
 8002056:	62a3      	str	r3, [r4, #40]	; 0x28
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <std+0x40>)
 800205a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <std+0x44>)
 800205e:	6323      	str	r3, [r4, #48]	; 0x30
 8002060:	bd10      	pop	{r4, pc}
 8002062:	bf00      	nop
 8002064:	08002941 	.word	0x08002941
 8002068:	08002963 	.word	0x08002963
 800206c:	0800299b 	.word	0x0800299b
 8002070:	080029bf 	.word	0x080029bf

08002074 <_cleanup_r>:
 8002074:	4901      	ldr	r1, [pc, #4]	; (800207c <_cleanup_r+0x8>)
 8002076:	f000 b8af 	b.w	80021d8 <_fwalk_reent>
 800207a:	bf00      	nop
 800207c:	08002c91 	.word	0x08002c91

08002080 <__sfmoreglue>:
 8002080:	2268      	movs	r2, #104	; 0x68
 8002082:	b570      	push	{r4, r5, r6, lr}
 8002084:	1e4d      	subs	r5, r1, #1
 8002086:	4355      	muls	r5, r2
 8002088:	460e      	mov	r6, r1
 800208a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800208e:	f000 f8e5 	bl	800225c <_malloc_r>
 8002092:	4604      	mov	r4, r0
 8002094:	b140      	cbz	r0, 80020a8 <__sfmoreglue+0x28>
 8002096:	2100      	movs	r1, #0
 8002098:	e9c0 1600 	strd	r1, r6, [r0]
 800209c:	300c      	adds	r0, #12
 800209e:	60a0      	str	r0, [r4, #8]
 80020a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80020a4:	f7ff ffa2 	bl	8001fec <memset>
 80020a8:	4620      	mov	r0, r4
 80020aa:	bd70      	pop	{r4, r5, r6, pc}

080020ac <__sfp_lock_acquire>:
 80020ac:	4801      	ldr	r0, [pc, #4]	; (80020b4 <__sfp_lock_acquire+0x8>)
 80020ae:	f000 b8b3 	b.w	8002218 <__retarget_lock_acquire_recursive>
 80020b2:	bf00      	nop
 80020b4:	2000012d 	.word	0x2000012d

080020b8 <__sfp_lock_release>:
 80020b8:	4801      	ldr	r0, [pc, #4]	; (80020c0 <__sfp_lock_release+0x8>)
 80020ba:	f000 b8ae 	b.w	800221a <__retarget_lock_release_recursive>
 80020be:	bf00      	nop
 80020c0:	2000012d 	.word	0x2000012d

080020c4 <__sinit_lock_acquire>:
 80020c4:	4801      	ldr	r0, [pc, #4]	; (80020cc <__sinit_lock_acquire+0x8>)
 80020c6:	f000 b8a7 	b.w	8002218 <__retarget_lock_acquire_recursive>
 80020ca:	bf00      	nop
 80020cc:	2000012e 	.word	0x2000012e

080020d0 <__sinit_lock_release>:
 80020d0:	4801      	ldr	r0, [pc, #4]	; (80020d8 <__sinit_lock_release+0x8>)
 80020d2:	f000 b8a2 	b.w	800221a <__retarget_lock_release_recursive>
 80020d6:	bf00      	nop
 80020d8:	2000012e 	.word	0x2000012e

080020dc <__sinit>:
 80020dc:	b510      	push	{r4, lr}
 80020de:	4604      	mov	r4, r0
 80020e0:	f7ff fff0 	bl	80020c4 <__sinit_lock_acquire>
 80020e4:	69a3      	ldr	r3, [r4, #24]
 80020e6:	b11b      	cbz	r3, 80020f0 <__sinit+0x14>
 80020e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ec:	f7ff bff0 	b.w	80020d0 <__sinit_lock_release>
 80020f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80020f4:	6523      	str	r3, [r4, #80]	; 0x50
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <__sinit+0x68>)
 80020f8:	4a13      	ldr	r2, [pc, #76]	; (8002148 <__sinit+0x6c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80020fe:	42a3      	cmp	r3, r4
 8002100:	bf08      	it	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	4620      	mov	r0, r4
 8002106:	bf08      	it	eq
 8002108:	61a3      	streq	r3, [r4, #24]
 800210a:	f000 f81f 	bl	800214c <__sfp>
 800210e:	6060      	str	r0, [r4, #4]
 8002110:	4620      	mov	r0, r4
 8002112:	f000 f81b 	bl	800214c <__sfp>
 8002116:	60a0      	str	r0, [r4, #8]
 8002118:	4620      	mov	r0, r4
 800211a:	f000 f817 	bl	800214c <__sfp>
 800211e:	2200      	movs	r2, #0
 8002120:	2104      	movs	r1, #4
 8002122:	60e0      	str	r0, [r4, #12]
 8002124:	6860      	ldr	r0, [r4, #4]
 8002126:	f7ff ff81 	bl	800202c <std>
 800212a:	2201      	movs	r2, #1
 800212c:	2109      	movs	r1, #9
 800212e:	68a0      	ldr	r0, [r4, #8]
 8002130:	f7ff ff7c 	bl	800202c <std>
 8002134:	2202      	movs	r2, #2
 8002136:	2112      	movs	r1, #18
 8002138:	68e0      	ldr	r0, [r4, #12]
 800213a:	f7ff ff77 	bl	800202c <std>
 800213e:	2301      	movs	r3, #1
 8002140:	61a3      	str	r3, [r4, #24]
 8002142:	e7d1      	b.n	80020e8 <__sinit+0xc>
 8002144:	08002f7c 	.word	0x08002f7c
 8002148:	08002075 	.word	0x08002075

0800214c <__sfp>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	4607      	mov	r7, r0
 8002150:	f7ff ffac 	bl	80020ac <__sfp_lock_acquire>
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <__sfp+0x84>)
 8002156:	681e      	ldr	r6, [r3, #0]
 8002158:	69b3      	ldr	r3, [r6, #24]
 800215a:	b913      	cbnz	r3, 8002162 <__sfp+0x16>
 800215c:	4630      	mov	r0, r6
 800215e:	f7ff ffbd 	bl	80020dc <__sinit>
 8002162:	3648      	adds	r6, #72	; 0x48
 8002164:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002168:	3b01      	subs	r3, #1
 800216a:	d503      	bpl.n	8002174 <__sfp+0x28>
 800216c:	6833      	ldr	r3, [r6, #0]
 800216e:	b30b      	cbz	r3, 80021b4 <__sfp+0x68>
 8002170:	6836      	ldr	r6, [r6, #0]
 8002172:	e7f7      	b.n	8002164 <__sfp+0x18>
 8002174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002178:	b9d5      	cbnz	r5, 80021b0 <__sfp+0x64>
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <__sfp+0x88>)
 800217c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002180:	60e3      	str	r3, [r4, #12]
 8002182:	6665      	str	r5, [r4, #100]	; 0x64
 8002184:	f000 f847 	bl	8002216 <__retarget_lock_init_recursive>
 8002188:	f7ff ff96 	bl	80020b8 <__sfp_lock_release>
 800218c:	2208      	movs	r2, #8
 800218e:	4629      	mov	r1, r5
 8002190:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002194:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002198:	6025      	str	r5, [r4, #0]
 800219a:	61a5      	str	r5, [r4, #24]
 800219c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80021a0:	f7ff ff24 	bl	8001fec <memset>
 80021a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80021a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80021ac:	4620      	mov	r0, r4
 80021ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021b0:	3468      	adds	r4, #104	; 0x68
 80021b2:	e7d9      	b.n	8002168 <__sfp+0x1c>
 80021b4:	2104      	movs	r1, #4
 80021b6:	4638      	mov	r0, r7
 80021b8:	f7ff ff62 	bl	8002080 <__sfmoreglue>
 80021bc:	4604      	mov	r4, r0
 80021be:	6030      	str	r0, [r6, #0]
 80021c0:	2800      	cmp	r0, #0
 80021c2:	d1d5      	bne.n	8002170 <__sfp+0x24>
 80021c4:	f7ff ff78 	bl	80020b8 <__sfp_lock_release>
 80021c8:	230c      	movs	r3, #12
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	e7ee      	b.n	80021ac <__sfp+0x60>
 80021ce:	bf00      	nop
 80021d0:	08002f7c 	.word	0x08002f7c
 80021d4:	ffff0001 	.word	0xffff0001

080021d8 <_fwalk_reent>:
 80021d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021dc:	4606      	mov	r6, r0
 80021de:	4688      	mov	r8, r1
 80021e0:	2700      	movs	r7, #0
 80021e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80021e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021ea:	f1b9 0901 	subs.w	r9, r9, #1
 80021ee:	d505      	bpl.n	80021fc <_fwalk_reent+0x24>
 80021f0:	6824      	ldr	r4, [r4, #0]
 80021f2:	2c00      	cmp	r4, #0
 80021f4:	d1f7      	bne.n	80021e6 <_fwalk_reent+0xe>
 80021f6:	4638      	mov	r0, r7
 80021f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021fc:	89ab      	ldrh	r3, [r5, #12]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d907      	bls.n	8002212 <_fwalk_reent+0x3a>
 8002202:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002206:	3301      	adds	r3, #1
 8002208:	d003      	beq.n	8002212 <_fwalk_reent+0x3a>
 800220a:	4629      	mov	r1, r5
 800220c:	4630      	mov	r0, r6
 800220e:	47c0      	blx	r8
 8002210:	4307      	orrs	r7, r0
 8002212:	3568      	adds	r5, #104	; 0x68
 8002214:	e7e9      	b.n	80021ea <_fwalk_reent+0x12>

08002216 <__retarget_lock_init_recursive>:
 8002216:	4770      	bx	lr

08002218 <__retarget_lock_acquire_recursive>:
 8002218:	4770      	bx	lr

0800221a <__retarget_lock_release_recursive>:
 800221a:	4770      	bx	lr

0800221c <sbrk_aligned>:
 800221c:	b570      	push	{r4, r5, r6, lr}
 800221e:	4e0e      	ldr	r6, [pc, #56]	; (8002258 <sbrk_aligned+0x3c>)
 8002220:	460c      	mov	r4, r1
 8002222:	6831      	ldr	r1, [r6, #0]
 8002224:	4605      	mov	r5, r0
 8002226:	b911      	cbnz	r1, 800222e <sbrk_aligned+0x12>
 8002228:	f000 fb7a 	bl	8002920 <_sbrk_r>
 800222c:	6030      	str	r0, [r6, #0]
 800222e:	4621      	mov	r1, r4
 8002230:	4628      	mov	r0, r5
 8002232:	f000 fb75 	bl	8002920 <_sbrk_r>
 8002236:	1c43      	adds	r3, r0, #1
 8002238:	d00a      	beq.n	8002250 <sbrk_aligned+0x34>
 800223a:	1cc4      	adds	r4, r0, #3
 800223c:	f024 0403 	bic.w	r4, r4, #3
 8002240:	42a0      	cmp	r0, r4
 8002242:	d007      	beq.n	8002254 <sbrk_aligned+0x38>
 8002244:	1a21      	subs	r1, r4, r0
 8002246:	4628      	mov	r0, r5
 8002248:	f000 fb6a 	bl	8002920 <_sbrk_r>
 800224c:	3001      	adds	r0, #1
 800224e:	d101      	bne.n	8002254 <sbrk_aligned+0x38>
 8002250:	f04f 34ff 	mov.w	r4, #4294967295
 8002254:	4620      	mov	r0, r4
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	20000134 	.word	0x20000134

0800225c <_malloc_r>:
 800225c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002260:	1ccd      	adds	r5, r1, #3
 8002262:	f025 0503 	bic.w	r5, r5, #3
 8002266:	3508      	adds	r5, #8
 8002268:	2d0c      	cmp	r5, #12
 800226a:	bf38      	it	cc
 800226c:	250c      	movcc	r5, #12
 800226e:	2d00      	cmp	r5, #0
 8002270:	4607      	mov	r7, r0
 8002272:	db01      	blt.n	8002278 <_malloc_r+0x1c>
 8002274:	42a9      	cmp	r1, r5
 8002276:	d905      	bls.n	8002284 <_malloc_r+0x28>
 8002278:	230c      	movs	r3, #12
 800227a:	2600      	movs	r6, #0
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4630      	mov	r0, r6
 8002280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002284:	4e2e      	ldr	r6, [pc, #184]	; (8002340 <_malloc_r+0xe4>)
 8002286:	f000 fdc5 	bl	8002e14 <__malloc_lock>
 800228a:	6833      	ldr	r3, [r6, #0]
 800228c:	461c      	mov	r4, r3
 800228e:	bb34      	cbnz	r4, 80022de <_malloc_r+0x82>
 8002290:	4629      	mov	r1, r5
 8002292:	4638      	mov	r0, r7
 8002294:	f7ff ffc2 	bl	800221c <sbrk_aligned>
 8002298:	1c43      	adds	r3, r0, #1
 800229a:	4604      	mov	r4, r0
 800229c:	d14d      	bne.n	800233a <_malloc_r+0xde>
 800229e:	6834      	ldr	r4, [r6, #0]
 80022a0:	4626      	mov	r6, r4
 80022a2:	2e00      	cmp	r6, #0
 80022a4:	d140      	bne.n	8002328 <_malloc_r+0xcc>
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	4631      	mov	r1, r6
 80022aa:	4638      	mov	r0, r7
 80022ac:	eb04 0803 	add.w	r8, r4, r3
 80022b0:	f000 fb36 	bl	8002920 <_sbrk_r>
 80022b4:	4580      	cmp	r8, r0
 80022b6:	d13a      	bne.n	800232e <_malloc_r+0xd2>
 80022b8:	6821      	ldr	r1, [r4, #0]
 80022ba:	3503      	adds	r5, #3
 80022bc:	1a6d      	subs	r5, r5, r1
 80022be:	f025 0503 	bic.w	r5, r5, #3
 80022c2:	3508      	adds	r5, #8
 80022c4:	2d0c      	cmp	r5, #12
 80022c6:	bf38      	it	cc
 80022c8:	250c      	movcc	r5, #12
 80022ca:	4638      	mov	r0, r7
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7ff ffa5 	bl	800221c <sbrk_aligned>
 80022d2:	3001      	adds	r0, #1
 80022d4:	d02b      	beq.n	800232e <_malloc_r+0xd2>
 80022d6:	6823      	ldr	r3, [r4, #0]
 80022d8:	442b      	add	r3, r5
 80022da:	6023      	str	r3, [r4, #0]
 80022dc:	e00e      	b.n	80022fc <_malloc_r+0xa0>
 80022de:	6822      	ldr	r2, [r4, #0]
 80022e0:	1b52      	subs	r2, r2, r5
 80022e2:	d41e      	bmi.n	8002322 <_malloc_r+0xc6>
 80022e4:	2a0b      	cmp	r2, #11
 80022e6:	d916      	bls.n	8002316 <_malloc_r+0xba>
 80022e8:	1961      	adds	r1, r4, r5
 80022ea:	42a3      	cmp	r3, r4
 80022ec:	6025      	str	r5, [r4, #0]
 80022ee:	bf18      	it	ne
 80022f0:	6059      	strne	r1, [r3, #4]
 80022f2:	6863      	ldr	r3, [r4, #4]
 80022f4:	bf08      	it	eq
 80022f6:	6031      	streq	r1, [r6, #0]
 80022f8:	5162      	str	r2, [r4, r5]
 80022fa:	604b      	str	r3, [r1, #4]
 80022fc:	4638      	mov	r0, r7
 80022fe:	f104 060b 	add.w	r6, r4, #11
 8002302:	f000 fd8d 	bl	8002e20 <__malloc_unlock>
 8002306:	f026 0607 	bic.w	r6, r6, #7
 800230a:	1d23      	adds	r3, r4, #4
 800230c:	1af2      	subs	r2, r6, r3
 800230e:	d0b6      	beq.n	800227e <_malloc_r+0x22>
 8002310:	1b9b      	subs	r3, r3, r6
 8002312:	50a3      	str	r3, [r4, r2]
 8002314:	e7b3      	b.n	800227e <_malloc_r+0x22>
 8002316:	6862      	ldr	r2, [r4, #4]
 8002318:	42a3      	cmp	r3, r4
 800231a:	bf0c      	ite	eq
 800231c:	6032      	streq	r2, [r6, #0]
 800231e:	605a      	strne	r2, [r3, #4]
 8002320:	e7ec      	b.n	80022fc <_malloc_r+0xa0>
 8002322:	4623      	mov	r3, r4
 8002324:	6864      	ldr	r4, [r4, #4]
 8002326:	e7b2      	b.n	800228e <_malloc_r+0x32>
 8002328:	4634      	mov	r4, r6
 800232a:	6876      	ldr	r6, [r6, #4]
 800232c:	e7b9      	b.n	80022a2 <_malloc_r+0x46>
 800232e:	230c      	movs	r3, #12
 8002330:	4638      	mov	r0, r7
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	f000 fd74 	bl	8002e20 <__malloc_unlock>
 8002338:	e7a1      	b.n	800227e <_malloc_r+0x22>
 800233a:	6025      	str	r5, [r4, #0]
 800233c:	e7de      	b.n	80022fc <_malloc_r+0xa0>
 800233e:	bf00      	nop
 8002340:	20000130 	.word	0x20000130

08002344 <__sfputc_r>:
 8002344:	6893      	ldr	r3, [r2, #8]
 8002346:	b410      	push	{r4}
 8002348:	3b01      	subs	r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	6093      	str	r3, [r2, #8]
 800234e:	da07      	bge.n	8002360 <__sfputc_r+0x1c>
 8002350:	6994      	ldr	r4, [r2, #24]
 8002352:	42a3      	cmp	r3, r4
 8002354:	db01      	blt.n	800235a <__sfputc_r+0x16>
 8002356:	290a      	cmp	r1, #10
 8002358:	d102      	bne.n	8002360 <__sfputc_r+0x1c>
 800235a:	bc10      	pop	{r4}
 800235c:	f000 bb34 	b.w	80029c8 <__swbuf_r>
 8002360:	6813      	ldr	r3, [r2, #0]
 8002362:	1c58      	adds	r0, r3, #1
 8002364:	6010      	str	r0, [r2, #0]
 8002366:	7019      	strb	r1, [r3, #0]
 8002368:	4608      	mov	r0, r1
 800236a:	bc10      	pop	{r4}
 800236c:	4770      	bx	lr

0800236e <__sfputs_r>:
 800236e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002370:	4606      	mov	r6, r0
 8002372:	460f      	mov	r7, r1
 8002374:	4614      	mov	r4, r2
 8002376:	18d5      	adds	r5, r2, r3
 8002378:	42ac      	cmp	r4, r5
 800237a:	d101      	bne.n	8002380 <__sfputs_r+0x12>
 800237c:	2000      	movs	r0, #0
 800237e:	e007      	b.n	8002390 <__sfputs_r+0x22>
 8002380:	463a      	mov	r2, r7
 8002382:	4630      	mov	r0, r6
 8002384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002388:	f7ff ffdc 	bl	8002344 <__sfputc_r>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d1f3      	bne.n	8002378 <__sfputs_r+0xa>
 8002390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002394 <_vfiprintf_r>:
 8002394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002398:	460d      	mov	r5, r1
 800239a:	4614      	mov	r4, r2
 800239c:	4698      	mov	r8, r3
 800239e:	4606      	mov	r6, r0
 80023a0:	b09d      	sub	sp, #116	; 0x74
 80023a2:	b118      	cbz	r0, 80023ac <_vfiprintf_r+0x18>
 80023a4:	6983      	ldr	r3, [r0, #24]
 80023a6:	b90b      	cbnz	r3, 80023ac <_vfiprintf_r+0x18>
 80023a8:	f7ff fe98 	bl	80020dc <__sinit>
 80023ac:	4b89      	ldr	r3, [pc, #548]	; (80025d4 <_vfiprintf_r+0x240>)
 80023ae:	429d      	cmp	r5, r3
 80023b0:	d11b      	bne.n	80023ea <_vfiprintf_r+0x56>
 80023b2:	6875      	ldr	r5, [r6, #4]
 80023b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023b6:	07d9      	lsls	r1, r3, #31
 80023b8:	d405      	bmi.n	80023c6 <_vfiprintf_r+0x32>
 80023ba:	89ab      	ldrh	r3, [r5, #12]
 80023bc:	059a      	lsls	r2, r3, #22
 80023be:	d402      	bmi.n	80023c6 <_vfiprintf_r+0x32>
 80023c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023c2:	f7ff ff29 	bl	8002218 <__retarget_lock_acquire_recursive>
 80023c6:	89ab      	ldrh	r3, [r5, #12]
 80023c8:	071b      	lsls	r3, r3, #28
 80023ca:	d501      	bpl.n	80023d0 <_vfiprintf_r+0x3c>
 80023cc:	692b      	ldr	r3, [r5, #16]
 80023ce:	b9eb      	cbnz	r3, 800240c <_vfiprintf_r+0x78>
 80023d0:	4629      	mov	r1, r5
 80023d2:	4630      	mov	r0, r6
 80023d4:	f000 fb5c 	bl	8002a90 <__swsetup_r>
 80023d8:	b1c0      	cbz	r0, 800240c <_vfiprintf_r+0x78>
 80023da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023dc:	07dc      	lsls	r4, r3, #31
 80023de:	d50e      	bpl.n	80023fe <_vfiprintf_r+0x6a>
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	b01d      	add	sp, #116	; 0x74
 80023e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023ea:	4b7b      	ldr	r3, [pc, #492]	; (80025d8 <_vfiprintf_r+0x244>)
 80023ec:	429d      	cmp	r5, r3
 80023ee:	d101      	bne.n	80023f4 <_vfiprintf_r+0x60>
 80023f0:	68b5      	ldr	r5, [r6, #8]
 80023f2:	e7df      	b.n	80023b4 <_vfiprintf_r+0x20>
 80023f4:	4b79      	ldr	r3, [pc, #484]	; (80025dc <_vfiprintf_r+0x248>)
 80023f6:	429d      	cmp	r5, r3
 80023f8:	bf08      	it	eq
 80023fa:	68f5      	ldreq	r5, [r6, #12]
 80023fc:	e7da      	b.n	80023b4 <_vfiprintf_r+0x20>
 80023fe:	89ab      	ldrh	r3, [r5, #12]
 8002400:	0598      	lsls	r0, r3, #22
 8002402:	d4ed      	bmi.n	80023e0 <_vfiprintf_r+0x4c>
 8002404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002406:	f7ff ff08 	bl	800221a <__retarget_lock_release_recursive>
 800240a:	e7e9      	b.n	80023e0 <_vfiprintf_r+0x4c>
 800240c:	2300      	movs	r3, #0
 800240e:	9309      	str	r3, [sp, #36]	; 0x24
 8002410:	2320      	movs	r3, #32
 8002412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002416:	2330      	movs	r3, #48	; 0x30
 8002418:	f04f 0901 	mov.w	r9, #1
 800241c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002420:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80025e0 <_vfiprintf_r+0x24c>
 8002424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002428:	4623      	mov	r3, r4
 800242a:	469a      	mov	sl, r3
 800242c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002430:	b10a      	cbz	r2, 8002436 <_vfiprintf_r+0xa2>
 8002432:	2a25      	cmp	r2, #37	; 0x25
 8002434:	d1f9      	bne.n	800242a <_vfiprintf_r+0x96>
 8002436:	ebba 0b04 	subs.w	fp, sl, r4
 800243a:	d00b      	beq.n	8002454 <_vfiprintf_r+0xc0>
 800243c:	465b      	mov	r3, fp
 800243e:	4622      	mov	r2, r4
 8002440:	4629      	mov	r1, r5
 8002442:	4630      	mov	r0, r6
 8002444:	f7ff ff93 	bl	800236e <__sfputs_r>
 8002448:	3001      	adds	r0, #1
 800244a:	f000 80aa 	beq.w	80025a2 <_vfiprintf_r+0x20e>
 800244e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002450:	445a      	add	r2, fp
 8002452:	9209      	str	r2, [sp, #36]	; 0x24
 8002454:	f89a 3000 	ldrb.w	r3, [sl]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80a2 	beq.w	80025a2 <_vfiprintf_r+0x20e>
 800245e:	2300      	movs	r3, #0
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002468:	f10a 0a01 	add.w	sl, sl, #1
 800246c:	9304      	str	r3, [sp, #16]
 800246e:	9307      	str	r3, [sp, #28]
 8002470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002474:	931a      	str	r3, [sp, #104]	; 0x68
 8002476:	4654      	mov	r4, sl
 8002478:	2205      	movs	r2, #5
 800247a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800247e:	4858      	ldr	r0, [pc, #352]	; (80025e0 <_vfiprintf_r+0x24c>)
 8002480:	f000 fcba 	bl	8002df8 <memchr>
 8002484:	9a04      	ldr	r2, [sp, #16]
 8002486:	b9d8      	cbnz	r0, 80024c0 <_vfiprintf_r+0x12c>
 8002488:	06d1      	lsls	r1, r2, #27
 800248a:	bf44      	itt	mi
 800248c:	2320      	movmi	r3, #32
 800248e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002492:	0713      	lsls	r3, r2, #28
 8002494:	bf44      	itt	mi
 8002496:	232b      	movmi	r3, #43	; 0x2b
 8002498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800249c:	f89a 3000 	ldrb.w	r3, [sl]
 80024a0:	2b2a      	cmp	r3, #42	; 0x2a
 80024a2:	d015      	beq.n	80024d0 <_vfiprintf_r+0x13c>
 80024a4:	4654      	mov	r4, sl
 80024a6:	2000      	movs	r0, #0
 80024a8:	f04f 0c0a 	mov.w	ip, #10
 80024ac:	9a07      	ldr	r2, [sp, #28]
 80024ae:	4621      	mov	r1, r4
 80024b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024b4:	3b30      	subs	r3, #48	; 0x30
 80024b6:	2b09      	cmp	r3, #9
 80024b8:	d94e      	bls.n	8002558 <_vfiprintf_r+0x1c4>
 80024ba:	b1b0      	cbz	r0, 80024ea <_vfiprintf_r+0x156>
 80024bc:	9207      	str	r2, [sp, #28]
 80024be:	e014      	b.n	80024ea <_vfiprintf_r+0x156>
 80024c0:	eba0 0308 	sub.w	r3, r0, r8
 80024c4:	fa09 f303 	lsl.w	r3, r9, r3
 80024c8:	4313      	orrs	r3, r2
 80024ca:	46a2      	mov	sl, r4
 80024cc:	9304      	str	r3, [sp, #16]
 80024ce:	e7d2      	b.n	8002476 <_vfiprintf_r+0xe2>
 80024d0:	9b03      	ldr	r3, [sp, #12]
 80024d2:	1d19      	adds	r1, r3, #4
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	9103      	str	r1, [sp, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bfbb      	ittet	lt
 80024dc:	425b      	neglt	r3, r3
 80024de:	f042 0202 	orrlt.w	r2, r2, #2
 80024e2:	9307      	strge	r3, [sp, #28]
 80024e4:	9307      	strlt	r3, [sp, #28]
 80024e6:	bfb8      	it	lt
 80024e8:	9204      	strlt	r2, [sp, #16]
 80024ea:	7823      	ldrb	r3, [r4, #0]
 80024ec:	2b2e      	cmp	r3, #46	; 0x2e
 80024ee:	d10c      	bne.n	800250a <_vfiprintf_r+0x176>
 80024f0:	7863      	ldrb	r3, [r4, #1]
 80024f2:	2b2a      	cmp	r3, #42	; 0x2a
 80024f4:	d135      	bne.n	8002562 <_vfiprintf_r+0x1ce>
 80024f6:	9b03      	ldr	r3, [sp, #12]
 80024f8:	3402      	adds	r4, #2
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	9203      	str	r2, [sp, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	bfb8      	it	lt
 8002504:	f04f 33ff 	movlt.w	r3, #4294967295
 8002508:	9305      	str	r3, [sp, #20]
 800250a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80025e4 <_vfiprintf_r+0x250>
 800250e:	2203      	movs	r2, #3
 8002510:	4650      	mov	r0, sl
 8002512:	7821      	ldrb	r1, [r4, #0]
 8002514:	f000 fc70 	bl	8002df8 <memchr>
 8002518:	b140      	cbz	r0, 800252c <_vfiprintf_r+0x198>
 800251a:	2340      	movs	r3, #64	; 0x40
 800251c:	eba0 000a 	sub.w	r0, r0, sl
 8002520:	fa03 f000 	lsl.w	r0, r3, r0
 8002524:	9b04      	ldr	r3, [sp, #16]
 8002526:	3401      	adds	r4, #1
 8002528:	4303      	orrs	r3, r0
 800252a:	9304      	str	r3, [sp, #16]
 800252c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002530:	2206      	movs	r2, #6
 8002532:	482d      	ldr	r0, [pc, #180]	; (80025e8 <_vfiprintf_r+0x254>)
 8002534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002538:	f000 fc5e 	bl	8002df8 <memchr>
 800253c:	2800      	cmp	r0, #0
 800253e:	d03f      	beq.n	80025c0 <_vfiprintf_r+0x22c>
 8002540:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <_vfiprintf_r+0x258>)
 8002542:	bb1b      	cbnz	r3, 800258c <_vfiprintf_r+0x1f8>
 8002544:	9b03      	ldr	r3, [sp, #12]
 8002546:	3307      	adds	r3, #7
 8002548:	f023 0307 	bic.w	r3, r3, #7
 800254c:	3308      	adds	r3, #8
 800254e:	9303      	str	r3, [sp, #12]
 8002550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002552:	443b      	add	r3, r7
 8002554:	9309      	str	r3, [sp, #36]	; 0x24
 8002556:	e767      	b.n	8002428 <_vfiprintf_r+0x94>
 8002558:	460c      	mov	r4, r1
 800255a:	2001      	movs	r0, #1
 800255c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002560:	e7a5      	b.n	80024ae <_vfiprintf_r+0x11a>
 8002562:	2300      	movs	r3, #0
 8002564:	f04f 0c0a 	mov.w	ip, #10
 8002568:	4619      	mov	r1, r3
 800256a:	3401      	adds	r4, #1
 800256c:	9305      	str	r3, [sp, #20]
 800256e:	4620      	mov	r0, r4
 8002570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002574:	3a30      	subs	r2, #48	; 0x30
 8002576:	2a09      	cmp	r2, #9
 8002578:	d903      	bls.n	8002582 <_vfiprintf_r+0x1ee>
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0c5      	beq.n	800250a <_vfiprintf_r+0x176>
 800257e:	9105      	str	r1, [sp, #20]
 8002580:	e7c3      	b.n	800250a <_vfiprintf_r+0x176>
 8002582:	4604      	mov	r4, r0
 8002584:	2301      	movs	r3, #1
 8002586:	fb0c 2101 	mla	r1, ip, r1, r2
 800258a:	e7f0      	b.n	800256e <_vfiprintf_r+0x1da>
 800258c:	ab03      	add	r3, sp, #12
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	462a      	mov	r2, r5
 8002592:	4630      	mov	r0, r6
 8002594:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <_vfiprintf_r+0x25c>)
 8002596:	a904      	add	r1, sp, #16
 8002598:	f3af 8000 	nop.w
 800259c:	4607      	mov	r7, r0
 800259e:	1c78      	adds	r0, r7, #1
 80025a0:	d1d6      	bne.n	8002550 <_vfiprintf_r+0x1bc>
 80025a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025a4:	07d9      	lsls	r1, r3, #31
 80025a6:	d405      	bmi.n	80025b4 <_vfiprintf_r+0x220>
 80025a8:	89ab      	ldrh	r3, [r5, #12]
 80025aa:	059a      	lsls	r2, r3, #22
 80025ac:	d402      	bmi.n	80025b4 <_vfiprintf_r+0x220>
 80025ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025b0:	f7ff fe33 	bl	800221a <__retarget_lock_release_recursive>
 80025b4:	89ab      	ldrh	r3, [r5, #12]
 80025b6:	065b      	lsls	r3, r3, #25
 80025b8:	f53f af12 	bmi.w	80023e0 <_vfiprintf_r+0x4c>
 80025bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025be:	e711      	b.n	80023e4 <_vfiprintf_r+0x50>
 80025c0:	ab03      	add	r3, sp, #12
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	462a      	mov	r2, r5
 80025c6:	4630      	mov	r0, r6
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <_vfiprintf_r+0x25c>)
 80025ca:	a904      	add	r1, sp, #16
 80025cc:	f000 f882 	bl	80026d4 <_printf_i>
 80025d0:	e7e4      	b.n	800259c <_vfiprintf_r+0x208>
 80025d2:	bf00      	nop
 80025d4:	08002fa0 	.word	0x08002fa0
 80025d8:	08002fc0 	.word	0x08002fc0
 80025dc:	08002f80 	.word	0x08002f80
 80025e0:	08002fe0 	.word	0x08002fe0
 80025e4:	08002fe6 	.word	0x08002fe6
 80025e8:	08002fea 	.word	0x08002fea
 80025ec:	00000000 	.word	0x00000000
 80025f0:	0800236f 	.word	0x0800236f

080025f4 <_printf_common>:
 80025f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025f8:	4616      	mov	r6, r2
 80025fa:	4699      	mov	r9, r3
 80025fc:	688a      	ldr	r2, [r1, #8]
 80025fe:	690b      	ldr	r3, [r1, #16]
 8002600:	4607      	mov	r7, r0
 8002602:	4293      	cmp	r3, r2
 8002604:	bfb8      	it	lt
 8002606:	4613      	movlt	r3, r2
 8002608:	6033      	str	r3, [r6, #0]
 800260a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800260e:	460c      	mov	r4, r1
 8002610:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002614:	b10a      	cbz	r2, 800261a <_printf_common+0x26>
 8002616:	3301      	adds	r3, #1
 8002618:	6033      	str	r3, [r6, #0]
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	0699      	lsls	r1, r3, #26
 800261e:	bf42      	ittt	mi
 8002620:	6833      	ldrmi	r3, [r6, #0]
 8002622:	3302      	addmi	r3, #2
 8002624:	6033      	strmi	r3, [r6, #0]
 8002626:	6825      	ldr	r5, [r4, #0]
 8002628:	f015 0506 	ands.w	r5, r5, #6
 800262c:	d106      	bne.n	800263c <_printf_common+0x48>
 800262e:	f104 0a19 	add.w	sl, r4, #25
 8002632:	68e3      	ldr	r3, [r4, #12]
 8002634:	6832      	ldr	r2, [r6, #0]
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	42ab      	cmp	r3, r5
 800263a:	dc28      	bgt.n	800268e <_printf_common+0x9a>
 800263c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002640:	1e13      	subs	r3, r2, #0
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	bf18      	it	ne
 8002646:	2301      	movne	r3, #1
 8002648:	0692      	lsls	r2, r2, #26
 800264a:	d42d      	bmi.n	80026a8 <_printf_common+0xb4>
 800264c:	4649      	mov	r1, r9
 800264e:	4638      	mov	r0, r7
 8002650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002654:	47c0      	blx	r8
 8002656:	3001      	adds	r0, #1
 8002658:	d020      	beq.n	800269c <_printf_common+0xa8>
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	68e5      	ldr	r5, [r4, #12]
 800265e:	f003 0306 	and.w	r3, r3, #6
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf18      	it	ne
 8002666:	2500      	movne	r5, #0
 8002668:	6832      	ldr	r2, [r6, #0]
 800266a:	f04f 0600 	mov.w	r6, #0
 800266e:	68a3      	ldr	r3, [r4, #8]
 8002670:	bf08      	it	eq
 8002672:	1aad      	subeq	r5, r5, r2
 8002674:	6922      	ldr	r2, [r4, #16]
 8002676:	bf08      	it	eq
 8002678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800267c:	4293      	cmp	r3, r2
 800267e:	bfc4      	itt	gt
 8002680:	1a9b      	subgt	r3, r3, r2
 8002682:	18ed      	addgt	r5, r5, r3
 8002684:	341a      	adds	r4, #26
 8002686:	42b5      	cmp	r5, r6
 8002688:	d11a      	bne.n	80026c0 <_printf_common+0xcc>
 800268a:	2000      	movs	r0, #0
 800268c:	e008      	b.n	80026a0 <_printf_common+0xac>
 800268e:	2301      	movs	r3, #1
 8002690:	4652      	mov	r2, sl
 8002692:	4649      	mov	r1, r9
 8002694:	4638      	mov	r0, r7
 8002696:	47c0      	blx	r8
 8002698:	3001      	adds	r0, #1
 800269a:	d103      	bne.n	80026a4 <_printf_common+0xb0>
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026a4:	3501      	adds	r5, #1
 80026a6:	e7c4      	b.n	8002632 <_printf_common+0x3e>
 80026a8:	2030      	movs	r0, #48	; 0x30
 80026aa:	18e1      	adds	r1, r4, r3
 80026ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026b6:	4422      	add	r2, r4
 80026b8:	3302      	adds	r3, #2
 80026ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026be:	e7c5      	b.n	800264c <_printf_common+0x58>
 80026c0:	2301      	movs	r3, #1
 80026c2:	4622      	mov	r2, r4
 80026c4:	4649      	mov	r1, r9
 80026c6:	4638      	mov	r0, r7
 80026c8:	47c0      	blx	r8
 80026ca:	3001      	adds	r0, #1
 80026cc:	d0e6      	beq.n	800269c <_printf_common+0xa8>
 80026ce:	3601      	adds	r6, #1
 80026d0:	e7d9      	b.n	8002686 <_printf_common+0x92>
	...

080026d4 <_printf_i>:
 80026d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026d8:	7e0f      	ldrb	r7, [r1, #24]
 80026da:	4691      	mov	r9, r2
 80026dc:	2f78      	cmp	r7, #120	; 0x78
 80026de:	4680      	mov	r8, r0
 80026e0:	460c      	mov	r4, r1
 80026e2:	469a      	mov	sl, r3
 80026e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026ea:	d807      	bhi.n	80026fc <_printf_i+0x28>
 80026ec:	2f62      	cmp	r7, #98	; 0x62
 80026ee:	d80a      	bhi.n	8002706 <_printf_i+0x32>
 80026f0:	2f00      	cmp	r7, #0
 80026f2:	f000 80d9 	beq.w	80028a8 <_printf_i+0x1d4>
 80026f6:	2f58      	cmp	r7, #88	; 0x58
 80026f8:	f000 80a4 	beq.w	8002844 <_printf_i+0x170>
 80026fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002704:	e03a      	b.n	800277c <_printf_i+0xa8>
 8002706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800270a:	2b15      	cmp	r3, #21
 800270c:	d8f6      	bhi.n	80026fc <_printf_i+0x28>
 800270e:	a101      	add	r1, pc, #4	; (adr r1, 8002714 <_printf_i+0x40>)
 8002710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002714:	0800276d 	.word	0x0800276d
 8002718:	08002781 	.word	0x08002781
 800271c:	080026fd 	.word	0x080026fd
 8002720:	080026fd 	.word	0x080026fd
 8002724:	080026fd 	.word	0x080026fd
 8002728:	080026fd 	.word	0x080026fd
 800272c:	08002781 	.word	0x08002781
 8002730:	080026fd 	.word	0x080026fd
 8002734:	080026fd 	.word	0x080026fd
 8002738:	080026fd 	.word	0x080026fd
 800273c:	080026fd 	.word	0x080026fd
 8002740:	0800288f 	.word	0x0800288f
 8002744:	080027b1 	.word	0x080027b1
 8002748:	08002871 	.word	0x08002871
 800274c:	080026fd 	.word	0x080026fd
 8002750:	080026fd 	.word	0x080026fd
 8002754:	080028b1 	.word	0x080028b1
 8002758:	080026fd 	.word	0x080026fd
 800275c:	080027b1 	.word	0x080027b1
 8002760:	080026fd 	.word	0x080026fd
 8002764:	080026fd 	.word	0x080026fd
 8002768:	08002879 	.word	0x08002879
 800276c:	682b      	ldr	r3, [r5, #0]
 800276e:	1d1a      	adds	r2, r3, #4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	602a      	str	r2, [r5, #0]
 8002774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800277c:	2301      	movs	r3, #1
 800277e:	e0a4      	b.n	80028ca <_printf_i+0x1f6>
 8002780:	6820      	ldr	r0, [r4, #0]
 8002782:	6829      	ldr	r1, [r5, #0]
 8002784:	0606      	lsls	r6, r0, #24
 8002786:	f101 0304 	add.w	r3, r1, #4
 800278a:	d50a      	bpl.n	80027a2 <_printf_i+0xce>
 800278c:	680e      	ldr	r6, [r1, #0]
 800278e:	602b      	str	r3, [r5, #0]
 8002790:	2e00      	cmp	r6, #0
 8002792:	da03      	bge.n	800279c <_printf_i+0xc8>
 8002794:	232d      	movs	r3, #45	; 0x2d
 8002796:	4276      	negs	r6, r6
 8002798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800279c:	230a      	movs	r3, #10
 800279e:	485e      	ldr	r0, [pc, #376]	; (8002918 <_printf_i+0x244>)
 80027a0:	e019      	b.n	80027d6 <_printf_i+0x102>
 80027a2:	680e      	ldr	r6, [r1, #0]
 80027a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80027a8:	602b      	str	r3, [r5, #0]
 80027aa:	bf18      	it	ne
 80027ac:	b236      	sxthne	r6, r6
 80027ae:	e7ef      	b.n	8002790 <_printf_i+0xbc>
 80027b0:	682b      	ldr	r3, [r5, #0]
 80027b2:	6820      	ldr	r0, [r4, #0]
 80027b4:	1d19      	adds	r1, r3, #4
 80027b6:	6029      	str	r1, [r5, #0]
 80027b8:	0601      	lsls	r1, r0, #24
 80027ba:	d501      	bpl.n	80027c0 <_printf_i+0xec>
 80027bc:	681e      	ldr	r6, [r3, #0]
 80027be:	e002      	b.n	80027c6 <_printf_i+0xf2>
 80027c0:	0646      	lsls	r6, r0, #25
 80027c2:	d5fb      	bpl.n	80027bc <_printf_i+0xe8>
 80027c4:	881e      	ldrh	r6, [r3, #0]
 80027c6:	2f6f      	cmp	r7, #111	; 0x6f
 80027c8:	bf0c      	ite	eq
 80027ca:	2308      	moveq	r3, #8
 80027cc:	230a      	movne	r3, #10
 80027ce:	4852      	ldr	r0, [pc, #328]	; (8002918 <_printf_i+0x244>)
 80027d0:	2100      	movs	r1, #0
 80027d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027d6:	6865      	ldr	r5, [r4, #4]
 80027d8:	2d00      	cmp	r5, #0
 80027da:	bfa8      	it	ge
 80027dc:	6821      	ldrge	r1, [r4, #0]
 80027de:	60a5      	str	r5, [r4, #8]
 80027e0:	bfa4      	itt	ge
 80027e2:	f021 0104 	bicge.w	r1, r1, #4
 80027e6:	6021      	strge	r1, [r4, #0]
 80027e8:	b90e      	cbnz	r6, 80027ee <_printf_i+0x11a>
 80027ea:	2d00      	cmp	r5, #0
 80027ec:	d04d      	beq.n	800288a <_printf_i+0x1b6>
 80027ee:	4615      	mov	r5, r2
 80027f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80027f4:	fb03 6711 	mls	r7, r3, r1, r6
 80027f8:	5dc7      	ldrb	r7, [r0, r7]
 80027fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027fe:	4637      	mov	r7, r6
 8002800:	42bb      	cmp	r3, r7
 8002802:	460e      	mov	r6, r1
 8002804:	d9f4      	bls.n	80027f0 <_printf_i+0x11c>
 8002806:	2b08      	cmp	r3, #8
 8002808:	d10b      	bne.n	8002822 <_printf_i+0x14e>
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	07de      	lsls	r6, r3, #31
 800280e:	d508      	bpl.n	8002822 <_printf_i+0x14e>
 8002810:	6923      	ldr	r3, [r4, #16]
 8002812:	6861      	ldr	r1, [r4, #4]
 8002814:	4299      	cmp	r1, r3
 8002816:	bfde      	ittt	le
 8002818:	2330      	movle	r3, #48	; 0x30
 800281a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800281e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002822:	1b52      	subs	r2, r2, r5
 8002824:	6122      	str	r2, [r4, #16]
 8002826:	464b      	mov	r3, r9
 8002828:	4621      	mov	r1, r4
 800282a:	4640      	mov	r0, r8
 800282c:	f8cd a000 	str.w	sl, [sp]
 8002830:	aa03      	add	r2, sp, #12
 8002832:	f7ff fedf 	bl	80025f4 <_printf_common>
 8002836:	3001      	adds	r0, #1
 8002838:	d14c      	bne.n	80028d4 <_printf_i+0x200>
 800283a:	f04f 30ff 	mov.w	r0, #4294967295
 800283e:	b004      	add	sp, #16
 8002840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002844:	4834      	ldr	r0, [pc, #208]	; (8002918 <_printf_i+0x244>)
 8002846:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800284a:	6829      	ldr	r1, [r5, #0]
 800284c:	6823      	ldr	r3, [r4, #0]
 800284e:	f851 6b04 	ldr.w	r6, [r1], #4
 8002852:	6029      	str	r1, [r5, #0]
 8002854:	061d      	lsls	r5, r3, #24
 8002856:	d514      	bpl.n	8002882 <_printf_i+0x1ae>
 8002858:	07df      	lsls	r7, r3, #31
 800285a:	bf44      	itt	mi
 800285c:	f043 0320 	orrmi.w	r3, r3, #32
 8002860:	6023      	strmi	r3, [r4, #0]
 8002862:	b91e      	cbnz	r6, 800286c <_printf_i+0x198>
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	f023 0320 	bic.w	r3, r3, #32
 800286a:	6023      	str	r3, [r4, #0]
 800286c:	2310      	movs	r3, #16
 800286e:	e7af      	b.n	80027d0 <_printf_i+0xfc>
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	f043 0320 	orr.w	r3, r3, #32
 8002876:	6023      	str	r3, [r4, #0]
 8002878:	2378      	movs	r3, #120	; 0x78
 800287a:	4828      	ldr	r0, [pc, #160]	; (800291c <_printf_i+0x248>)
 800287c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002880:	e7e3      	b.n	800284a <_printf_i+0x176>
 8002882:	0659      	lsls	r1, r3, #25
 8002884:	bf48      	it	mi
 8002886:	b2b6      	uxthmi	r6, r6
 8002888:	e7e6      	b.n	8002858 <_printf_i+0x184>
 800288a:	4615      	mov	r5, r2
 800288c:	e7bb      	b.n	8002806 <_printf_i+0x132>
 800288e:	682b      	ldr	r3, [r5, #0]
 8002890:	6826      	ldr	r6, [r4, #0]
 8002892:	1d18      	adds	r0, r3, #4
 8002894:	6961      	ldr	r1, [r4, #20]
 8002896:	6028      	str	r0, [r5, #0]
 8002898:	0635      	lsls	r5, r6, #24
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	d501      	bpl.n	80028a2 <_printf_i+0x1ce>
 800289e:	6019      	str	r1, [r3, #0]
 80028a0:	e002      	b.n	80028a8 <_printf_i+0x1d4>
 80028a2:	0670      	lsls	r0, r6, #25
 80028a4:	d5fb      	bpl.n	800289e <_printf_i+0x1ca>
 80028a6:	8019      	strh	r1, [r3, #0]
 80028a8:	2300      	movs	r3, #0
 80028aa:	4615      	mov	r5, r2
 80028ac:	6123      	str	r3, [r4, #16]
 80028ae:	e7ba      	b.n	8002826 <_printf_i+0x152>
 80028b0:	682b      	ldr	r3, [r5, #0]
 80028b2:	2100      	movs	r1, #0
 80028b4:	1d1a      	adds	r2, r3, #4
 80028b6:	602a      	str	r2, [r5, #0]
 80028b8:	681d      	ldr	r5, [r3, #0]
 80028ba:	6862      	ldr	r2, [r4, #4]
 80028bc:	4628      	mov	r0, r5
 80028be:	f000 fa9b 	bl	8002df8 <memchr>
 80028c2:	b108      	cbz	r0, 80028c8 <_printf_i+0x1f4>
 80028c4:	1b40      	subs	r0, r0, r5
 80028c6:	6060      	str	r0, [r4, #4]
 80028c8:	6863      	ldr	r3, [r4, #4]
 80028ca:	6123      	str	r3, [r4, #16]
 80028cc:	2300      	movs	r3, #0
 80028ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028d2:	e7a8      	b.n	8002826 <_printf_i+0x152>
 80028d4:	462a      	mov	r2, r5
 80028d6:	4649      	mov	r1, r9
 80028d8:	4640      	mov	r0, r8
 80028da:	6923      	ldr	r3, [r4, #16]
 80028dc:	47d0      	blx	sl
 80028de:	3001      	adds	r0, #1
 80028e0:	d0ab      	beq.n	800283a <_printf_i+0x166>
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	079b      	lsls	r3, r3, #30
 80028e6:	d413      	bmi.n	8002910 <_printf_i+0x23c>
 80028e8:	68e0      	ldr	r0, [r4, #12]
 80028ea:	9b03      	ldr	r3, [sp, #12]
 80028ec:	4298      	cmp	r0, r3
 80028ee:	bfb8      	it	lt
 80028f0:	4618      	movlt	r0, r3
 80028f2:	e7a4      	b.n	800283e <_printf_i+0x16a>
 80028f4:	2301      	movs	r3, #1
 80028f6:	4632      	mov	r2, r6
 80028f8:	4649      	mov	r1, r9
 80028fa:	4640      	mov	r0, r8
 80028fc:	47d0      	blx	sl
 80028fe:	3001      	adds	r0, #1
 8002900:	d09b      	beq.n	800283a <_printf_i+0x166>
 8002902:	3501      	adds	r5, #1
 8002904:	68e3      	ldr	r3, [r4, #12]
 8002906:	9903      	ldr	r1, [sp, #12]
 8002908:	1a5b      	subs	r3, r3, r1
 800290a:	42ab      	cmp	r3, r5
 800290c:	dcf2      	bgt.n	80028f4 <_printf_i+0x220>
 800290e:	e7eb      	b.n	80028e8 <_printf_i+0x214>
 8002910:	2500      	movs	r5, #0
 8002912:	f104 0619 	add.w	r6, r4, #25
 8002916:	e7f5      	b.n	8002904 <_printf_i+0x230>
 8002918:	08002ff1 	.word	0x08002ff1
 800291c:	08003002 	.word	0x08003002

08002920 <_sbrk_r>:
 8002920:	b538      	push	{r3, r4, r5, lr}
 8002922:	2300      	movs	r3, #0
 8002924:	4d05      	ldr	r5, [pc, #20]	; (800293c <_sbrk_r+0x1c>)
 8002926:	4604      	mov	r4, r0
 8002928:	4608      	mov	r0, r1
 800292a:	602b      	str	r3, [r5, #0]
 800292c:	f7fd ff28 	bl	8000780 <_sbrk>
 8002930:	1c43      	adds	r3, r0, #1
 8002932:	d102      	bne.n	800293a <_sbrk_r+0x1a>
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	b103      	cbz	r3, 800293a <_sbrk_r+0x1a>
 8002938:	6023      	str	r3, [r4, #0]
 800293a:	bd38      	pop	{r3, r4, r5, pc}
 800293c:	20000138 	.word	0x20000138

08002940 <__sread>:
 8002940:	b510      	push	{r4, lr}
 8002942:	460c      	mov	r4, r1
 8002944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002948:	f000 fab8 	bl	8002ebc <_read_r>
 800294c:	2800      	cmp	r0, #0
 800294e:	bfab      	itete	ge
 8002950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002952:	89a3      	ldrhlt	r3, [r4, #12]
 8002954:	181b      	addge	r3, r3, r0
 8002956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800295a:	bfac      	ite	ge
 800295c:	6563      	strge	r3, [r4, #84]	; 0x54
 800295e:	81a3      	strhlt	r3, [r4, #12]
 8002960:	bd10      	pop	{r4, pc}

08002962 <__swrite>:
 8002962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002966:	461f      	mov	r7, r3
 8002968:	898b      	ldrh	r3, [r1, #12]
 800296a:	4605      	mov	r5, r0
 800296c:	05db      	lsls	r3, r3, #23
 800296e:	460c      	mov	r4, r1
 8002970:	4616      	mov	r6, r2
 8002972:	d505      	bpl.n	8002980 <__swrite+0x1e>
 8002974:	2302      	movs	r3, #2
 8002976:	2200      	movs	r2, #0
 8002978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800297c:	f000 f9c4 	bl	8002d08 <_lseek_r>
 8002980:	89a3      	ldrh	r3, [r4, #12]
 8002982:	4632      	mov	r2, r6
 8002984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002988:	81a3      	strh	r3, [r4, #12]
 800298a:	4628      	mov	r0, r5
 800298c:	463b      	mov	r3, r7
 800298e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002996:	f000 b869 	b.w	8002a6c <_write_r>

0800299a <__sseek>:
 800299a:	b510      	push	{r4, lr}
 800299c:	460c      	mov	r4, r1
 800299e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a2:	f000 f9b1 	bl	8002d08 <_lseek_r>
 80029a6:	1c43      	adds	r3, r0, #1
 80029a8:	89a3      	ldrh	r3, [r4, #12]
 80029aa:	bf15      	itete	ne
 80029ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80029ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029b6:	81a3      	strheq	r3, [r4, #12]
 80029b8:	bf18      	it	ne
 80029ba:	81a3      	strhne	r3, [r4, #12]
 80029bc:	bd10      	pop	{r4, pc}

080029be <__sclose>:
 80029be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029c2:	f000 b8d3 	b.w	8002b6c <_close_r>
	...

080029c8 <__swbuf_r>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	460e      	mov	r6, r1
 80029cc:	4614      	mov	r4, r2
 80029ce:	4605      	mov	r5, r0
 80029d0:	b118      	cbz	r0, 80029da <__swbuf_r+0x12>
 80029d2:	6983      	ldr	r3, [r0, #24]
 80029d4:	b90b      	cbnz	r3, 80029da <__swbuf_r+0x12>
 80029d6:	f7ff fb81 	bl	80020dc <__sinit>
 80029da:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <__swbuf_r+0x98>)
 80029dc:	429c      	cmp	r4, r3
 80029de:	d12b      	bne.n	8002a38 <__swbuf_r+0x70>
 80029e0:	686c      	ldr	r4, [r5, #4]
 80029e2:	69a3      	ldr	r3, [r4, #24]
 80029e4:	60a3      	str	r3, [r4, #8]
 80029e6:	89a3      	ldrh	r3, [r4, #12]
 80029e8:	071a      	lsls	r2, r3, #28
 80029ea:	d52f      	bpl.n	8002a4c <__swbuf_r+0x84>
 80029ec:	6923      	ldr	r3, [r4, #16]
 80029ee:	b36b      	cbz	r3, 8002a4c <__swbuf_r+0x84>
 80029f0:	6923      	ldr	r3, [r4, #16]
 80029f2:	6820      	ldr	r0, [r4, #0]
 80029f4:	b2f6      	uxtb	r6, r6
 80029f6:	1ac0      	subs	r0, r0, r3
 80029f8:	6963      	ldr	r3, [r4, #20]
 80029fa:	4637      	mov	r7, r6
 80029fc:	4283      	cmp	r3, r0
 80029fe:	dc04      	bgt.n	8002a0a <__swbuf_r+0x42>
 8002a00:	4621      	mov	r1, r4
 8002a02:	4628      	mov	r0, r5
 8002a04:	f000 f944 	bl	8002c90 <_fflush_r>
 8002a08:	bb30      	cbnz	r0, 8002a58 <__swbuf_r+0x90>
 8002a0a:	68a3      	ldr	r3, [r4, #8]
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	60a3      	str	r3, [r4, #8]
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	6022      	str	r2, [r4, #0]
 8002a18:	701e      	strb	r6, [r3, #0]
 8002a1a:	6963      	ldr	r3, [r4, #20]
 8002a1c:	4283      	cmp	r3, r0
 8002a1e:	d004      	beq.n	8002a2a <__swbuf_r+0x62>
 8002a20:	89a3      	ldrh	r3, [r4, #12]
 8002a22:	07db      	lsls	r3, r3, #31
 8002a24:	d506      	bpl.n	8002a34 <__swbuf_r+0x6c>
 8002a26:	2e0a      	cmp	r6, #10
 8002a28:	d104      	bne.n	8002a34 <__swbuf_r+0x6c>
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	f000 f92f 	bl	8002c90 <_fflush_r>
 8002a32:	b988      	cbnz	r0, 8002a58 <__swbuf_r+0x90>
 8002a34:	4638      	mov	r0, r7
 8002a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <__swbuf_r+0x9c>)
 8002a3a:	429c      	cmp	r4, r3
 8002a3c:	d101      	bne.n	8002a42 <__swbuf_r+0x7a>
 8002a3e:	68ac      	ldr	r4, [r5, #8]
 8002a40:	e7cf      	b.n	80029e2 <__swbuf_r+0x1a>
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <__swbuf_r+0xa0>)
 8002a44:	429c      	cmp	r4, r3
 8002a46:	bf08      	it	eq
 8002a48:	68ec      	ldreq	r4, [r5, #12]
 8002a4a:	e7ca      	b.n	80029e2 <__swbuf_r+0x1a>
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f000 f81e 	bl	8002a90 <__swsetup_r>
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d0cb      	beq.n	80029f0 <__swbuf_r+0x28>
 8002a58:	f04f 37ff 	mov.w	r7, #4294967295
 8002a5c:	e7ea      	b.n	8002a34 <__swbuf_r+0x6c>
 8002a5e:	bf00      	nop
 8002a60:	08002fa0 	.word	0x08002fa0
 8002a64:	08002fc0 	.word	0x08002fc0
 8002a68:	08002f80 	.word	0x08002f80

08002a6c <_write_r>:
 8002a6c:	b538      	push	{r3, r4, r5, lr}
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	2200      	movs	r2, #0
 8002a76:	4d05      	ldr	r5, [pc, #20]	; (8002a8c <_write_r+0x20>)
 8002a78:	602a      	str	r2, [r5, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7fd fe33 	bl	80006e6 <_write>
 8002a80:	1c43      	adds	r3, r0, #1
 8002a82:	d102      	bne.n	8002a8a <_write_r+0x1e>
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	b103      	cbz	r3, 8002a8a <_write_r+0x1e>
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	bd38      	pop	{r3, r4, r5, pc}
 8002a8c:	20000138 	.word	0x20000138

08002a90 <__swsetup_r>:
 8002a90:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <__swsetup_r+0xcc>)
 8002a92:	b570      	push	{r4, r5, r6, lr}
 8002a94:	681d      	ldr	r5, [r3, #0]
 8002a96:	4606      	mov	r6, r0
 8002a98:	460c      	mov	r4, r1
 8002a9a:	b125      	cbz	r5, 8002aa6 <__swsetup_r+0x16>
 8002a9c:	69ab      	ldr	r3, [r5, #24]
 8002a9e:	b913      	cbnz	r3, 8002aa6 <__swsetup_r+0x16>
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f7ff fb1b 	bl	80020dc <__sinit>
 8002aa6:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <__swsetup_r+0xd0>)
 8002aa8:	429c      	cmp	r4, r3
 8002aaa:	d10f      	bne.n	8002acc <__swsetup_r+0x3c>
 8002aac:	686c      	ldr	r4, [r5, #4]
 8002aae:	89a3      	ldrh	r3, [r4, #12]
 8002ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ab4:	0719      	lsls	r1, r3, #28
 8002ab6:	d42c      	bmi.n	8002b12 <__swsetup_r+0x82>
 8002ab8:	06dd      	lsls	r5, r3, #27
 8002aba:	d411      	bmi.n	8002ae0 <__swsetup_r+0x50>
 8002abc:	2309      	movs	r3, #9
 8002abe:	6033      	str	r3, [r6, #0]
 8002ac0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	81a3      	strh	r3, [r4, #12]
 8002aca:	e03e      	b.n	8002b4a <__swsetup_r+0xba>
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <__swsetup_r+0xd4>)
 8002ace:	429c      	cmp	r4, r3
 8002ad0:	d101      	bne.n	8002ad6 <__swsetup_r+0x46>
 8002ad2:	68ac      	ldr	r4, [r5, #8]
 8002ad4:	e7eb      	b.n	8002aae <__swsetup_r+0x1e>
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <__swsetup_r+0xd8>)
 8002ad8:	429c      	cmp	r4, r3
 8002ada:	bf08      	it	eq
 8002adc:	68ec      	ldreq	r4, [r5, #12]
 8002ade:	e7e6      	b.n	8002aae <__swsetup_r+0x1e>
 8002ae0:	0758      	lsls	r0, r3, #29
 8002ae2:	d512      	bpl.n	8002b0a <__swsetup_r+0x7a>
 8002ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ae6:	b141      	cbz	r1, 8002afa <__swsetup_r+0x6a>
 8002ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002aec:	4299      	cmp	r1, r3
 8002aee:	d002      	beq.n	8002af6 <__swsetup_r+0x66>
 8002af0:	4630      	mov	r0, r6
 8002af2:	f000 f99b 	bl	8002e2c <_free_r>
 8002af6:	2300      	movs	r3, #0
 8002af8:	6363      	str	r3, [r4, #52]	; 0x34
 8002afa:	89a3      	ldrh	r3, [r4, #12]
 8002afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b00:	81a3      	strh	r3, [r4, #12]
 8002b02:	2300      	movs	r3, #0
 8002b04:	6063      	str	r3, [r4, #4]
 8002b06:	6923      	ldr	r3, [r4, #16]
 8002b08:	6023      	str	r3, [r4, #0]
 8002b0a:	89a3      	ldrh	r3, [r4, #12]
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	81a3      	strh	r3, [r4, #12]
 8002b12:	6923      	ldr	r3, [r4, #16]
 8002b14:	b94b      	cbnz	r3, 8002b2a <__swsetup_r+0x9a>
 8002b16:	89a3      	ldrh	r3, [r4, #12]
 8002b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b20:	d003      	beq.n	8002b2a <__swsetup_r+0x9a>
 8002b22:	4621      	mov	r1, r4
 8002b24:	4630      	mov	r0, r6
 8002b26:	f000 f927 	bl	8002d78 <__smakebuf_r>
 8002b2a:	89a0      	ldrh	r0, [r4, #12]
 8002b2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b30:	f010 0301 	ands.w	r3, r0, #1
 8002b34:	d00a      	beq.n	8002b4c <__swsetup_r+0xbc>
 8002b36:	2300      	movs	r3, #0
 8002b38:	60a3      	str	r3, [r4, #8]
 8002b3a:	6963      	ldr	r3, [r4, #20]
 8002b3c:	425b      	negs	r3, r3
 8002b3e:	61a3      	str	r3, [r4, #24]
 8002b40:	6923      	ldr	r3, [r4, #16]
 8002b42:	b943      	cbnz	r3, 8002b56 <__swsetup_r+0xc6>
 8002b44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b48:	d1ba      	bne.n	8002ac0 <__swsetup_r+0x30>
 8002b4a:	bd70      	pop	{r4, r5, r6, pc}
 8002b4c:	0781      	lsls	r1, r0, #30
 8002b4e:	bf58      	it	pl
 8002b50:	6963      	ldrpl	r3, [r4, #20]
 8002b52:	60a3      	str	r3, [r4, #8]
 8002b54:	e7f4      	b.n	8002b40 <__swsetup_r+0xb0>
 8002b56:	2000      	movs	r0, #0
 8002b58:	e7f7      	b.n	8002b4a <__swsetup_r+0xba>
 8002b5a:	bf00      	nop
 8002b5c:	2000000c 	.word	0x2000000c
 8002b60:	08002fa0 	.word	0x08002fa0
 8002b64:	08002fc0 	.word	0x08002fc0
 8002b68:	08002f80 	.word	0x08002f80

08002b6c <_close_r>:
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	2300      	movs	r3, #0
 8002b70:	4d05      	ldr	r5, [pc, #20]	; (8002b88 <_close_r+0x1c>)
 8002b72:	4604      	mov	r4, r0
 8002b74:	4608      	mov	r0, r1
 8002b76:	602b      	str	r3, [r5, #0]
 8002b78:	f7fd fdd1 	bl	800071e <_close>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d102      	bne.n	8002b86 <_close_r+0x1a>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	b103      	cbz	r3, 8002b86 <_close_r+0x1a>
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
 8002b88:	20000138 	.word	0x20000138

08002b8c <__sflush_r>:
 8002b8c:	898a      	ldrh	r2, [r1, #12]
 8002b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b90:	4605      	mov	r5, r0
 8002b92:	0710      	lsls	r0, r2, #28
 8002b94:	460c      	mov	r4, r1
 8002b96:	d457      	bmi.n	8002c48 <__sflush_r+0xbc>
 8002b98:	684b      	ldr	r3, [r1, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	dc04      	bgt.n	8002ba8 <__sflush_r+0x1c>
 8002b9e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	dc01      	bgt.n	8002ba8 <__sflush_r+0x1c>
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ba8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002baa:	2e00      	cmp	r6, #0
 8002bac:	d0fa      	beq.n	8002ba4 <__sflush_r+0x18>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bb4:	682f      	ldr	r7, [r5, #0]
 8002bb6:	602b      	str	r3, [r5, #0]
 8002bb8:	d032      	beq.n	8002c20 <__sflush_r+0x94>
 8002bba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	075a      	lsls	r2, r3, #29
 8002bc0:	d505      	bpl.n	8002bce <__sflush_r+0x42>
 8002bc2:	6863      	ldr	r3, [r4, #4]
 8002bc4:	1ac0      	subs	r0, r0, r3
 8002bc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bc8:	b10b      	cbz	r3, 8002bce <__sflush_r+0x42>
 8002bca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bcc:	1ac0      	subs	r0, r0, r3
 8002bce:	2300      	movs	r3, #0
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	6a21      	ldr	r1, [r4, #32]
 8002bd8:	47b0      	blx	r6
 8002bda:	1c43      	adds	r3, r0, #1
 8002bdc:	89a3      	ldrh	r3, [r4, #12]
 8002bde:	d106      	bne.n	8002bee <__sflush_r+0x62>
 8002be0:	6829      	ldr	r1, [r5, #0]
 8002be2:	291d      	cmp	r1, #29
 8002be4:	d82c      	bhi.n	8002c40 <__sflush_r+0xb4>
 8002be6:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <__sflush_r+0x100>)
 8002be8:	40ca      	lsrs	r2, r1
 8002bea:	07d6      	lsls	r6, r2, #31
 8002bec:	d528      	bpl.n	8002c40 <__sflush_r+0xb4>
 8002bee:	2200      	movs	r2, #0
 8002bf0:	6062      	str	r2, [r4, #4]
 8002bf2:	6922      	ldr	r2, [r4, #16]
 8002bf4:	04d9      	lsls	r1, r3, #19
 8002bf6:	6022      	str	r2, [r4, #0]
 8002bf8:	d504      	bpl.n	8002c04 <__sflush_r+0x78>
 8002bfa:	1c42      	adds	r2, r0, #1
 8002bfc:	d101      	bne.n	8002c02 <__sflush_r+0x76>
 8002bfe:	682b      	ldr	r3, [r5, #0]
 8002c00:	b903      	cbnz	r3, 8002c04 <__sflush_r+0x78>
 8002c02:	6560      	str	r0, [r4, #84]	; 0x54
 8002c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c06:	602f      	str	r7, [r5, #0]
 8002c08:	2900      	cmp	r1, #0
 8002c0a:	d0cb      	beq.n	8002ba4 <__sflush_r+0x18>
 8002c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c10:	4299      	cmp	r1, r3
 8002c12:	d002      	beq.n	8002c1a <__sflush_r+0x8e>
 8002c14:	4628      	mov	r0, r5
 8002c16:	f000 f909 	bl	8002e2c <_free_r>
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8002c1e:	e7c2      	b.n	8002ba6 <__sflush_r+0x1a>
 8002c20:	6a21      	ldr	r1, [r4, #32]
 8002c22:	2301      	movs	r3, #1
 8002c24:	4628      	mov	r0, r5
 8002c26:	47b0      	blx	r6
 8002c28:	1c41      	adds	r1, r0, #1
 8002c2a:	d1c7      	bne.n	8002bbc <__sflush_r+0x30>
 8002c2c:	682b      	ldr	r3, [r5, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0c4      	beq.n	8002bbc <__sflush_r+0x30>
 8002c32:	2b1d      	cmp	r3, #29
 8002c34:	d001      	beq.n	8002c3a <__sflush_r+0xae>
 8002c36:	2b16      	cmp	r3, #22
 8002c38:	d101      	bne.n	8002c3e <__sflush_r+0xb2>
 8002c3a:	602f      	str	r7, [r5, #0]
 8002c3c:	e7b2      	b.n	8002ba4 <__sflush_r+0x18>
 8002c3e:	89a3      	ldrh	r3, [r4, #12]
 8002c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c44:	81a3      	strh	r3, [r4, #12]
 8002c46:	e7ae      	b.n	8002ba6 <__sflush_r+0x1a>
 8002c48:	690f      	ldr	r7, [r1, #16]
 8002c4a:	2f00      	cmp	r7, #0
 8002c4c:	d0aa      	beq.n	8002ba4 <__sflush_r+0x18>
 8002c4e:	0793      	lsls	r3, r2, #30
 8002c50:	bf18      	it	ne
 8002c52:	2300      	movne	r3, #0
 8002c54:	680e      	ldr	r6, [r1, #0]
 8002c56:	bf08      	it	eq
 8002c58:	694b      	ldreq	r3, [r1, #20]
 8002c5a:	1bf6      	subs	r6, r6, r7
 8002c5c:	600f      	str	r7, [r1, #0]
 8002c5e:	608b      	str	r3, [r1, #8]
 8002c60:	2e00      	cmp	r6, #0
 8002c62:	dd9f      	ble.n	8002ba4 <__sflush_r+0x18>
 8002c64:	4633      	mov	r3, r6
 8002c66:	463a      	mov	r2, r7
 8002c68:	4628      	mov	r0, r5
 8002c6a:	6a21      	ldr	r1, [r4, #32]
 8002c6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002c70:	47e0      	blx	ip
 8002c72:	2800      	cmp	r0, #0
 8002c74:	dc06      	bgt.n	8002c84 <__sflush_r+0xf8>
 8002c76:	89a3      	ldrh	r3, [r4, #12]
 8002c78:	f04f 30ff 	mov.w	r0, #4294967295
 8002c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c80:	81a3      	strh	r3, [r4, #12]
 8002c82:	e790      	b.n	8002ba6 <__sflush_r+0x1a>
 8002c84:	4407      	add	r7, r0
 8002c86:	1a36      	subs	r6, r6, r0
 8002c88:	e7ea      	b.n	8002c60 <__sflush_r+0xd4>
 8002c8a:	bf00      	nop
 8002c8c:	20400001 	.word	0x20400001

08002c90 <_fflush_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	690b      	ldr	r3, [r1, #16]
 8002c94:	4605      	mov	r5, r0
 8002c96:	460c      	mov	r4, r1
 8002c98:	b913      	cbnz	r3, 8002ca0 <_fflush_r+0x10>
 8002c9a:	2500      	movs	r5, #0
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	b118      	cbz	r0, 8002caa <_fflush_r+0x1a>
 8002ca2:	6983      	ldr	r3, [r0, #24]
 8002ca4:	b90b      	cbnz	r3, 8002caa <_fflush_r+0x1a>
 8002ca6:	f7ff fa19 	bl	80020dc <__sinit>
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <_fflush_r+0x6c>)
 8002cac:	429c      	cmp	r4, r3
 8002cae:	d11b      	bne.n	8002ce8 <_fflush_r+0x58>
 8002cb0:	686c      	ldr	r4, [r5, #4]
 8002cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0ef      	beq.n	8002c9a <_fflush_r+0xa>
 8002cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002cbc:	07d0      	lsls	r0, r2, #31
 8002cbe:	d404      	bmi.n	8002cca <_fflush_r+0x3a>
 8002cc0:	0599      	lsls	r1, r3, #22
 8002cc2:	d402      	bmi.n	8002cca <_fflush_r+0x3a>
 8002cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cc6:	f7ff faa7 	bl	8002218 <__retarget_lock_acquire_recursive>
 8002cca:	4628      	mov	r0, r5
 8002ccc:	4621      	mov	r1, r4
 8002cce:	f7ff ff5d 	bl	8002b8c <__sflush_r>
 8002cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	07da      	lsls	r2, r3, #31
 8002cd8:	d4e0      	bmi.n	8002c9c <_fflush_r+0xc>
 8002cda:	89a3      	ldrh	r3, [r4, #12]
 8002cdc:	059b      	lsls	r3, r3, #22
 8002cde:	d4dd      	bmi.n	8002c9c <_fflush_r+0xc>
 8002ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ce2:	f7ff fa9a 	bl	800221a <__retarget_lock_release_recursive>
 8002ce6:	e7d9      	b.n	8002c9c <_fflush_r+0xc>
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <_fflush_r+0x70>)
 8002cea:	429c      	cmp	r4, r3
 8002cec:	d101      	bne.n	8002cf2 <_fflush_r+0x62>
 8002cee:	68ac      	ldr	r4, [r5, #8]
 8002cf0:	e7df      	b.n	8002cb2 <_fflush_r+0x22>
 8002cf2:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <_fflush_r+0x74>)
 8002cf4:	429c      	cmp	r4, r3
 8002cf6:	bf08      	it	eq
 8002cf8:	68ec      	ldreq	r4, [r5, #12]
 8002cfa:	e7da      	b.n	8002cb2 <_fflush_r+0x22>
 8002cfc:	08002fa0 	.word	0x08002fa0
 8002d00:	08002fc0 	.word	0x08002fc0
 8002d04:	08002f80 	.word	0x08002f80

08002d08 <_lseek_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	2200      	movs	r2, #0
 8002d12:	4d05      	ldr	r5, [pc, #20]	; (8002d28 <_lseek_r+0x20>)
 8002d14:	602a      	str	r2, [r5, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	f7fd fd25 	bl	8000766 <_lseek>
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	d102      	bne.n	8002d26 <_lseek_r+0x1e>
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	b103      	cbz	r3, 8002d26 <_lseek_r+0x1e>
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	bd38      	pop	{r3, r4, r5, pc}
 8002d28:	20000138 	.word	0x20000138

08002d2c <__swhatbuf_r>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	460e      	mov	r6, r1
 8002d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d34:	4614      	mov	r4, r2
 8002d36:	2900      	cmp	r1, #0
 8002d38:	461d      	mov	r5, r3
 8002d3a:	b096      	sub	sp, #88	; 0x58
 8002d3c:	da08      	bge.n	8002d50 <__swhatbuf_r+0x24>
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002d44:	602a      	str	r2, [r5, #0]
 8002d46:	061a      	lsls	r2, r3, #24
 8002d48:	d410      	bmi.n	8002d6c <__swhatbuf_r+0x40>
 8002d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4e:	e00e      	b.n	8002d6e <__swhatbuf_r+0x42>
 8002d50:	466a      	mov	r2, sp
 8002d52:	f000 f8c5 	bl	8002ee0 <_fstat_r>
 8002d56:	2800      	cmp	r0, #0
 8002d58:	dbf1      	blt.n	8002d3e <__swhatbuf_r+0x12>
 8002d5a:	9a01      	ldr	r2, [sp, #4]
 8002d5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d64:	425a      	negs	r2, r3
 8002d66:	415a      	adcs	r2, r3
 8002d68:	602a      	str	r2, [r5, #0]
 8002d6a:	e7ee      	b.n	8002d4a <__swhatbuf_r+0x1e>
 8002d6c:	2340      	movs	r3, #64	; 0x40
 8002d6e:	2000      	movs	r0, #0
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	b016      	add	sp, #88	; 0x58
 8002d74:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d78 <__smakebuf_r>:
 8002d78:	898b      	ldrh	r3, [r1, #12]
 8002d7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d7c:	079d      	lsls	r5, r3, #30
 8002d7e:	4606      	mov	r6, r0
 8002d80:	460c      	mov	r4, r1
 8002d82:	d507      	bpl.n	8002d94 <__smakebuf_r+0x1c>
 8002d84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d88:	6023      	str	r3, [r4, #0]
 8002d8a:	6123      	str	r3, [r4, #16]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	6163      	str	r3, [r4, #20]
 8002d90:	b002      	add	sp, #8
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
 8002d94:	466a      	mov	r2, sp
 8002d96:	ab01      	add	r3, sp, #4
 8002d98:	f7ff ffc8 	bl	8002d2c <__swhatbuf_r>
 8002d9c:	9900      	ldr	r1, [sp, #0]
 8002d9e:	4605      	mov	r5, r0
 8002da0:	4630      	mov	r0, r6
 8002da2:	f7ff fa5b 	bl	800225c <_malloc_r>
 8002da6:	b948      	cbnz	r0, 8002dbc <__smakebuf_r+0x44>
 8002da8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dac:	059a      	lsls	r2, r3, #22
 8002dae:	d4ef      	bmi.n	8002d90 <__smakebuf_r+0x18>
 8002db0:	f023 0303 	bic.w	r3, r3, #3
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	81a3      	strh	r3, [r4, #12]
 8002dba:	e7e3      	b.n	8002d84 <__smakebuf_r+0xc>
 8002dbc:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <__smakebuf_r+0x7c>)
 8002dbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8002dc0:	89a3      	ldrh	r3, [r4, #12]
 8002dc2:	6020      	str	r0, [r4, #0]
 8002dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc8:	81a3      	strh	r3, [r4, #12]
 8002dca:	9b00      	ldr	r3, [sp, #0]
 8002dcc:	6120      	str	r0, [r4, #16]
 8002dce:	6163      	str	r3, [r4, #20]
 8002dd0:	9b01      	ldr	r3, [sp, #4]
 8002dd2:	b15b      	cbz	r3, 8002dec <__smakebuf_r+0x74>
 8002dd4:	4630      	mov	r0, r6
 8002dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dda:	f000 f893 	bl	8002f04 <_isatty_r>
 8002dde:	b128      	cbz	r0, 8002dec <__smakebuf_r+0x74>
 8002de0:	89a3      	ldrh	r3, [r4, #12]
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	81a3      	strh	r3, [r4, #12]
 8002dec:	89a0      	ldrh	r0, [r4, #12]
 8002dee:	4305      	orrs	r5, r0
 8002df0:	81a5      	strh	r5, [r4, #12]
 8002df2:	e7cd      	b.n	8002d90 <__smakebuf_r+0x18>
 8002df4:	08002075 	.word	0x08002075

08002df8 <memchr>:
 8002df8:	4603      	mov	r3, r0
 8002dfa:	b510      	push	{r4, lr}
 8002dfc:	b2c9      	uxtb	r1, r1
 8002dfe:	4402      	add	r2, r0
 8002e00:	4293      	cmp	r3, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	d101      	bne.n	8002e0a <memchr+0x12>
 8002e06:	2000      	movs	r0, #0
 8002e08:	e003      	b.n	8002e12 <memchr+0x1a>
 8002e0a:	7804      	ldrb	r4, [r0, #0]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	428c      	cmp	r4, r1
 8002e10:	d1f6      	bne.n	8002e00 <memchr+0x8>
 8002e12:	bd10      	pop	{r4, pc}

08002e14 <__malloc_lock>:
 8002e14:	4801      	ldr	r0, [pc, #4]	; (8002e1c <__malloc_lock+0x8>)
 8002e16:	f7ff b9ff 	b.w	8002218 <__retarget_lock_acquire_recursive>
 8002e1a:	bf00      	nop
 8002e1c:	2000012c 	.word	0x2000012c

08002e20 <__malloc_unlock>:
 8002e20:	4801      	ldr	r0, [pc, #4]	; (8002e28 <__malloc_unlock+0x8>)
 8002e22:	f7ff b9fa 	b.w	800221a <__retarget_lock_release_recursive>
 8002e26:	bf00      	nop
 8002e28:	2000012c 	.word	0x2000012c

08002e2c <_free_r>:
 8002e2c:	b538      	push	{r3, r4, r5, lr}
 8002e2e:	4605      	mov	r5, r0
 8002e30:	2900      	cmp	r1, #0
 8002e32:	d040      	beq.n	8002eb6 <_free_r+0x8a>
 8002e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e38:	1f0c      	subs	r4, r1, #4
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bfb8      	it	lt
 8002e3e:	18e4      	addlt	r4, r4, r3
 8002e40:	f7ff ffe8 	bl	8002e14 <__malloc_lock>
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <_free_r+0x8c>)
 8002e46:	6813      	ldr	r3, [r2, #0]
 8002e48:	b933      	cbnz	r3, 8002e58 <_free_r+0x2c>
 8002e4a:	6063      	str	r3, [r4, #4]
 8002e4c:	6014      	str	r4, [r2, #0]
 8002e4e:	4628      	mov	r0, r5
 8002e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e54:	f7ff bfe4 	b.w	8002e20 <__malloc_unlock>
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	d908      	bls.n	8002e6e <_free_r+0x42>
 8002e5c:	6820      	ldr	r0, [r4, #0]
 8002e5e:	1821      	adds	r1, r4, r0
 8002e60:	428b      	cmp	r3, r1
 8002e62:	bf01      	itttt	eq
 8002e64:	6819      	ldreq	r1, [r3, #0]
 8002e66:	685b      	ldreq	r3, [r3, #4]
 8002e68:	1809      	addeq	r1, r1, r0
 8002e6a:	6021      	streq	r1, [r4, #0]
 8002e6c:	e7ed      	b.n	8002e4a <_free_r+0x1e>
 8002e6e:	461a      	mov	r2, r3
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	b10b      	cbz	r3, 8002e78 <_free_r+0x4c>
 8002e74:	42a3      	cmp	r3, r4
 8002e76:	d9fa      	bls.n	8002e6e <_free_r+0x42>
 8002e78:	6811      	ldr	r1, [r2, #0]
 8002e7a:	1850      	adds	r0, r2, r1
 8002e7c:	42a0      	cmp	r0, r4
 8002e7e:	d10b      	bne.n	8002e98 <_free_r+0x6c>
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	4401      	add	r1, r0
 8002e84:	1850      	adds	r0, r2, r1
 8002e86:	4283      	cmp	r3, r0
 8002e88:	6011      	str	r1, [r2, #0]
 8002e8a:	d1e0      	bne.n	8002e4e <_free_r+0x22>
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4401      	add	r1, r0
 8002e92:	6011      	str	r1, [r2, #0]
 8002e94:	6053      	str	r3, [r2, #4]
 8002e96:	e7da      	b.n	8002e4e <_free_r+0x22>
 8002e98:	d902      	bls.n	8002ea0 <_free_r+0x74>
 8002e9a:	230c      	movs	r3, #12
 8002e9c:	602b      	str	r3, [r5, #0]
 8002e9e:	e7d6      	b.n	8002e4e <_free_r+0x22>
 8002ea0:	6820      	ldr	r0, [r4, #0]
 8002ea2:	1821      	adds	r1, r4, r0
 8002ea4:	428b      	cmp	r3, r1
 8002ea6:	bf01      	itttt	eq
 8002ea8:	6819      	ldreq	r1, [r3, #0]
 8002eaa:	685b      	ldreq	r3, [r3, #4]
 8002eac:	1809      	addeq	r1, r1, r0
 8002eae:	6021      	streq	r1, [r4, #0]
 8002eb0:	6063      	str	r3, [r4, #4]
 8002eb2:	6054      	str	r4, [r2, #4]
 8002eb4:	e7cb      	b.n	8002e4e <_free_r+0x22>
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}
 8002eb8:	20000130 	.word	0x20000130

08002ebc <_read_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4d05      	ldr	r5, [pc, #20]	; (8002edc <_read_r+0x20>)
 8002ec8:	602a      	str	r2, [r5, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f7fd fbee 	bl	80006ac <_read>
 8002ed0:	1c43      	adds	r3, r0, #1
 8002ed2:	d102      	bne.n	8002eda <_read_r+0x1e>
 8002ed4:	682b      	ldr	r3, [r5, #0]
 8002ed6:	b103      	cbz	r3, 8002eda <_read_r+0x1e>
 8002ed8:	6023      	str	r3, [r4, #0]
 8002eda:	bd38      	pop	{r3, r4, r5, pc}
 8002edc:	20000138 	.word	0x20000138

08002ee0 <_fstat_r>:
 8002ee0:	b538      	push	{r3, r4, r5, lr}
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	4d06      	ldr	r5, [pc, #24]	; (8002f00 <_fstat_r+0x20>)
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	4608      	mov	r0, r1
 8002eea:	4611      	mov	r1, r2
 8002eec:	602b      	str	r3, [r5, #0]
 8002eee:	f7fd fc21 	bl	8000734 <_fstat>
 8002ef2:	1c43      	adds	r3, r0, #1
 8002ef4:	d102      	bne.n	8002efc <_fstat_r+0x1c>
 8002ef6:	682b      	ldr	r3, [r5, #0]
 8002ef8:	b103      	cbz	r3, 8002efc <_fstat_r+0x1c>
 8002efa:	6023      	str	r3, [r4, #0]
 8002efc:	bd38      	pop	{r3, r4, r5, pc}
 8002efe:	bf00      	nop
 8002f00:	20000138 	.word	0x20000138

08002f04 <_isatty_r>:
 8002f04:	b538      	push	{r3, r4, r5, lr}
 8002f06:	2300      	movs	r3, #0
 8002f08:	4d05      	ldr	r5, [pc, #20]	; (8002f20 <_isatty_r+0x1c>)
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	602b      	str	r3, [r5, #0]
 8002f10:	f7fd fc1f 	bl	8000752 <_isatty>
 8002f14:	1c43      	adds	r3, r0, #1
 8002f16:	d102      	bne.n	8002f1e <_isatty_r+0x1a>
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	b103      	cbz	r3, 8002f1e <_isatty_r+0x1a>
 8002f1c:	6023      	str	r3, [r4, #0]
 8002f1e:	bd38      	pop	{r3, r4, r5, pc}
 8002f20:	20000138 	.word	0x20000138

08002f24 <_init>:
 8002f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f26:	bf00      	nop
 8002f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2a:	bc08      	pop	{r3}
 8002f2c:	469e      	mov	lr, r3
 8002f2e:	4770      	bx	lr

08002f30 <_fini>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	bf00      	nop
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr
