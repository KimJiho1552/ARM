
Exam_9_3_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000322c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08003338  08003338  00013338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800340c  0800340c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800340c  0800340c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800340c  0800340c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800340c  0800340c  0001340c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003410  08003410  00013410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000070  08003484  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003484  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ecb  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b49  00000000  00000000  00027f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00029ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  0002a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182ff  00000000  00000000  0002ab08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009633  00000000  00000000  00042e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887e4  00000000  00000000  0004c43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d4c1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002908  00000000  00000000  000d4c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003320 	.word	0x08003320

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003320 	.word	0x08003320

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f001 ffae 	bl	80020be <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000bc 	.word	0x200000bc

08000170 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	adc_value = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8000178:	4805      	ldr	r0, [pc, #20]	; (8000190 <HAL_ADC_ConvCpltCallback+0x20>)
 800017a:	f000 fd43 	bl	8000c04 <HAL_ADC_GetValue>
 800017e:	4603      	mov	r3, r0
 8000180:	b29b      	uxth	r3, r3
 8000182:	461a      	mov	r2, r3
 8000184:	4b03      	ldr	r3, [pc, #12]	; (8000194 <HAL_ADC_ConvCpltCallback+0x24>)
 8000186:	601a      	str	r2, [r3, #0]
}
 8000188:	bf00      	nop
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	2000008c 	.word	0x2000008c
 8000194:	20000100 	.word	0x20000100

08000198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800019c:	f000 fb1e 	bl	80007dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a0:	f000 f81a 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a4:	f000 f8d8 	bl	8000358 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a8:	f000 f8ac 	bl	8000304 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001ac:	f000 f86c 	bl	8000288 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80001b0:	4806      	ldr	r0, [pc, #24]	; (80001cc <main+0x34>)
 80001b2:	f000 fc71 	bl	8000a98 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 80001b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ba:	f000 fb71 	bl	80008a0 <HAL_Delay>
	  printf("adc value : %d\n\r", adc_value);
 80001be:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <main+0x38>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4619      	mov	r1, r3
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <main+0x3c>)
 80001c6:	f002 f917 	bl	80023f8 <iprintf>
	  HAL_Delay(1000);
 80001ca:	e7f4      	b.n	80001b6 <main+0x1e>
 80001cc:	2000008c 	.word	0x2000008c
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08003338 	.word	0x08003338

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b094      	sub	sp, #80	; 0x50
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 f8fe 	bl	80023e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
 80001f6:	609a      	str	r2, [r3, #8]
 80001f8:	60da      	str	r2, [r3, #12]
 80001fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000208:	2302      	movs	r3, #2
 800020a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020c:	2301      	movs	r3, #1
 800020e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000210:	2310      	movs	r3, #16
 8000212:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000214:	2302      	movs	r3, #2
 8000216:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000218:	2300      	movs	r3, #0
 800021a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800021c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000220:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000226:	4618      	mov	r0, r3
 8000228:	f001 fa2c 	bl	8001684 <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000232:	f000 f913 	bl	800045c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000246:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2102      	movs	r1, #2
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fc98 	bl	8001b88 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800025e:	f000 f8fd 	bl	800045c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000262:	2302      	movs	r3, #2
 8000264:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000266:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800026a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fe22 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800027a:	f000 f8ef 	bl	800045c <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3750      	adds	r7, #80	; 0x50
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000298:	4b18      	ldr	r3, [pc, #96]	; (80002fc <MX_ADC1_Init+0x74>)
 800029a:	4a19      	ldr	r2, [pc, #100]	; (8000300 <MX_ADC1_Init+0x78>)
 800029c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <MX_ADC1_Init+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002a4:	4b15      	ldr	r3, [pc, #84]	; (80002fc <MX_ADC1_Init+0x74>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002aa:	4b14      	ldr	r3, [pc, #80]	; (80002fc <MX_ADC1_Init+0x74>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b0:	4b12      	ldr	r3, [pc, #72]	; (80002fc <MX_ADC1_Init+0x74>)
 80002b2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <MX_ADC1_Init+0x74>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002be:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <MX_ADC1_Init+0x74>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <MX_ADC1_Init+0x74>)
 80002c6:	f000 fb0f 	bl	80008e8 <HAL_ADC_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002d0:	f000 f8c4 	bl	800045c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d8:	2301      	movs	r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80002dc:	2302      	movs	r3, #2
 80002de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4619      	mov	r1, r3
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_ADC1_Init+0x74>)
 80002e6:	f000 fd65 	bl	8000db4 <HAL_ADC_ConfigChannel>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002f0:	f000 f8b4 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	2000008c 	.word	0x2000008c
 8000300:	40012400 	.word	0x40012400

08000304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000308:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 800030a:	4a12      	ldr	r2, [pc, #72]	; (8000354 <MX_USART2_UART_Init+0x50>)
 800030c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800030e:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 8000310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 800032a:	220c      	movs	r2, #12
 800032c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_USART2_UART_Init+0x4c>)
 800033c:	f001 fe72 	bl	8002024 <HAL_UART_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000346:	f000 f889 	bl	800045c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	200000bc 	.word	0x200000bc
 8000354:	40004400 	.word	0x40004400

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036c:	4b37      	ldr	r3, [pc, #220]	; (800044c <MX_GPIO_Init+0xf4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a36      	ldr	r2, [pc, #216]	; (800044c <MX_GPIO_Init+0xf4>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b34      	ldr	r3, [pc, #208]	; (800044c <MX_GPIO_Init+0xf4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0310 	and.w	r3, r3, #16
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000384:	4b31      	ldr	r3, [pc, #196]	; (800044c <MX_GPIO_Init+0xf4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a30      	ldr	r2, [pc, #192]	; (800044c <MX_GPIO_Init+0xf4>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b2e      	ldr	r3, [pc, #184]	; (800044c <MX_GPIO_Init+0xf4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0320 	and.w	r3, r3, #32
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b2b      	ldr	r3, [pc, #172]	; (800044c <MX_GPIO_Init+0xf4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a2a      	ldr	r2, [pc, #168]	; (800044c <MX_GPIO_Init+0xf4>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b28      	ldr	r3, [pc, #160]	; (800044c <MX_GPIO_Init+0xf4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_GPIO_Init+0xf4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a24      	ldr	r2, [pc, #144]	; (800044c <MX_GPIO_Init+0xf4>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b22      	ldr	r3, [pc, #136]	; (800044c <MX_GPIO_Init+0xf4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	210f      	movs	r1, #15
 80003d0:	481f      	ldr	r0, [pc, #124]	; (8000450 <MX_GPIO_Init+0xf8>)
 80003d2:	f001 f91d 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2120      	movs	r1, #32
 80003da:	481e      	ldr	r0, [pc, #120]	; (8000454 <MX_GPIO_Init+0xfc>)
 80003dc:	f001 f918 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_GPIO_Init+0x100>)
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	4816      	ldr	r0, [pc, #88]	; (8000450 <MX_GPIO_Init+0xf8>)
 80003f6:	f000 ff87 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80003fa:	230f      	movs	r3, #15
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	480f      	ldr	r0, [pc, #60]	; (8000450 <MX_GPIO_Init+0xf8>)
 8000412:	f000 ff79 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000416:	2320      	movs	r3, #32
 8000418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2301      	movs	r3, #1
 800041c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000422:	2302      	movs	r3, #2
 8000424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000426:	f107 0310 	add.w	r3, r7, #16
 800042a:	4619      	mov	r1, r3
 800042c:	4809      	ldr	r0, [pc, #36]	; (8000454 <MX_GPIO_Init+0xfc>)
 800042e:	f000 ff6b 	bl	8001308 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2100      	movs	r1, #0
 8000436:	2028      	movs	r0, #40	; 0x28
 8000438:	f000 ff2f 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800043c:	2028      	movs	r0, #40	; 0x28
 800043e:	f000 ff48 	bl	80012d2 <HAL_NVIC_EnableIRQ>

}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000
 8000450:	40011000 	.word	0x40011000
 8000454:	40010800 	.word	0x40010800
 8000458:	10110000 	.word	0x10110000

0800045c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000460:	b672      	cpsid	i
}
 8000462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000464:	e7fe      	b.n	8000464 <Error_Handler+0x8>
	...

08000468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <HAL_MspInit+0x5c>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6193      	str	r3, [r2, #24]
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <HAL_MspInit+0x5c>)
 800047c:	699b      	ldr	r3, [r3, #24]
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <HAL_MspInit+0x5c>)
 800048c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000490:	61d3      	str	r3, [r2, #28]
 8000492:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <HAL_MspInit+0x5c>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800049e:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <HAL_MspInit+0x60>)
 80004a0:	685b      	ldr	r3, [r3, #4]
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <HAL_MspInit+0x60>)
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010000 	.word	0x40010000

080004cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a18      	ldr	r2, [pc, #96]	; (8000548 <HAL_ADC_MspInit+0x7c>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d129      	bne.n	8000540 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <HAL_ADC_MspInit+0x80>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a16      	ldr	r2, [pc, #88]	; (800054c <HAL_ADC_MspInit+0x80>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <HAL_ADC_MspInit+0x80>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000504:	4b11      	ldr	r3, [pc, #68]	; (800054c <HAL_ADC_MspInit+0x80>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a10      	ldr	r2, [pc, #64]	; (800054c <HAL_ADC_MspInit+0x80>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_ADC_MspInit+0x80>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0304 	and.w	r3, r3, #4
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800051c:	2301      	movs	r3, #1
 800051e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000520:	2303      	movs	r3, #3
 8000522:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4809      	ldr	r0, [pc, #36]	; (8000550 <HAL_ADC_MspInit+0x84>)
 800052c:	f000 feec 	bl	8001308 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	2012      	movs	r0, #18
 8000536:	f000 feb0 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800053a:	2012      	movs	r0, #18
 800053c:	f000 fec9 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000540:	bf00      	nop
 8000542:	3720      	adds	r7, #32
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40012400 	.word	0x40012400
 800054c:	40021000 	.word	0x40021000
 8000550:	40010800 	.word	0x40010800

08000554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a15      	ldr	r2, [pc, #84]	; (80005c4 <HAL_UART_MspInit+0x70>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d123      	bne.n	80005bc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000574:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <HAL_UART_MspInit+0x74>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <HAL_UART_MspInit+0x74>)
 800057a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800057e:	61d3      	str	r3, [r2, #28]
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <HAL_UART_MspInit+0x74>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <HAL_UART_MspInit+0x74>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <HAL_UART_MspInit+0x74>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <HAL_UART_MspInit+0x74>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005a4:	230c      	movs	r3, #12
 80005a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a8:	2302      	movs	r3, #2
 80005aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2302      	movs	r3, #2
 80005ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <HAL_UART_MspInit+0x78>)
 80005b8:	f000 fea6 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40004400 	.word	0x40004400
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010800 	.word	0x40010800

080005d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <NMI_Handler+0x4>

080005d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005da:	e7fe      	b.n	80005da <HardFault_Handler+0x4>

080005dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <MemManage_Handler+0x4>

080005e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e6:	e7fe      	b.n	80005e6 <BusFault_Handler+0x4>

080005e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <UsageFault_Handler+0x4>

080005ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bc80      	pop	{r7}
 80005f8:	4770      	bx	lr

080005fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr

08000606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000616:	f000 f927 	bl	8000868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000624:	4802      	ldr	r0, [pc, #8]	; (8000630 <ADC1_2_IRQHandler+0x10>)
 8000626:	f000 faf9 	bl	8000c1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000008c 	.word	0x2000008c

08000634 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000638:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800063c:	f001 f800 	bl	8001640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	e00a      	b.n	800066c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000656:	f3af 8000 	nop.w
 800065a:	4601      	mov	r1, r0
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	60ba      	str	r2, [r7, #8]
 8000662:	b2ca      	uxtb	r2, r1
 8000664:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000666:	697b      	ldr	r3, [r7, #20]
 8000668:	3301      	adds	r3, #1
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	429a      	cmp	r2, r3
 8000672:	dbf0      	blt.n	8000656 <_read+0x12>
	}

return len;
 8000674:	687b      	ldr	r3, [r7, #4]
}
 8000676:	4618      	mov	r0, r3
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	af00      	add	r7, sp, #0
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	e009      	b.n	80006a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	60ba      	str	r2, [r7, #8]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fd57 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	dbf1      	blt.n	8000690 <_write+0x12>
	}
	return len;
 80006ac:	687b      	ldr	r3, [r7, #4]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3718      	adds	r7, #24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <_close>:

int _close(int file)
{
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
	return -1;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006dc:	605a      	str	r2, [r3, #4]
	return 0;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr

080006ea <_isatty>:

int _isatty(int file)
{
 80006ea:	b480      	push	{r7}
 80006ec:	b083      	sub	sp, #12
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
	return 1;
 80006f2:	2301      	movs	r3, #1
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr

080006fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006fe:	b480      	push	{r7}
 8000700:	b085      	sub	sp, #20
 8000702:	af00      	add	r7, sp, #0
 8000704:	60f8      	str	r0, [r7, #12]
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
	return 0;
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
	...

08000718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <_sbrk+0x5c>)
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <_sbrk+0x60>)
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <_sbrk+0x64>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d102      	bne.n	800073a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <_sbrk+0x64>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <_sbrk+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <_sbrk+0x64>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	429a      	cmp	r2, r3
 8000746:	d207      	bcs.n	8000758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000748:	f001 fe24 	bl	8002394 <__errno>
 800074c:	4603      	mov	r3, r0
 800074e:	220c      	movs	r2, #12
 8000750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	e009      	b.n	800076c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <_sbrk+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <_sbrk+0x64>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4413      	add	r3, r2
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <_sbrk+0x64>)
 8000768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800076a:	68fb      	ldr	r3, [r7, #12]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20005000 	.word	0x20005000
 8000778:	00000400 	.word	0x00000400
 800077c:	20000104 	.word	0x20000104
 8000780:	20000120 	.word	0x20000120

08000784 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000792:	490d      	ldr	r1, [pc, #52]	; (80007c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007a8:	4c0a      	ldr	r4, [pc, #40]	; (80007d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007b6:	f7ff ffe5 	bl	8000784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ba:	f001 fdf1 	bl	80023a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007be:	f7ff fceb 	bl	8000198 <main>
  bx lr
 80007c2:	4770      	bx	lr
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007cc:	08003414 	.word	0x08003414
  ldr r2, =_sbss
 80007d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007d4:	2000011c 	.word	0x2000011c

080007d8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <CAN1_RX1_IRQHandler>
	...

080007dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_Init+0x28>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_Init+0x28>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 fd49 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 f808 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f8:	f7ff fe36 	bl	8000468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x54>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x58>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000822:	fbb2 f3f3 	udiv	r3, r2, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 fd61 	bl	80012ee <HAL_SYSTICK_Config>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e00e      	b.n	8000854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d80a      	bhi.n	8000852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f000 fd29 	bl	800129a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_InitTick+0x5c>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	e000      	b.n	8000854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000000 	.word	0x20000000
 8000860:	20000008 	.word	0x20000008
 8000864:	20000004 	.word	0x20000004

08000868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x1c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_IncTick+0x20>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a03      	ldr	r2, [pc, #12]	; (8000888 <HAL_IncTick+0x20>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	20000008 	.word	0x20000008
 8000888:	20000108 	.word	0x20000108

0800088c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return uwTick;
 8000890:	4b02      	ldr	r3, [pc, #8]	; (800089c <HAL_GetTick+0x10>)
 8000892:	681b      	ldr	r3, [r3, #0]
}
 8000894:	4618      	mov	r0, r3
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000108 	.word	0x20000108

080008a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a8:	f7ff fff0 	bl	800088c <HAL_GetTick>
 80008ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b8:	d005      	beq.n	80008c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <HAL_Delay+0x44>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	4413      	add	r3, r2
 80008c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c6:	bf00      	nop
 80008c8:	f7ff ffe0 	bl	800088c <HAL_GetTick>
 80008cc:	4602      	mov	r2, r0
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d8f7      	bhi.n	80008c8 <HAL_Delay+0x28>
  {
  }
}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000008 	.word	0x20000008

080008e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f0:	2300      	movs	r3, #0
 80008f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e0be      	b.n	8000a88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000914:	2b00      	cmp	r3, #0
 8000916:	d109      	bne.n	800092c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2200      	movs	r2, #0
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff fdd0 	bl	80004cc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f000 fb93 	bl	8001058 <ADC_ConversionStop_Disable>
 8000932:	4603      	mov	r3, r0
 8000934:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	2b00      	cmp	r3, #0
 8000940:	f040 8099 	bne.w	8000a76 <HAL_ADC_Init+0x18e>
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	2b00      	cmp	r3, #0
 8000948:	f040 8095 	bne.w	8000a76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000950:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000954:	f023 0302 	bic.w	r3, r3, #2
 8000958:	f043 0202 	orr.w	r2, r3, #2
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000968:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7b1b      	ldrb	r3, [r3, #12]
 800096e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000970:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	4313      	orrs	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000980:	d003      	beq.n	800098a <HAL_ADC_Init+0xa2>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d102      	bne.n	8000990 <HAL_ADC_Init+0xa8>
 800098a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098e:	e000      	b.n	8000992 <HAL_ADC_Init+0xaa>
 8000990:	2300      	movs	r3, #0
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7d1b      	ldrb	r3, [r3, #20]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d119      	bne.n	80009d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7b1b      	ldrb	r3, [r3, #12]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	035a      	lsls	r2, r3, #13
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	e00b      	b.n	80009d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c0:	f043 0220 	orr.w	r2, r3, #32
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009cc:	f043 0201 	orr.w	r2, r3, #1
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	430a      	orrs	r2, r1
 80009e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <HAL_ADC_Init+0x1a8>)
 80009f0:	4013      	ands	r3, r2
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	68b9      	ldr	r1, [r7, #8]
 80009f8:	430b      	orrs	r3, r1
 80009fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a04:	d003      	beq.n	8000a0e <HAL_ADC_Init+0x126>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d104      	bne.n	8000a18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	691b      	ldr	r3, [r3, #16]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	051b      	lsls	r3, r3, #20
 8000a16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_ADC_Init+0x1ac>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d10b      	bne.n	8000a54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a46:	f023 0303 	bic.w	r3, r3, #3
 8000a4a:	f043 0201 	orr.w	r2, r3, #1
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a52:	e018      	b.n	8000a86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a58:	f023 0312 	bic.w	r3, r3, #18
 8000a5c:	f043 0210 	orr.w	r2, r3, #16
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	f043 0201 	orr.w	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a74:	e007      	b.n	8000a86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7a:	f043 0210 	orr.w	r2, r3, #16
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	ffe1f7fd 	.word	0xffe1f7fd
 8000a94:	ff1f0efe 	.word	0xff1f0efe

08000a98 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d101      	bne.n	8000ab2 <HAL_ADC_Start_IT+0x1a>
 8000aae:	2302      	movs	r3, #2
 8000ab0:	e0a0      	b.n	8000bf4 <HAL_ADC_Start_IT+0x15c>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 fa72 	bl	8000fa4 <ADC_Enable>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f040 808f 	bne.w	8000bea <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000ad4:	f023 0301 	bic.w	r3, r3, #1
 8000ad8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a45      	ldr	r2, [pc, #276]	; (8000bfc <HAL_ADC_Start_IT+0x164>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d105      	bne.n	8000af6 <HAL_ADC_Start_IT+0x5e>
 8000aea:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <HAL_ADC_Start_IT+0x168>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d115      	bne.n	8000b22 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d026      	beq.n	8000b5e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b20:	e01d      	b.n	8000b5e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a33      	ldr	r2, [pc, #204]	; (8000c00 <HAL_ADC_Start_IT+0x168>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d004      	beq.n	8000b42 <HAL_ADC_Start_IT+0xaa>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <HAL_ADC_Start_IT+0x164>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d10d      	bne.n	8000b5e <HAL_ADC_Start_IT+0xc6>
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <HAL_ADC_Start_IT+0x168>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d007      	beq.n	8000b5e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6e:	f023 0206 	bic.w	r2, r3, #6
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b76:	e002      	b.n	8000b7e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f06f 0202 	mvn.w	r2, #2
 8000b8e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f042 0220 	orr.w	r2, r2, #32
 8000b9e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000baa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bae:	d113      	bne.n	8000bd8 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000bb4:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_ADC_Start_IT+0x164>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d105      	bne.n	8000bc6 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_ADC_Start_IT+0x168>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d108      	bne.n	8000bd8 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	e00c      	b.n	8000bf2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	e003      	b.n	8000bf2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40012800 	.word	0x40012800
 8000c00:	40012400 	.word	0x40012400

08000c04 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0320 	and.w	r3, r3, #32
 8000c2e:	2b20      	cmp	r3, #32
 8000c30:	d140      	bne.n	8000cb4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d139      	bne.n	8000cb4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d105      	bne.n	8000c58 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c66:	d11d      	bne.n	8000ca4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d119      	bne.n	8000ca4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0220 	bic.w	r2, r2, #32
 8000c7e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d105      	bne.n	8000ca4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	f043 0201 	orr.w	r2, r3, #1
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff fa63 	bl	8000170 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f06f 0212 	mvn.w	r2, #18
 8000cb2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbe:	2b80      	cmp	r3, #128	; 0x80
 8000cc0:	d14f      	bne.n	8000d62 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d148      	bne.n	8000d62 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd4:	f003 0310 	and.w	r3, r3, #16
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d105      	bne.n	8000ce8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000cf2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000cf6:	d012      	beq.n	8000d1e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d125      	bne.n	8000d52 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d10:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d14:	d11d      	bne.n	8000d52 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d119      	bne.n	8000d52 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d2c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d105      	bne.n	8000d52 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	f043 0201 	orr.w	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f9c1 	bl	80010da <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f06f 020c 	mvn.w	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6c:	2b40      	cmp	r3, #64	; 0x40
 8000d6e:	d114      	bne.n	8000d9a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d10d      	bne.n	8000d9a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f809 	bl	8000da2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f06f 0201 	mvn.w	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d101      	bne.n	8000dd4 <HAL_ADC_ConfigChannel+0x20>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e0dc      	b.n	8000f8e <HAL_ADC_ConfigChannel+0x1da>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b06      	cmp	r3, #6
 8000de2:	d81c      	bhi.n	8000e1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4413      	add	r3, r2
 8000df4:	3b05      	subs	r3, #5
 8000df6:	221f      	movs	r2, #31
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	4019      	ands	r1, r3
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3b05      	subs	r3, #5
 8000e10:	fa00 f203 	lsl.w	r2, r0, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e1c:	e03c      	b.n	8000e98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b0c      	cmp	r3, #12
 8000e24:	d81c      	bhi.n	8000e60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	4613      	mov	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	4413      	add	r3, r2
 8000e36:	3b23      	subs	r3, #35	; 0x23
 8000e38:	221f      	movs	r2, #31
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	4019      	ands	r1, r3
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	6818      	ldr	r0, [r3, #0]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	4413      	add	r3, r2
 8000e50:	3b23      	subs	r3, #35	; 0x23
 8000e52:	fa00 f203 	lsl.w	r2, r0, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5e:	e01b      	b.n	8000e98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	4413      	add	r3, r2
 8000e70:	3b41      	subs	r3, #65	; 0x41
 8000e72:	221f      	movs	r2, #31
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	4019      	ands	r1, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	4613      	mov	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	3b41      	subs	r3, #65	; 0x41
 8000e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b09      	cmp	r3, #9
 8000e9e:	d91c      	bls.n	8000eda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68d9      	ldr	r1, [r3, #12]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	3b1e      	subs	r3, #30
 8000eb2:	2207      	movs	r2, #7
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	4019      	ands	r1, r3
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	6898      	ldr	r0, [r3, #8]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	3b1e      	subs	r3, #30
 8000ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	e019      	b.n	8000f0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6919      	ldr	r1, [r3, #16]
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	2207      	movs	r2, #7
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	4019      	ands	r1, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	6898      	ldr	r0, [r3, #8]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	fa00 f203 	lsl.w	r2, r0, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b10      	cmp	r3, #16
 8000f14:	d003      	beq.n	8000f1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f1a:	2b11      	cmp	r3, #17
 8000f1c:	d132      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d125      	bne.n	8000f74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d126      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b10      	cmp	r3, #16
 8000f4c:	d11a      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_ADC_ConfigChannel+0x1e8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f54:	fba2 2303 	umull	r2, r3, r2, r3
 8000f58:	0c9a      	lsrs	r2, r3, #18
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f64:	e002      	b.n	8000f6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f9      	bne.n	8000f66 <HAL_ADC_ConfigChannel+0x1b2>
 8000f72:	e007      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	f043 0220 	orr.w	r2, r3, #32
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	431bde83 	.word	0x431bde83

08000fa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d040      	beq.n	8001044 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0201 	orr.w	r2, r2, #1
 8000fd0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <ADC_Enable+0xac>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <ADC_Enable+0xb0>)
 8000fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fdc:	0c9b      	lsrs	r3, r3, #18
 8000fde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fe0:	e002      	b.n	8000fe8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f9      	bne.n	8000fe2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fee:	f7ff fc4d 	bl	800088c <HAL_GetTick>
 8000ff2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ff4:	e01f      	b.n	8001036 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ff6:	f7ff fc49 	bl	800088c <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d918      	bls.n	8001036 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b01      	cmp	r3, #1
 8001010:	d011      	beq.n	8001036 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	f043 0210 	orr.w	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e007      	b.n	8001046 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b01      	cmp	r3, #1
 8001042:	d1d8      	bne.n	8000ff6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000000 	.word	0x20000000
 8001054:	431bde83 	.word	0x431bde83

08001058 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b01      	cmp	r3, #1
 8001070:	d12e      	bne.n	80010d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0201 	bic.w	r2, r2, #1
 8001080:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001082:	f7ff fc03 	bl	800088c <HAL_GetTick>
 8001086:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001088:	e01b      	b.n	80010c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800108a:	f7ff fbff 	bl	800088c <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d914      	bls.n	80010c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d10d      	bne.n	80010c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010aa:	f043 0210 	orr.w	r2, r3, #16
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e007      	b.n	80010d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d0dc      	beq.n	800108a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4906      	ldr	r1, [pc, #24]	; (8001184 <__NVIC_EnableIRQ+0x34>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff90 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff2d 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff42 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff35 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa2 	bl	8001240 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b08b      	sub	sp, #44	; 0x2c
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131a:	e169      	b.n	80015f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800131c:	2201      	movs	r2, #1
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	429a      	cmp	r2, r3
 8001336:	f040 8158 	bne.w	80015ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4a9a      	ldr	r2, [pc, #616]	; (80015a8 <HAL_GPIO_Init+0x2a0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d05e      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
 8001344:	4a98      	ldr	r2, [pc, #608]	; (80015a8 <HAL_GPIO_Init+0x2a0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d875      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 800134a:	4a98      	ldr	r2, [pc, #608]	; (80015ac <HAL_GPIO_Init+0x2a4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d058      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
 8001350:	4a96      	ldr	r2, [pc, #600]	; (80015ac <HAL_GPIO_Init+0x2a4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d86f      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 8001356:	4a96      	ldr	r2, [pc, #600]	; (80015b0 <HAL_GPIO_Init+0x2a8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d052      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
 800135c:	4a94      	ldr	r2, [pc, #592]	; (80015b0 <HAL_GPIO_Init+0x2a8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d869      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 8001362:	4a94      	ldr	r2, [pc, #592]	; (80015b4 <HAL_GPIO_Init+0x2ac>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d04c      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
 8001368:	4a92      	ldr	r2, [pc, #584]	; (80015b4 <HAL_GPIO_Init+0x2ac>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d863      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 800136e:	4a92      	ldr	r2, [pc, #584]	; (80015b8 <HAL_GPIO_Init+0x2b0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d046      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
 8001374:	4a90      	ldr	r2, [pc, #576]	; (80015b8 <HAL_GPIO_Init+0x2b0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d85d      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 800137a:	2b12      	cmp	r3, #18
 800137c:	d82a      	bhi.n	80013d4 <HAL_GPIO_Init+0xcc>
 800137e:	2b12      	cmp	r3, #18
 8001380:	d859      	bhi.n	8001436 <HAL_GPIO_Init+0x12e>
 8001382:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <HAL_GPIO_Init+0x80>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	08001403 	.word	0x08001403
 800138c:	080013dd 	.word	0x080013dd
 8001390:	080013ef 	.word	0x080013ef
 8001394:	08001431 	.word	0x08001431
 8001398:	08001437 	.word	0x08001437
 800139c:	08001437 	.word	0x08001437
 80013a0:	08001437 	.word	0x08001437
 80013a4:	08001437 	.word	0x08001437
 80013a8:	08001437 	.word	0x08001437
 80013ac:	08001437 	.word	0x08001437
 80013b0:	08001437 	.word	0x08001437
 80013b4:	08001437 	.word	0x08001437
 80013b8:	08001437 	.word	0x08001437
 80013bc:	08001437 	.word	0x08001437
 80013c0:	08001437 	.word	0x08001437
 80013c4:	08001437 	.word	0x08001437
 80013c8:	08001437 	.word	0x08001437
 80013cc:	080013e5 	.word	0x080013e5
 80013d0:	080013f9 	.word	0x080013f9
 80013d4:	4a79      	ldr	r2, [pc, #484]	; (80015bc <HAL_GPIO_Init+0x2b4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013da:	e02c      	b.n	8001436 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	623b      	str	r3, [r7, #32]
          break;
 80013e2:	e029      	b.n	8001438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	3304      	adds	r3, #4
 80013ea:	623b      	str	r3, [r7, #32]
          break;
 80013ec:	e024      	b.n	8001438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	3308      	adds	r3, #8
 80013f4:	623b      	str	r3, [r7, #32]
          break;
 80013f6:	e01f      	b.n	8001438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	330c      	adds	r3, #12
 80013fe:	623b      	str	r3, [r7, #32]
          break;
 8001400:	e01a      	b.n	8001438 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800140a:	2304      	movs	r3, #4
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e013      	b.n	8001438 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d105      	bne.n	8001424 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001418:	2308      	movs	r3, #8
 800141a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69fa      	ldr	r2, [r7, #28]
 8001420:	611a      	str	r2, [r3, #16]
          break;
 8001422:	e009      	b.n	8001438 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001424:	2308      	movs	r3, #8
 8001426:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	615a      	str	r2, [r3, #20]
          break;
 800142e:	e003      	b.n	8001438 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
          break;
 8001434:	e000      	b.n	8001438 <HAL_GPIO_Init+0x130>
          break;
 8001436:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2bff      	cmp	r3, #255	; 0xff
 800143c:	d801      	bhi.n	8001442 <HAL_GPIO_Init+0x13a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	e001      	b.n	8001446 <HAL_GPIO_Init+0x13e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3304      	adds	r3, #4
 8001446:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d802      	bhi.n	8001454 <HAL_GPIO_Init+0x14c>
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	e002      	b.n	800145a <HAL_GPIO_Init+0x152>
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	3b08      	subs	r3, #8
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	210f      	movs	r1, #15
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	401a      	ands	r2, r3
 800146c:	6a39      	ldr	r1, [r7, #32]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	431a      	orrs	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 80b1 	beq.w	80015ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001488:	4b4d      	ldr	r3, [pc, #308]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a4c      	ldr	r2, [pc, #304]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <HAL_GPIO_Init+0x2b8>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014a0:	4a48      	ldr	r2, [pc, #288]	; (80015c4 <HAL_GPIO_Init+0x2bc>)
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	089b      	lsrs	r3, r3, #2
 80014a6:	3302      	adds	r3, #2
 80014a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	220f      	movs	r2, #15
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4013      	ands	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a40      	ldr	r2, [pc, #256]	; (80015c8 <HAL_GPIO_Init+0x2c0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d013      	beq.n	80014f4 <HAL_GPIO_Init+0x1ec>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a3f      	ldr	r2, [pc, #252]	; (80015cc <HAL_GPIO_Init+0x2c4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d00d      	beq.n	80014f0 <HAL_GPIO_Init+0x1e8>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a3e      	ldr	r2, [pc, #248]	; (80015d0 <HAL_GPIO_Init+0x2c8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d007      	beq.n	80014ec <HAL_GPIO_Init+0x1e4>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a3d      	ldr	r2, [pc, #244]	; (80015d4 <HAL_GPIO_Init+0x2cc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d101      	bne.n	80014e8 <HAL_GPIO_Init+0x1e0>
 80014e4:	2303      	movs	r3, #3
 80014e6:	e006      	b.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014e8:	2304      	movs	r3, #4
 80014ea:	e004      	b.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e002      	b.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <HAL_GPIO_Init+0x1ee>
 80014f4:	2300      	movs	r3, #0
 80014f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f8:	f002 0203 	and.w	r2, r2, #3
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	4093      	lsls	r3, r2
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001506:	492f      	ldr	r1, [pc, #188]	; (80015c4 <HAL_GPIO_Init+0x2bc>)
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001520:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	492c      	ldr	r1, [pc, #176]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
 800152c:	e006      	b.n	800153c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	43db      	mvns	r3, r3
 8001536:	4928      	ldr	r1, [pc, #160]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001538:	4013      	ands	r3, r2
 800153a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001548:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4922      	ldr	r1, [pc, #136]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
 8001554:	e006      	b.n	8001564 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	43db      	mvns	r3, r3
 800155e:	491e      	ldr	r1, [pc, #120]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001560:	4013      	ands	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d006      	beq.n	800157e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	4918      	ldr	r1, [pc, #96]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	43db      	mvns	r3, r3
 8001586:	4914      	ldr	r1, [pc, #80]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 8001588:	4013      	ands	r3, r2
 800158a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d021      	beq.n	80015dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 800159a:	68da      	ldr	r2, [r3, #12]
 800159c:	490e      	ldr	r1, [pc, #56]	; (80015d8 <HAL_GPIO_Init+0x2d0>)
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60cb      	str	r3, [r1, #12]
 80015a4:	e021      	b.n	80015ea <HAL_GPIO_Init+0x2e2>
 80015a6:	bf00      	nop
 80015a8:	10320000 	.word	0x10320000
 80015ac:	10310000 	.word	0x10310000
 80015b0:	10220000 	.word	0x10220000
 80015b4:	10210000 	.word	0x10210000
 80015b8:	10120000 	.word	0x10120000
 80015bc:	10110000 	.word	0x10110000
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010000 	.word	0x40010000
 80015c8:	40010800 	.word	0x40010800
 80015cc:	40010c00 	.word	0x40010c00
 80015d0:	40011000 	.word	0x40011000
 80015d4:	40011400 	.word	0x40011400
 80015d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_GPIO_Init+0x304>)
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	4909      	ldr	r1, [pc, #36]	; (800160c <HAL_GPIO_Init+0x304>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	3301      	adds	r3, #1
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f47f ae8e 	bne.w	800131c <HAL_GPIO_Init+0x14>
  }
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	372c      	adds	r7, #44	; 0x2c
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	40010400 	.word	0x40010400

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800162c:	e003      	b.n	8001636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800162e:	887b      	ldrh	r3, [r7, #2]
 8001630:	041a      	lsls	r2, r3, #16
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	611a      	str	r2, [r3, #16]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	4013      	ands	r3, r2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f806 	bl	8001670 <HAL_GPIO_EXTI_Callback>
  }
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e272      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d112      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d10b      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x12c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d168      	bne.n	80017b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e24c      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x76>
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7f      	ldr	r2, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e02e      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0xbc>
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff f894 	bl	800088c <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff f890 	bl	800088c <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e200      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xe4>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff f880 	bl	800088c <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff f87c 	bl	800088c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1ec      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x10c>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1c0      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4939      	ldr	r1, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff f835 	bl	800088c <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff f831 	bl	800088c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1a1      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff f814 	bl	800088c <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff f810 	bl	800088c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e180      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03a      	beq.n	8001908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7fe fff4 	bl	800088c <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7fe fff0 	bl	800088c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e160      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 fad8 	bl	8001e7c <RCC_Delay>
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7fe ffda 	bl	800088c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	e00f      	b.n	80018fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7fe ffd6 	bl	800088c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d908      	bls.n	80018fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e146      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e9      	bne.n	80018dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a6 	beq.w	8001a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b8b      	ldr	r3, [pc, #556]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10d      	bne.n	8001942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a87      	ldr	r2, [pc, #540]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b85      	ldr	r3, [pc, #532]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7e      	ldr	r2, [pc, #504]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7fe ff97 	bl	800088c <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7fe ff93 	bl	800088c <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e103      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 8001988:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e02d      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x334>
 800199e:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a69      	ldr	r2, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a66      	ldr	r2, [pc, #408]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	e01c      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x356>
 80019c0:	4b61      	ldr	r3, [pc, #388]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a60      	ldr	r2, [pc, #384]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b5e      	ldr	r3, [pc, #376]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a5d      	ldr	r2, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a5a      	ldr	r2, [pc, #360]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a57      	ldr	r2, [pc, #348]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d015      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7fe ff47 	bl	800088c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7fe ff43 	bl	800088c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0b1      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ee      	beq.n	8001a02 <HAL_RCC_OscConfig+0x37e>
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7fe ff31 	bl	800088c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7fe ff2d 	bl	800088c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e09b      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8087 	beq.w	8001b7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d061      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d146      	bne.n	8001b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7fe ff01 	bl	800088c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7fe fefd 	bl	800088c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e06d      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4921      	ldr	r1, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a19      	ldr	r1, [r3, #32]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	491b      	ldr	r1, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7fe fed1 	bl	800088c <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7fe fecd 	bl	800088c <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e03d      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
 8001b0c:	e035      	b.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7fe feba 	bl	800088c <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7fe feb6 	bl	800088c <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e026      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x498>
 8001b3a:	e01e      	b.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e019      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x500>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0d0      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d910      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 0207 	bic.w	r2, r3, #7
 8001bb2:	4965      	ldr	r1, [pc, #404]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b8      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	494d      	ldr	r1, [pc, #308]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d040      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d115      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e07f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e073      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06b      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4936      	ldr	r1, [pc, #216]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7fe fe08 	bl	800088c <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7fe fe04 	bl	800088c <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e053      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d210      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 0207 	bic.w	r2, r3, #7
 8001cbe:	4922      	ldr	r1, [pc, #136]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4916      	ldr	r1, [pc, #88]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d16:	f000 f821 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490a      	ldr	r1, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1cc>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1d0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fd66 	bl	8000808 <HAL_InitTick>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	0800335c 	.word	0x0800335c
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	b490      	push	{r4, r7}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d64:	1d3c      	adds	r4, r7, #4
 8001d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d6c:	f240 2301 	movw	r3, #513	; 0x201
 8001d70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d002      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x40>
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d003      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0x46>
 8001d9a:	e02b      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d9e:	623b      	str	r3, [r7, #32]
      break;
 8001da0:	e02b      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	0c9b      	lsrs	r3, r3, #18
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3328      	adds	r3, #40	; 0x28
 8001dac:	443b      	add	r3, r7
 8001dae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001db2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	0c5b      	lsrs	r3, r3, #17
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	3328      	adds	r3, #40	; 0x28
 8001dca:	443b      	add	r3, r7
 8001dcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dd6:	fb03 f202 	mul.w	r2, r3, r2
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	e004      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	623b      	str	r3, [r7, #32]
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001df6:	623b      	str	r3, [r7, #32]
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc90      	pop	{r4, r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	0800334c 	.word	0x0800334c
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	007a1200 	.word	0x007a1200
 8001e14:	003d0900 	.word	0x003d0900

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff2 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	0800336c 	.word	0x0800336c

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	0800336c 	.word	0x0800336c

08001e7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <RCC_Delay+0x34>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <RCC_Delay+0x38>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0a5b      	lsrs	r3, r3, #9
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e98:	bf00      	nop
  }
  while (Delay --);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	60fa      	str	r2, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <RCC_Delay+0x1c>
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	10624dd3 	.word	0x10624dd3

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d07d      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed8:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a4b      	ldr	r2, [pc, #300]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eee:	61d3      	str	r3, [r2, #28]
 8001ef0:	4b49      	ldr	r3, [pc, #292]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efc:	2301      	movs	r3, #1
 8001efe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b46      	ldr	r3, [pc, #280]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d118      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a42      	ldr	r2, [pc, #264]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f18:	f7fe fcb8 	bl	800088c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	e008      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7fe fcb4 	bl	800088c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e06d      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f3e:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d02e      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d027      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f66:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f72:	4a29      	ldr	r2, [pc, #164]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d014      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7fe fc83 	bl	800088c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fc7f 	bl	800088c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e036      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ee      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4917      	ldr	r1, [pc, #92]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	490b      	ldr	r1, [pc, #44]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4904      	ldr	r1, [pc, #16]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
 8002020:	42420440 	.word	0x42420440

08002024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e03f      	b.n	80020b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fa82 	bl	8000554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2224      	movs	r2, #36	; 0x24
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68da      	ldr	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f905 	bl	8002278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800207c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800208c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800209c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b08a      	sub	sp, #40	; 0x28
 80020c2:	af02      	add	r7, sp, #8
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d17c      	bne.n	80021d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_UART_Transmit+0x2c>
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e075      	b.n	80021da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_UART_Transmit+0x3e>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e06e      	b.n	80021da <HAL_UART_Transmit+0x11c>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2221      	movs	r2, #33	; 0x21
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002112:	f7fe fbbb 	bl	800088c <HAL_GetTick>
 8002116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	88fa      	ldrh	r2, [r7, #6]
 800211c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	88fa      	ldrh	r2, [r7, #6]
 8002122:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212c:	d108      	bne.n	8002140 <HAL_UART_Transmit+0x82>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d104      	bne.n	8002140 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	e003      	b.n	8002148 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002150:	e02a      	b.n	80021a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2200      	movs	r2, #0
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f840 	bl	80021e2 <UART_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e036      	b.n	80021da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10b      	bne.n	800218a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002180:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3302      	adds	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	e007      	b.n	800219a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	781a      	ldrb	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	3301      	adds	r3, #1
 8002198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800219e:	b29b      	uxth	r3, r3
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1cf      	bne.n	8002152 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2200      	movs	r2, #0
 80021ba:	2140      	movs	r1, #64	; 0x40
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f810 	bl	80021e2 <UART_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e006      	b.n	80021da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4613      	mov	r3, r2
 80021f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021f2:	e02c      	b.n	800224e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fa:	d028      	beq.n	800224e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d007      	beq.n	8002212 <UART_WaitOnFlagUntilTimeout+0x30>
 8002202:	f7fe fb43 	bl	800088c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	429a      	cmp	r2, r3
 8002210:	d21d      	bcs.n	800224e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002220:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0201 	bic.w	r2, r2, #1
 8002230:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2220      	movs	r2, #32
 800223e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e00f      	b.n	800226e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4013      	ands	r3, r2
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	bf0c      	ite	eq
 800225e:	2301      	moveq	r3, #1
 8002260:	2300      	movne	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	429a      	cmp	r2, r3
 800226a:	d0c3      	beq.n	80021f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022b2:	f023 030c 	bic.w	r3, r3, #12
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	430b      	orrs	r3, r1
 80022be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a2c      	ldr	r2, [pc, #176]	; (800238c <UART_SetConfig+0x114>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d103      	bne.n	80022e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022e0:	f7ff fdb8 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	e002      	b.n	80022ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022e8:	f7ff fda0 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 80022ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009a      	lsls	r2, r3, #2
 80022f8:	441a      	add	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	4a22      	ldr	r2, [pc, #136]	; (8002390 <UART_SetConfig+0x118>)
 8002306:	fba2 2303 	umull	r2, r3, r2, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	0119      	lsls	r1, r3, #4
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	009a      	lsls	r2, r3, #2
 8002318:	441a      	add	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fbb2 f2f3 	udiv	r2, r2, r3
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <UART_SetConfig+0x118>)
 8002326:	fba3 0302 	umull	r0, r3, r3, r2
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	2064      	movs	r0, #100	; 0x64
 800232e:	fb00 f303 	mul.w	r3, r0, r3
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	3332      	adds	r3, #50	; 0x32
 8002338:	4a15      	ldr	r2, [pc, #84]	; (8002390 <UART_SetConfig+0x118>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002344:	4419      	add	r1, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	009a      	lsls	r2, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fbb2 f2f3 	udiv	r2, r2, r3
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <UART_SetConfig+0x118>)
 800235e:	fba3 0302 	umull	r0, r3, r3, r2
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2064      	movs	r0, #100	; 0x64
 8002366:	fb00 f303 	mul.w	r3, r0, r3
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	3332      	adds	r3, #50	; 0x32
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <UART_SetConfig+0x118>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	f003 020f 	and.w	r2, r3, #15
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	440a      	add	r2, r1
 8002382:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40013800 	.word	0x40013800
 8002390:	51eb851f 	.word	0x51eb851f

08002394 <__errno>:
 8002394:	4b01      	ldr	r3, [pc, #4]	; (800239c <__errno+0x8>)
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	2000000c 	.word	0x2000000c

080023a0 <__libc_init_array>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2600      	movs	r6, #0
 80023a4:	4d0c      	ldr	r5, [pc, #48]	; (80023d8 <__libc_init_array+0x38>)
 80023a6:	4c0d      	ldr	r4, [pc, #52]	; (80023dc <__libc_init_array+0x3c>)
 80023a8:	1b64      	subs	r4, r4, r5
 80023aa:	10a4      	asrs	r4, r4, #2
 80023ac:	42a6      	cmp	r6, r4
 80023ae:	d109      	bne.n	80023c4 <__libc_init_array+0x24>
 80023b0:	f000 ffb6 	bl	8003320 <_init>
 80023b4:	2600      	movs	r6, #0
 80023b6:	4d0a      	ldr	r5, [pc, #40]	; (80023e0 <__libc_init_array+0x40>)
 80023b8:	4c0a      	ldr	r4, [pc, #40]	; (80023e4 <__libc_init_array+0x44>)
 80023ba:	1b64      	subs	r4, r4, r5
 80023bc:	10a4      	asrs	r4, r4, #2
 80023be:	42a6      	cmp	r6, r4
 80023c0:	d105      	bne.n	80023ce <__libc_init_array+0x2e>
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
 80023c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c8:	4798      	blx	r3
 80023ca:	3601      	adds	r6, #1
 80023cc:	e7ee      	b.n	80023ac <__libc_init_array+0xc>
 80023ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d2:	4798      	blx	r3
 80023d4:	3601      	adds	r6, #1
 80023d6:	e7f2      	b.n	80023be <__libc_init_array+0x1e>
 80023d8:	0800340c 	.word	0x0800340c
 80023dc:	0800340c 	.word	0x0800340c
 80023e0:	0800340c 	.word	0x0800340c
 80023e4:	08003410 	.word	0x08003410

080023e8 <memset>:
 80023e8:	4603      	mov	r3, r0
 80023ea:	4402      	add	r2, r0
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d100      	bne.n	80023f2 <memset+0xa>
 80023f0:	4770      	bx	lr
 80023f2:	f803 1b01 	strb.w	r1, [r3], #1
 80023f6:	e7f9      	b.n	80023ec <memset+0x4>

080023f8 <iprintf>:
 80023f8:	b40f      	push	{r0, r1, r2, r3}
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <iprintf+0x2c>)
 80023fc:	b513      	push	{r0, r1, r4, lr}
 80023fe:	681c      	ldr	r4, [r3, #0]
 8002400:	b124      	cbz	r4, 800240c <iprintf+0x14>
 8002402:	69a3      	ldr	r3, [r4, #24]
 8002404:	b913      	cbnz	r3, 800240c <iprintf+0x14>
 8002406:	4620      	mov	r0, r4
 8002408:	f000 f866 	bl	80024d8 <__sinit>
 800240c:	ab05      	add	r3, sp, #20
 800240e:	4620      	mov	r0, r4
 8002410:	9a04      	ldr	r2, [sp, #16]
 8002412:	68a1      	ldr	r1, [r4, #8]
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	f000 f9bb 	bl	8002790 <_vfiprintf_r>
 800241a:	b002      	add	sp, #8
 800241c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002420:	b004      	add	sp, #16
 8002422:	4770      	bx	lr
 8002424:	2000000c 	.word	0x2000000c

08002428 <std>:
 8002428:	2300      	movs	r3, #0
 800242a:	b510      	push	{r4, lr}
 800242c:	4604      	mov	r4, r0
 800242e:	e9c0 3300 	strd	r3, r3, [r0]
 8002432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002436:	6083      	str	r3, [r0, #8]
 8002438:	8181      	strh	r1, [r0, #12]
 800243a:	6643      	str	r3, [r0, #100]	; 0x64
 800243c:	81c2      	strh	r2, [r0, #14]
 800243e:	6183      	str	r3, [r0, #24]
 8002440:	4619      	mov	r1, r3
 8002442:	2208      	movs	r2, #8
 8002444:	305c      	adds	r0, #92	; 0x5c
 8002446:	f7ff ffcf 	bl	80023e8 <memset>
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <std+0x38>)
 800244c:	6224      	str	r4, [r4, #32]
 800244e:	6263      	str	r3, [r4, #36]	; 0x24
 8002450:	4b04      	ldr	r3, [pc, #16]	; (8002464 <std+0x3c>)
 8002452:	62a3      	str	r3, [r4, #40]	; 0x28
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <std+0x40>)
 8002456:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <std+0x44>)
 800245a:	6323      	str	r3, [r4, #48]	; 0x30
 800245c:	bd10      	pop	{r4, pc}
 800245e:	bf00      	nop
 8002460:	08002d3d 	.word	0x08002d3d
 8002464:	08002d5f 	.word	0x08002d5f
 8002468:	08002d97 	.word	0x08002d97
 800246c:	08002dbb 	.word	0x08002dbb

08002470 <_cleanup_r>:
 8002470:	4901      	ldr	r1, [pc, #4]	; (8002478 <_cleanup_r+0x8>)
 8002472:	f000 b8af 	b.w	80025d4 <_fwalk_reent>
 8002476:	bf00      	nop
 8002478:	0800308d 	.word	0x0800308d

0800247c <__sfmoreglue>:
 800247c:	2268      	movs	r2, #104	; 0x68
 800247e:	b570      	push	{r4, r5, r6, lr}
 8002480:	1e4d      	subs	r5, r1, #1
 8002482:	4355      	muls	r5, r2
 8002484:	460e      	mov	r6, r1
 8002486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800248a:	f000 f8e5 	bl	8002658 <_malloc_r>
 800248e:	4604      	mov	r4, r0
 8002490:	b140      	cbz	r0, 80024a4 <__sfmoreglue+0x28>
 8002492:	2100      	movs	r1, #0
 8002494:	e9c0 1600 	strd	r1, r6, [r0]
 8002498:	300c      	adds	r0, #12
 800249a:	60a0      	str	r0, [r4, #8]
 800249c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80024a0:	f7ff ffa2 	bl	80023e8 <memset>
 80024a4:	4620      	mov	r0, r4
 80024a6:	bd70      	pop	{r4, r5, r6, pc}

080024a8 <__sfp_lock_acquire>:
 80024a8:	4801      	ldr	r0, [pc, #4]	; (80024b0 <__sfp_lock_acquire+0x8>)
 80024aa:	f000 b8b3 	b.w	8002614 <__retarget_lock_acquire_recursive>
 80024ae:	bf00      	nop
 80024b0:	2000010d 	.word	0x2000010d

080024b4 <__sfp_lock_release>:
 80024b4:	4801      	ldr	r0, [pc, #4]	; (80024bc <__sfp_lock_release+0x8>)
 80024b6:	f000 b8ae 	b.w	8002616 <__retarget_lock_release_recursive>
 80024ba:	bf00      	nop
 80024bc:	2000010d 	.word	0x2000010d

080024c0 <__sinit_lock_acquire>:
 80024c0:	4801      	ldr	r0, [pc, #4]	; (80024c8 <__sinit_lock_acquire+0x8>)
 80024c2:	f000 b8a7 	b.w	8002614 <__retarget_lock_acquire_recursive>
 80024c6:	bf00      	nop
 80024c8:	2000010e 	.word	0x2000010e

080024cc <__sinit_lock_release>:
 80024cc:	4801      	ldr	r0, [pc, #4]	; (80024d4 <__sinit_lock_release+0x8>)
 80024ce:	f000 b8a2 	b.w	8002616 <__retarget_lock_release_recursive>
 80024d2:	bf00      	nop
 80024d4:	2000010e 	.word	0x2000010e

080024d8 <__sinit>:
 80024d8:	b510      	push	{r4, lr}
 80024da:	4604      	mov	r4, r0
 80024dc:	f7ff fff0 	bl	80024c0 <__sinit_lock_acquire>
 80024e0:	69a3      	ldr	r3, [r4, #24]
 80024e2:	b11b      	cbz	r3, 80024ec <__sinit+0x14>
 80024e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024e8:	f7ff bff0 	b.w	80024cc <__sinit_lock_release>
 80024ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80024f0:	6523      	str	r3, [r4, #80]	; 0x50
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <__sinit+0x68>)
 80024f4:	4a13      	ldr	r2, [pc, #76]	; (8002544 <__sinit+0x6c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80024fa:	42a3      	cmp	r3, r4
 80024fc:	bf08      	it	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	4620      	mov	r0, r4
 8002502:	bf08      	it	eq
 8002504:	61a3      	streq	r3, [r4, #24]
 8002506:	f000 f81f 	bl	8002548 <__sfp>
 800250a:	6060      	str	r0, [r4, #4]
 800250c:	4620      	mov	r0, r4
 800250e:	f000 f81b 	bl	8002548 <__sfp>
 8002512:	60a0      	str	r0, [r4, #8]
 8002514:	4620      	mov	r0, r4
 8002516:	f000 f817 	bl	8002548 <__sfp>
 800251a:	2200      	movs	r2, #0
 800251c:	2104      	movs	r1, #4
 800251e:	60e0      	str	r0, [r4, #12]
 8002520:	6860      	ldr	r0, [r4, #4]
 8002522:	f7ff ff81 	bl	8002428 <std>
 8002526:	2201      	movs	r2, #1
 8002528:	2109      	movs	r1, #9
 800252a:	68a0      	ldr	r0, [r4, #8]
 800252c:	f7ff ff7c 	bl	8002428 <std>
 8002530:	2202      	movs	r2, #2
 8002532:	2112      	movs	r1, #18
 8002534:	68e0      	ldr	r0, [r4, #12]
 8002536:	f7ff ff77 	bl	8002428 <std>
 800253a:	2301      	movs	r3, #1
 800253c:	61a3      	str	r3, [r4, #24]
 800253e:	e7d1      	b.n	80024e4 <__sinit+0xc>
 8002540:	08003374 	.word	0x08003374
 8002544:	08002471 	.word	0x08002471

08002548 <__sfp>:
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254a:	4607      	mov	r7, r0
 800254c:	f7ff ffac 	bl	80024a8 <__sfp_lock_acquire>
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <__sfp+0x84>)
 8002552:	681e      	ldr	r6, [r3, #0]
 8002554:	69b3      	ldr	r3, [r6, #24]
 8002556:	b913      	cbnz	r3, 800255e <__sfp+0x16>
 8002558:	4630      	mov	r0, r6
 800255a:	f7ff ffbd 	bl	80024d8 <__sinit>
 800255e:	3648      	adds	r6, #72	; 0x48
 8002560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002564:	3b01      	subs	r3, #1
 8002566:	d503      	bpl.n	8002570 <__sfp+0x28>
 8002568:	6833      	ldr	r3, [r6, #0]
 800256a:	b30b      	cbz	r3, 80025b0 <__sfp+0x68>
 800256c:	6836      	ldr	r6, [r6, #0]
 800256e:	e7f7      	b.n	8002560 <__sfp+0x18>
 8002570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002574:	b9d5      	cbnz	r5, 80025ac <__sfp+0x64>
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <__sfp+0x88>)
 8002578:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800257c:	60e3      	str	r3, [r4, #12]
 800257e:	6665      	str	r5, [r4, #100]	; 0x64
 8002580:	f000 f847 	bl	8002612 <__retarget_lock_init_recursive>
 8002584:	f7ff ff96 	bl	80024b4 <__sfp_lock_release>
 8002588:	2208      	movs	r2, #8
 800258a:	4629      	mov	r1, r5
 800258c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002594:	6025      	str	r5, [r4, #0]
 8002596:	61a5      	str	r5, [r4, #24]
 8002598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800259c:	f7ff ff24 	bl	80023e8 <memset>
 80025a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80025a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80025a8:	4620      	mov	r0, r4
 80025aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025ac:	3468      	adds	r4, #104	; 0x68
 80025ae:	e7d9      	b.n	8002564 <__sfp+0x1c>
 80025b0:	2104      	movs	r1, #4
 80025b2:	4638      	mov	r0, r7
 80025b4:	f7ff ff62 	bl	800247c <__sfmoreglue>
 80025b8:	4604      	mov	r4, r0
 80025ba:	6030      	str	r0, [r6, #0]
 80025bc:	2800      	cmp	r0, #0
 80025be:	d1d5      	bne.n	800256c <__sfp+0x24>
 80025c0:	f7ff ff78 	bl	80024b4 <__sfp_lock_release>
 80025c4:	230c      	movs	r3, #12
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	e7ee      	b.n	80025a8 <__sfp+0x60>
 80025ca:	bf00      	nop
 80025cc:	08003374 	.word	0x08003374
 80025d0:	ffff0001 	.word	0xffff0001

080025d4 <_fwalk_reent>:
 80025d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025d8:	4606      	mov	r6, r0
 80025da:	4688      	mov	r8, r1
 80025dc:	2700      	movs	r7, #0
 80025de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80025e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80025e6:	f1b9 0901 	subs.w	r9, r9, #1
 80025ea:	d505      	bpl.n	80025f8 <_fwalk_reent+0x24>
 80025ec:	6824      	ldr	r4, [r4, #0]
 80025ee:	2c00      	cmp	r4, #0
 80025f0:	d1f7      	bne.n	80025e2 <_fwalk_reent+0xe>
 80025f2:	4638      	mov	r0, r7
 80025f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025f8:	89ab      	ldrh	r3, [r5, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d907      	bls.n	800260e <_fwalk_reent+0x3a>
 80025fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002602:	3301      	adds	r3, #1
 8002604:	d003      	beq.n	800260e <_fwalk_reent+0x3a>
 8002606:	4629      	mov	r1, r5
 8002608:	4630      	mov	r0, r6
 800260a:	47c0      	blx	r8
 800260c:	4307      	orrs	r7, r0
 800260e:	3568      	adds	r5, #104	; 0x68
 8002610:	e7e9      	b.n	80025e6 <_fwalk_reent+0x12>

08002612 <__retarget_lock_init_recursive>:
 8002612:	4770      	bx	lr

08002614 <__retarget_lock_acquire_recursive>:
 8002614:	4770      	bx	lr

08002616 <__retarget_lock_release_recursive>:
 8002616:	4770      	bx	lr

08002618 <sbrk_aligned>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	4e0e      	ldr	r6, [pc, #56]	; (8002654 <sbrk_aligned+0x3c>)
 800261c:	460c      	mov	r4, r1
 800261e:	6831      	ldr	r1, [r6, #0]
 8002620:	4605      	mov	r5, r0
 8002622:	b911      	cbnz	r1, 800262a <sbrk_aligned+0x12>
 8002624:	f000 fb7a 	bl	8002d1c <_sbrk_r>
 8002628:	6030      	str	r0, [r6, #0]
 800262a:	4621      	mov	r1, r4
 800262c:	4628      	mov	r0, r5
 800262e:	f000 fb75 	bl	8002d1c <_sbrk_r>
 8002632:	1c43      	adds	r3, r0, #1
 8002634:	d00a      	beq.n	800264c <sbrk_aligned+0x34>
 8002636:	1cc4      	adds	r4, r0, #3
 8002638:	f024 0403 	bic.w	r4, r4, #3
 800263c:	42a0      	cmp	r0, r4
 800263e:	d007      	beq.n	8002650 <sbrk_aligned+0x38>
 8002640:	1a21      	subs	r1, r4, r0
 8002642:	4628      	mov	r0, r5
 8002644:	f000 fb6a 	bl	8002d1c <_sbrk_r>
 8002648:	3001      	adds	r0, #1
 800264a:	d101      	bne.n	8002650 <sbrk_aligned+0x38>
 800264c:	f04f 34ff 	mov.w	r4, #4294967295
 8002650:	4620      	mov	r0, r4
 8002652:	bd70      	pop	{r4, r5, r6, pc}
 8002654:	20000114 	.word	0x20000114

08002658 <_malloc_r>:
 8002658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800265c:	1ccd      	adds	r5, r1, #3
 800265e:	f025 0503 	bic.w	r5, r5, #3
 8002662:	3508      	adds	r5, #8
 8002664:	2d0c      	cmp	r5, #12
 8002666:	bf38      	it	cc
 8002668:	250c      	movcc	r5, #12
 800266a:	2d00      	cmp	r5, #0
 800266c:	4607      	mov	r7, r0
 800266e:	db01      	blt.n	8002674 <_malloc_r+0x1c>
 8002670:	42a9      	cmp	r1, r5
 8002672:	d905      	bls.n	8002680 <_malloc_r+0x28>
 8002674:	230c      	movs	r3, #12
 8002676:	2600      	movs	r6, #0
 8002678:	603b      	str	r3, [r7, #0]
 800267a:	4630      	mov	r0, r6
 800267c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002680:	4e2e      	ldr	r6, [pc, #184]	; (800273c <_malloc_r+0xe4>)
 8002682:	f000 fdc5 	bl	8003210 <__malloc_lock>
 8002686:	6833      	ldr	r3, [r6, #0]
 8002688:	461c      	mov	r4, r3
 800268a:	bb34      	cbnz	r4, 80026da <_malloc_r+0x82>
 800268c:	4629      	mov	r1, r5
 800268e:	4638      	mov	r0, r7
 8002690:	f7ff ffc2 	bl	8002618 <sbrk_aligned>
 8002694:	1c43      	adds	r3, r0, #1
 8002696:	4604      	mov	r4, r0
 8002698:	d14d      	bne.n	8002736 <_malloc_r+0xde>
 800269a:	6834      	ldr	r4, [r6, #0]
 800269c:	4626      	mov	r6, r4
 800269e:	2e00      	cmp	r6, #0
 80026a0:	d140      	bne.n	8002724 <_malloc_r+0xcc>
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	4631      	mov	r1, r6
 80026a6:	4638      	mov	r0, r7
 80026a8:	eb04 0803 	add.w	r8, r4, r3
 80026ac:	f000 fb36 	bl	8002d1c <_sbrk_r>
 80026b0:	4580      	cmp	r8, r0
 80026b2:	d13a      	bne.n	800272a <_malloc_r+0xd2>
 80026b4:	6821      	ldr	r1, [r4, #0]
 80026b6:	3503      	adds	r5, #3
 80026b8:	1a6d      	subs	r5, r5, r1
 80026ba:	f025 0503 	bic.w	r5, r5, #3
 80026be:	3508      	adds	r5, #8
 80026c0:	2d0c      	cmp	r5, #12
 80026c2:	bf38      	it	cc
 80026c4:	250c      	movcc	r5, #12
 80026c6:	4638      	mov	r0, r7
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7ff ffa5 	bl	8002618 <sbrk_aligned>
 80026ce:	3001      	adds	r0, #1
 80026d0:	d02b      	beq.n	800272a <_malloc_r+0xd2>
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	442b      	add	r3, r5
 80026d6:	6023      	str	r3, [r4, #0]
 80026d8:	e00e      	b.n	80026f8 <_malloc_r+0xa0>
 80026da:	6822      	ldr	r2, [r4, #0]
 80026dc:	1b52      	subs	r2, r2, r5
 80026de:	d41e      	bmi.n	800271e <_malloc_r+0xc6>
 80026e0:	2a0b      	cmp	r2, #11
 80026e2:	d916      	bls.n	8002712 <_malloc_r+0xba>
 80026e4:	1961      	adds	r1, r4, r5
 80026e6:	42a3      	cmp	r3, r4
 80026e8:	6025      	str	r5, [r4, #0]
 80026ea:	bf18      	it	ne
 80026ec:	6059      	strne	r1, [r3, #4]
 80026ee:	6863      	ldr	r3, [r4, #4]
 80026f0:	bf08      	it	eq
 80026f2:	6031      	streq	r1, [r6, #0]
 80026f4:	5162      	str	r2, [r4, r5]
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	4638      	mov	r0, r7
 80026fa:	f104 060b 	add.w	r6, r4, #11
 80026fe:	f000 fd8d 	bl	800321c <__malloc_unlock>
 8002702:	f026 0607 	bic.w	r6, r6, #7
 8002706:	1d23      	adds	r3, r4, #4
 8002708:	1af2      	subs	r2, r6, r3
 800270a:	d0b6      	beq.n	800267a <_malloc_r+0x22>
 800270c:	1b9b      	subs	r3, r3, r6
 800270e:	50a3      	str	r3, [r4, r2]
 8002710:	e7b3      	b.n	800267a <_malloc_r+0x22>
 8002712:	6862      	ldr	r2, [r4, #4]
 8002714:	42a3      	cmp	r3, r4
 8002716:	bf0c      	ite	eq
 8002718:	6032      	streq	r2, [r6, #0]
 800271a:	605a      	strne	r2, [r3, #4]
 800271c:	e7ec      	b.n	80026f8 <_malloc_r+0xa0>
 800271e:	4623      	mov	r3, r4
 8002720:	6864      	ldr	r4, [r4, #4]
 8002722:	e7b2      	b.n	800268a <_malloc_r+0x32>
 8002724:	4634      	mov	r4, r6
 8002726:	6876      	ldr	r6, [r6, #4]
 8002728:	e7b9      	b.n	800269e <_malloc_r+0x46>
 800272a:	230c      	movs	r3, #12
 800272c:	4638      	mov	r0, r7
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	f000 fd74 	bl	800321c <__malloc_unlock>
 8002734:	e7a1      	b.n	800267a <_malloc_r+0x22>
 8002736:	6025      	str	r5, [r4, #0]
 8002738:	e7de      	b.n	80026f8 <_malloc_r+0xa0>
 800273a:	bf00      	nop
 800273c:	20000110 	.word	0x20000110

08002740 <__sfputc_r>:
 8002740:	6893      	ldr	r3, [r2, #8]
 8002742:	b410      	push	{r4}
 8002744:	3b01      	subs	r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	6093      	str	r3, [r2, #8]
 800274a:	da07      	bge.n	800275c <__sfputc_r+0x1c>
 800274c:	6994      	ldr	r4, [r2, #24]
 800274e:	42a3      	cmp	r3, r4
 8002750:	db01      	blt.n	8002756 <__sfputc_r+0x16>
 8002752:	290a      	cmp	r1, #10
 8002754:	d102      	bne.n	800275c <__sfputc_r+0x1c>
 8002756:	bc10      	pop	{r4}
 8002758:	f000 bb34 	b.w	8002dc4 <__swbuf_r>
 800275c:	6813      	ldr	r3, [r2, #0]
 800275e:	1c58      	adds	r0, r3, #1
 8002760:	6010      	str	r0, [r2, #0]
 8002762:	7019      	strb	r1, [r3, #0]
 8002764:	4608      	mov	r0, r1
 8002766:	bc10      	pop	{r4}
 8002768:	4770      	bx	lr

0800276a <__sfputs_r>:
 800276a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276c:	4606      	mov	r6, r0
 800276e:	460f      	mov	r7, r1
 8002770:	4614      	mov	r4, r2
 8002772:	18d5      	adds	r5, r2, r3
 8002774:	42ac      	cmp	r4, r5
 8002776:	d101      	bne.n	800277c <__sfputs_r+0x12>
 8002778:	2000      	movs	r0, #0
 800277a:	e007      	b.n	800278c <__sfputs_r+0x22>
 800277c:	463a      	mov	r2, r7
 800277e:	4630      	mov	r0, r6
 8002780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002784:	f7ff ffdc 	bl	8002740 <__sfputc_r>
 8002788:	1c43      	adds	r3, r0, #1
 800278a:	d1f3      	bne.n	8002774 <__sfputs_r+0xa>
 800278c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002790 <_vfiprintf_r>:
 8002790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002794:	460d      	mov	r5, r1
 8002796:	4614      	mov	r4, r2
 8002798:	4698      	mov	r8, r3
 800279a:	4606      	mov	r6, r0
 800279c:	b09d      	sub	sp, #116	; 0x74
 800279e:	b118      	cbz	r0, 80027a8 <_vfiprintf_r+0x18>
 80027a0:	6983      	ldr	r3, [r0, #24]
 80027a2:	b90b      	cbnz	r3, 80027a8 <_vfiprintf_r+0x18>
 80027a4:	f7ff fe98 	bl	80024d8 <__sinit>
 80027a8:	4b89      	ldr	r3, [pc, #548]	; (80029d0 <_vfiprintf_r+0x240>)
 80027aa:	429d      	cmp	r5, r3
 80027ac:	d11b      	bne.n	80027e6 <_vfiprintf_r+0x56>
 80027ae:	6875      	ldr	r5, [r6, #4]
 80027b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027b2:	07d9      	lsls	r1, r3, #31
 80027b4:	d405      	bmi.n	80027c2 <_vfiprintf_r+0x32>
 80027b6:	89ab      	ldrh	r3, [r5, #12]
 80027b8:	059a      	lsls	r2, r3, #22
 80027ba:	d402      	bmi.n	80027c2 <_vfiprintf_r+0x32>
 80027bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027be:	f7ff ff29 	bl	8002614 <__retarget_lock_acquire_recursive>
 80027c2:	89ab      	ldrh	r3, [r5, #12]
 80027c4:	071b      	lsls	r3, r3, #28
 80027c6:	d501      	bpl.n	80027cc <_vfiprintf_r+0x3c>
 80027c8:	692b      	ldr	r3, [r5, #16]
 80027ca:	b9eb      	cbnz	r3, 8002808 <_vfiprintf_r+0x78>
 80027cc:	4629      	mov	r1, r5
 80027ce:	4630      	mov	r0, r6
 80027d0:	f000 fb5c 	bl	8002e8c <__swsetup_r>
 80027d4:	b1c0      	cbz	r0, 8002808 <_vfiprintf_r+0x78>
 80027d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027d8:	07dc      	lsls	r4, r3, #31
 80027da:	d50e      	bpl.n	80027fa <_vfiprintf_r+0x6a>
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295
 80027e0:	b01d      	add	sp, #116	; 0x74
 80027e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027e6:	4b7b      	ldr	r3, [pc, #492]	; (80029d4 <_vfiprintf_r+0x244>)
 80027e8:	429d      	cmp	r5, r3
 80027ea:	d101      	bne.n	80027f0 <_vfiprintf_r+0x60>
 80027ec:	68b5      	ldr	r5, [r6, #8]
 80027ee:	e7df      	b.n	80027b0 <_vfiprintf_r+0x20>
 80027f0:	4b79      	ldr	r3, [pc, #484]	; (80029d8 <_vfiprintf_r+0x248>)
 80027f2:	429d      	cmp	r5, r3
 80027f4:	bf08      	it	eq
 80027f6:	68f5      	ldreq	r5, [r6, #12]
 80027f8:	e7da      	b.n	80027b0 <_vfiprintf_r+0x20>
 80027fa:	89ab      	ldrh	r3, [r5, #12]
 80027fc:	0598      	lsls	r0, r3, #22
 80027fe:	d4ed      	bmi.n	80027dc <_vfiprintf_r+0x4c>
 8002800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002802:	f7ff ff08 	bl	8002616 <__retarget_lock_release_recursive>
 8002806:	e7e9      	b.n	80027dc <_vfiprintf_r+0x4c>
 8002808:	2300      	movs	r3, #0
 800280a:	9309      	str	r3, [sp, #36]	; 0x24
 800280c:	2320      	movs	r3, #32
 800280e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002812:	2330      	movs	r3, #48	; 0x30
 8002814:	f04f 0901 	mov.w	r9, #1
 8002818:	f8cd 800c 	str.w	r8, [sp, #12]
 800281c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80029dc <_vfiprintf_r+0x24c>
 8002820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002824:	4623      	mov	r3, r4
 8002826:	469a      	mov	sl, r3
 8002828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800282c:	b10a      	cbz	r2, 8002832 <_vfiprintf_r+0xa2>
 800282e:	2a25      	cmp	r2, #37	; 0x25
 8002830:	d1f9      	bne.n	8002826 <_vfiprintf_r+0x96>
 8002832:	ebba 0b04 	subs.w	fp, sl, r4
 8002836:	d00b      	beq.n	8002850 <_vfiprintf_r+0xc0>
 8002838:	465b      	mov	r3, fp
 800283a:	4622      	mov	r2, r4
 800283c:	4629      	mov	r1, r5
 800283e:	4630      	mov	r0, r6
 8002840:	f7ff ff93 	bl	800276a <__sfputs_r>
 8002844:	3001      	adds	r0, #1
 8002846:	f000 80aa 	beq.w	800299e <_vfiprintf_r+0x20e>
 800284a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800284c:	445a      	add	r2, fp
 800284e:	9209      	str	r2, [sp, #36]	; 0x24
 8002850:	f89a 3000 	ldrb.w	r3, [sl]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80a2 	beq.w	800299e <_vfiprintf_r+0x20e>
 800285a:	2300      	movs	r3, #0
 800285c:	f04f 32ff 	mov.w	r2, #4294967295
 8002860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002864:	f10a 0a01 	add.w	sl, sl, #1
 8002868:	9304      	str	r3, [sp, #16]
 800286a:	9307      	str	r3, [sp, #28]
 800286c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002870:	931a      	str	r3, [sp, #104]	; 0x68
 8002872:	4654      	mov	r4, sl
 8002874:	2205      	movs	r2, #5
 8002876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800287a:	4858      	ldr	r0, [pc, #352]	; (80029dc <_vfiprintf_r+0x24c>)
 800287c:	f000 fcba 	bl	80031f4 <memchr>
 8002880:	9a04      	ldr	r2, [sp, #16]
 8002882:	b9d8      	cbnz	r0, 80028bc <_vfiprintf_r+0x12c>
 8002884:	06d1      	lsls	r1, r2, #27
 8002886:	bf44      	itt	mi
 8002888:	2320      	movmi	r3, #32
 800288a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800288e:	0713      	lsls	r3, r2, #28
 8002890:	bf44      	itt	mi
 8002892:	232b      	movmi	r3, #43	; 0x2b
 8002894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002898:	f89a 3000 	ldrb.w	r3, [sl]
 800289c:	2b2a      	cmp	r3, #42	; 0x2a
 800289e:	d015      	beq.n	80028cc <_vfiprintf_r+0x13c>
 80028a0:	4654      	mov	r4, sl
 80028a2:	2000      	movs	r0, #0
 80028a4:	f04f 0c0a 	mov.w	ip, #10
 80028a8:	9a07      	ldr	r2, [sp, #28]
 80028aa:	4621      	mov	r1, r4
 80028ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028b0:	3b30      	subs	r3, #48	; 0x30
 80028b2:	2b09      	cmp	r3, #9
 80028b4:	d94e      	bls.n	8002954 <_vfiprintf_r+0x1c4>
 80028b6:	b1b0      	cbz	r0, 80028e6 <_vfiprintf_r+0x156>
 80028b8:	9207      	str	r2, [sp, #28]
 80028ba:	e014      	b.n	80028e6 <_vfiprintf_r+0x156>
 80028bc:	eba0 0308 	sub.w	r3, r0, r8
 80028c0:	fa09 f303 	lsl.w	r3, r9, r3
 80028c4:	4313      	orrs	r3, r2
 80028c6:	46a2      	mov	sl, r4
 80028c8:	9304      	str	r3, [sp, #16]
 80028ca:	e7d2      	b.n	8002872 <_vfiprintf_r+0xe2>
 80028cc:	9b03      	ldr	r3, [sp, #12]
 80028ce:	1d19      	adds	r1, r3, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	9103      	str	r1, [sp, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bfbb      	ittet	lt
 80028d8:	425b      	neglt	r3, r3
 80028da:	f042 0202 	orrlt.w	r2, r2, #2
 80028de:	9307      	strge	r3, [sp, #28]
 80028e0:	9307      	strlt	r3, [sp, #28]
 80028e2:	bfb8      	it	lt
 80028e4:	9204      	strlt	r2, [sp, #16]
 80028e6:	7823      	ldrb	r3, [r4, #0]
 80028e8:	2b2e      	cmp	r3, #46	; 0x2e
 80028ea:	d10c      	bne.n	8002906 <_vfiprintf_r+0x176>
 80028ec:	7863      	ldrb	r3, [r4, #1]
 80028ee:	2b2a      	cmp	r3, #42	; 0x2a
 80028f0:	d135      	bne.n	800295e <_vfiprintf_r+0x1ce>
 80028f2:	9b03      	ldr	r3, [sp, #12]
 80028f4:	3402      	adds	r4, #2
 80028f6:	1d1a      	adds	r2, r3, #4
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	9203      	str	r2, [sp, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bfb8      	it	lt
 8002900:	f04f 33ff 	movlt.w	r3, #4294967295
 8002904:	9305      	str	r3, [sp, #20]
 8002906:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80029e0 <_vfiprintf_r+0x250>
 800290a:	2203      	movs	r2, #3
 800290c:	4650      	mov	r0, sl
 800290e:	7821      	ldrb	r1, [r4, #0]
 8002910:	f000 fc70 	bl	80031f4 <memchr>
 8002914:	b140      	cbz	r0, 8002928 <_vfiprintf_r+0x198>
 8002916:	2340      	movs	r3, #64	; 0x40
 8002918:	eba0 000a 	sub.w	r0, r0, sl
 800291c:	fa03 f000 	lsl.w	r0, r3, r0
 8002920:	9b04      	ldr	r3, [sp, #16]
 8002922:	3401      	adds	r4, #1
 8002924:	4303      	orrs	r3, r0
 8002926:	9304      	str	r3, [sp, #16]
 8002928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800292c:	2206      	movs	r2, #6
 800292e:	482d      	ldr	r0, [pc, #180]	; (80029e4 <_vfiprintf_r+0x254>)
 8002930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002934:	f000 fc5e 	bl	80031f4 <memchr>
 8002938:	2800      	cmp	r0, #0
 800293a:	d03f      	beq.n	80029bc <_vfiprintf_r+0x22c>
 800293c:	4b2a      	ldr	r3, [pc, #168]	; (80029e8 <_vfiprintf_r+0x258>)
 800293e:	bb1b      	cbnz	r3, 8002988 <_vfiprintf_r+0x1f8>
 8002940:	9b03      	ldr	r3, [sp, #12]
 8002942:	3307      	adds	r3, #7
 8002944:	f023 0307 	bic.w	r3, r3, #7
 8002948:	3308      	adds	r3, #8
 800294a:	9303      	str	r3, [sp, #12]
 800294c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800294e:	443b      	add	r3, r7
 8002950:	9309      	str	r3, [sp, #36]	; 0x24
 8002952:	e767      	b.n	8002824 <_vfiprintf_r+0x94>
 8002954:	460c      	mov	r4, r1
 8002956:	2001      	movs	r0, #1
 8002958:	fb0c 3202 	mla	r2, ip, r2, r3
 800295c:	e7a5      	b.n	80028aa <_vfiprintf_r+0x11a>
 800295e:	2300      	movs	r3, #0
 8002960:	f04f 0c0a 	mov.w	ip, #10
 8002964:	4619      	mov	r1, r3
 8002966:	3401      	adds	r4, #1
 8002968:	9305      	str	r3, [sp, #20]
 800296a:	4620      	mov	r0, r4
 800296c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002970:	3a30      	subs	r2, #48	; 0x30
 8002972:	2a09      	cmp	r2, #9
 8002974:	d903      	bls.n	800297e <_vfiprintf_r+0x1ee>
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0c5      	beq.n	8002906 <_vfiprintf_r+0x176>
 800297a:	9105      	str	r1, [sp, #20]
 800297c:	e7c3      	b.n	8002906 <_vfiprintf_r+0x176>
 800297e:	4604      	mov	r4, r0
 8002980:	2301      	movs	r3, #1
 8002982:	fb0c 2101 	mla	r1, ip, r1, r2
 8002986:	e7f0      	b.n	800296a <_vfiprintf_r+0x1da>
 8002988:	ab03      	add	r3, sp, #12
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	462a      	mov	r2, r5
 800298e:	4630      	mov	r0, r6
 8002990:	4b16      	ldr	r3, [pc, #88]	; (80029ec <_vfiprintf_r+0x25c>)
 8002992:	a904      	add	r1, sp, #16
 8002994:	f3af 8000 	nop.w
 8002998:	4607      	mov	r7, r0
 800299a:	1c78      	adds	r0, r7, #1
 800299c:	d1d6      	bne.n	800294c <_vfiprintf_r+0x1bc>
 800299e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029a0:	07d9      	lsls	r1, r3, #31
 80029a2:	d405      	bmi.n	80029b0 <_vfiprintf_r+0x220>
 80029a4:	89ab      	ldrh	r3, [r5, #12]
 80029a6:	059a      	lsls	r2, r3, #22
 80029a8:	d402      	bmi.n	80029b0 <_vfiprintf_r+0x220>
 80029aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029ac:	f7ff fe33 	bl	8002616 <__retarget_lock_release_recursive>
 80029b0:	89ab      	ldrh	r3, [r5, #12]
 80029b2:	065b      	lsls	r3, r3, #25
 80029b4:	f53f af12 	bmi.w	80027dc <_vfiprintf_r+0x4c>
 80029b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029ba:	e711      	b.n	80027e0 <_vfiprintf_r+0x50>
 80029bc:	ab03      	add	r3, sp, #12
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	462a      	mov	r2, r5
 80029c2:	4630      	mov	r0, r6
 80029c4:	4b09      	ldr	r3, [pc, #36]	; (80029ec <_vfiprintf_r+0x25c>)
 80029c6:	a904      	add	r1, sp, #16
 80029c8:	f000 f882 	bl	8002ad0 <_printf_i>
 80029cc:	e7e4      	b.n	8002998 <_vfiprintf_r+0x208>
 80029ce:	bf00      	nop
 80029d0:	08003398 	.word	0x08003398
 80029d4:	080033b8 	.word	0x080033b8
 80029d8:	08003378 	.word	0x08003378
 80029dc:	080033d8 	.word	0x080033d8
 80029e0:	080033de 	.word	0x080033de
 80029e4:	080033e2 	.word	0x080033e2
 80029e8:	00000000 	.word	0x00000000
 80029ec:	0800276b 	.word	0x0800276b

080029f0 <_printf_common>:
 80029f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029f4:	4616      	mov	r6, r2
 80029f6:	4699      	mov	r9, r3
 80029f8:	688a      	ldr	r2, [r1, #8]
 80029fa:	690b      	ldr	r3, [r1, #16]
 80029fc:	4607      	mov	r7, r0
 80029fe:	4293      	cmp	r3, r2
 8002a00:	bfb8      	it	lt
 8002a02:	4613      	movlt	r3, r2
 8002a04:	6033      	str	r3, [r6, #0]
 8002a06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a10:	b10a      	cbz	r2, 8002a16 <_printf_common+0x26>
 8002a12:	3301      	adds	r3, #1
 8002a14:	6033      	str	r3, [r6, #0]
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	0699      	lsls	r1, r3, #26
 8002a1a:	bf42      	ittt	mi
 8002a1c:	6833      	ldrmi	r3, [r6, #0]
 8002a1e:	3302      	addmi	r3, #2
 8002a20:	6033      	strmi	r3, [r6, #0]
 8002a22:	6825      	ldr	r5, [r4, #0]
 8002a24:	f015 0506 	ands.w	r5, r5, #6
 8002a28:	d106      	bne.n	8002a38 <_printf_common+0x48>
 8002a2a:	f104 0a19 	add.w	sl, r4, #25
 8002a2e:	68e3      	ldr	r3, [r4, #12]
 8002a30:	6832      	ldr	r2, [r6, #0]
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	42ab      	cmp	r3, r5
 8002a36:	dc28      	bgt.n	8002a8a <_printf_common+0x9a>
 8002a38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a3c:	1e13      	subs	r3, r2, #0
 8002a3e:	6822      	ldr	r2, [r4, #0]
 8002a40:	bf18      	it	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	0692      	lsls	r2, r2, #26
 8002a46:	d42d      	bmi.n	8002aa4 <_printf_common+0xb4>
 8002a48:	4649      	mov	r1, r9
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a50:	47c0      	blx	r8
 8002a52:	3001      	adds	r0, #1
 8002a54:	d020      	beq.n	8002a98 <_printf_common+0xa8>
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	68e5      	ldr	r5, [r4, #12]
 8002a5a:	f003 0306 	and.w	r3, r3, #6
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf18      	it	ne
 8002a62:	2500      	movne	r5, #0
 8002a64:	6832      	ldr	r2, [r6, #0]
 8002a66:	f04f 0600 	mov.w	r6, #0
 8002a6a:	68a3      	ldr	r3, [r4, #8]
 8002a6c:	bf08      	it	eq
 8002a6e:	1aad      	subeq	r5, r5, r2
 8002a70:	6922      	ldr	r2, [r4, #16]
 8002a72:	bf08      	it	eq
 8002a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	bfc4      	itt	gt
 8002a7c:	1a9b      	subgt	r3, r3, r2
 8002a7e:	18ed      	addgt	r5, r5, r3
 8002a80:	341a      	adds	r4, #26
 8002a82:	42b5      	cmp	r5, r6
 8002a84:	d11a      	bne.n	8002abc <_printf_common+0xcc>
 8002a86:	2000      	movs	r0, #0
 8002a88:	e008      	b.n	8002a9c <_printf_common+0xac>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	4652      	mov	r2, sl
 8002a8e:	4649      	mov	r1, r9
 8002a90:	4638      	mov	r0, r7
 8002a92:	47c0      	blx	r8
 8002a94:	3001      	adds	r0, #1
 8002a96:	d103      	bne.n	8002aa0 <_printf_common+0xb0>
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295
 8002a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002aa0:	3501      	adds	r5, #1
 8002aa2:	e7c4      	b.n	8002a2e <_printf_common+0x3e>
 8002aa4:	2030      	movs	r0, #48	; 0x30
 8002aa6:	18e1      	adds	r1, r4, r3
 8002aa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ab2:	4422      	add	r2, r4
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002aba:	e7c5      	b.n	8002a48 <_printf_common+0x58>
 8002abc:	2301      	movs	r3, #1
 8002abe:	4622      	mov	r2, r4
 8002ac0:	4649      	mov	r1, r9
 8002ac2:	4638      	mov	r0, r7
 8002ac4:	47c0      	blx	r8
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	d0e6      	beq.n	8002a98 <_printf_common+0xa8>
 8002aca:	3601      	adds	r6, #1
 8002acc:	e7d9      	b.n	8002a82 <_printf_common+0x92>
	...

08002ad0 <_printf_i>:
 8002ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad4:	7e0f      	ldrb	r7, [r1, #24]
 8002ad6:	4691      	mov	r9, r2
 8002ad8:	2f78      	cmp	r7, #120	; 0x78
 8002ada:	4680      	mov	r8, r0
 8002adc:	460c      	mov	r4, r1
 8002ade:	469a      	mov	sl, r3
 8002ae0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ae2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ae6:	d807      	bhi.n	8002af8 <_printf_i+0x28>
 8002ae8:	2f62      	cmp	r7, #98	; 0x62
 8002aea:	d80a      	bhi.n	8002b02 <_printf_i+0x32>
 8002aec:	2f00      	cmp	r7, #0
 8002aee:	f000 80d9 	beq.w	8002ca4 <_printf_i+0x1d4>
 8002af2:	2f58      	cmp	r7, #88	; 0x58
 8002af4:	f000 80a4 	beq.w	8002c40 <_printf_i+0x170>
 8002af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b00:	e03a      	b.n	8002b78 <_printf_i+0xa8>
 8002b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b06:	2b15      	cmp	r3, #21
 8002b08:	d8f6      	bhi.n	8002af8 <_printf_i+0x28>
 8002b0a:	a101      	add	r1, pc, #4	; (adr r1, 8002b10 <_printf_i+0x40>)
 8002b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b10:	08002b69 	.word	0x08002b69
 8002b14:	08002b7d 	.word	0x08002b7d
 8002b18:	08002af9 	.word	0x08002af9
 8002b1c:	08002af9 	.word	0x08002af9
 8002b20:	08002af9 	.word	0x08002af9
 8002b24:	08002af9 	.word	0x08002af9
 8002b28:	08002b7d 	.word	0x08002b7d
 8002b2c:	08002af9 	.word	0x08002af9
 8002b30:	08002af9 	.word	0x08002af9
 8002b34:	08002af9 	.word	0x08002af9
 8002b38:	08002af9 	.word	0x08002af9
 8002b3c:	08002c8b 	.word	0x08002c8b
 8002b40:	08002bad 	.word	0x08002bad
 8002b44:	08002c6d 	.word	0x08002c6d
 8002b48:	08002af9 	.word	0x08002af9
 8002b4c:	08002af9 	.word	0x08002af9
 8002b50:	08002cad 	.word	0x08002cad
 8002b54:	08002af9 	.word	0x08002af9
 8002b58:	08002bad 	.word	0x08002bad
 8002b5c:	08002af9 	.word	0x08002af9
 8002b60:	08002af9 	.word	0x08002af9
 8002b64:	08002c75 	.word	0x08002c75
 8002b68:	682b      	ldr	r3, [r5, #0]
 8002b6a:	1d1a      	adds	r2, r3, #4
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	602a      	str	r2, [r5, #0]
 8002b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0a4      	b.n	8002cc6 <_printf_i+0x1f6>
 8002b7c:	6820      	ldr	r0, [r4, #0]
 8002b7e:	6829      	ldr	r1, [r5, #0]
 8002b80:	0606      	lsls	r6, r0, #24
 8002b82:	f101 0304 	add.w	r3, r1, #4
 8002b86:	d50a      	bpl.n	8002b9e <_printf_i+0xce>
 8002b88:	680e      	ldr	r6, [r1, #0]
 8002b8a:	602b      	str	r3, [r5, #0]
 8002b8c:	2e00      	cmp	r6, #0
 8002b8e:	da03      	bge.n	8002b98 <_printf_i+0xc8>
 8002b90:	232d      	movs	r3, #45	; 0x2d
 8002b92:	4276      	negs	r6, r6
 8002b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b98:	230a      	movs	r3, #10
 8002b9a:	485e      	ldr	r0, [pc, #376]	; (8002d14 <_printf_i+0x244>)
 8002b9c:	e019      	b.n	8002bd2 <_printf_i+0x102>
 8002b9e:	680e      	ldr	r6, [r1, #0]
 8002ba0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ba4:	602b      	str	r3, [r5, #0]
 8002ba6:	bf18      	it	ne
 8002ba8:	b236      	sxthne	r6, r6
 8002baa:	e7ef      	b.n	8002b8c <_printf_i+0xbc>
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	6820      	ldr	r0, [r4, #0]
 8002bb0:	1d19      	adds	r1, r3, #4
 8002bb2:	6029      	str	r1, [r5, #0]
 8002bb4:	0601      	lsls	r1, r0, #24
 8002bb6:	d501      	bpl.n	8002bbc <_printf_i+0xec>
 8002bb8:	681e      	ldr	r6, [r3, #0]
 8002bba:	e002      	b.n	8002bc2 <_printf_i+0xf2>
 8002bbc:	0646      	lsls	r6, r0, #25
 8002bbe:	d5fb      	bpl.n	8002bb8 <_printf_i+0xe8>
 8002bc0:	881e      	ldrh	r6, [r3, #0]
 8002bc2:	2f6f      	cmp	r7, #111	; 0x6f
 8002bc4:	bf0c      	ite	eq
 8002bc6:	2308      	moveq	r3, #8
 8002bc8:	230a      	movne	r3, #10
 8002bca:	4852      	ldr	r0, [pc, #328]	; (8002d14 <_printf_i+0x244>)
 8002bcc:	2100      	movs	r1, #0
 8002bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bd2:	6865      	ldr	r5, [r4, #4]
 8002bd4:	2d00      	cmp	r5, #0
 8002bd6:	bfa8      	it	ge
 8002bd8:	6821      	ldrge	r1, [r4, #0]
 8002bda:	60a5      	str	r5, [r4, #8]
 8002bdc:	bfa4      	itt	ge
 8002bde:	f021 0104 	bicge.w	r1, r1, #4
 8002be2:	6021      	strge	r1, [r4, #0]
 8002be4:	b90e      	cbnz	r6, 8002bea <_printf_i+0x11a>
 8002be6:	2d00      	cmp	r5, #0
 8002be8:	d04d      	beq.n	8002c86 <_printf_i+0x1b6>
 8002bea:	4615      	mov	r5, r2
 8002bec:	fbb6 f1f3 	udiv	r1, r6, r3
 8002bf0:	fb03 6711 	mls	r7, r3, r1, r6
 8002bf4:	5dc7      	ldrb	r7, [r0, r7]
 8002bf6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002bfa:	4637      	mov	r7, r6
 8002bfc:	42bb      	cmp	r3, r7
 8002bfe:	460e      	mov	r6, r1
 8002c00:	d9f4      	bls.n	8002bec <_printf_i+0x11c>
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d10b      	bne.n	8002c1e <_printf_i+0x14e>
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	07de      	lsls	r6, r3, #31
 8002c0a:	d508      	bpl.n	8002c1e <_printf_i+0x14e>
 8002c0c:	6923      	ldr	r3, [r4, #16]
 8002c0e:	6861      	ldr	r1, [r4, #4]
 8002c10:	4299      	cmp	r1, r3
 8002c12:	bfde      	ittt	le
 8002c14:	2330      	movle	r3, #48	; 0x30
 8002c16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c1e:	1b52      	subs	r2, r2, r5
 8002c20:	6122      	str	r2, [r4, #16]
 8002c22:	464b      	mov	r3, r9
 8002c24:	4621      	mov	r1, r4
 8002c26:	4640      	mov	r0, r8
 8002c28:	f8cd a000 	str.w	sl, [sp]
 8002c2c:	aa03      	add	r2, sp, #12
 8002c2e:	f7ff fedf 	bl	80029f0 <_printf_common>
 8002c32:	3001      	adds	r0, #1
 8002c34:	d14c      	bne.n	8002cd0 <_printf_i+0x200>
 8002c36:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3a:	b004      	add	sp, #16
 8002c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c40:	4834      	ldr	r0, [pc, #208]	; (8002d14 <_printf_i+0x244>)
 8002c42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c46:	6829      	ldr	r1, [r5, #0]
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c4e:	6029      	str	r1, [r5, #0]
 8002c50:	061d      	lsls	r5, r3, #24
 8002c52:	d514      	bpl.n	8002c7e <_printf_i+0x1ae>
 8002c54:	07df      	lsls	r7, r3, #31
 8002c56:	bf44      	itt	mi
 8002c58:	f043 0320 	orrmi.w	r3, r3, #32
 8002c5c:	6023      	strmi	r3, [r4, #0]
 8002c5e:	b91e      	cbnz	r6, 8002c68 <_printf_i+0x198>
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	f023 0320 	bic.w	r3, r3, #32
 8002c66:	6023      	str	r3, [r4, #0]
 8002c68:	2310      	movs	r3, #16
 8002c6a:	e7af      	b.n	8002bcc <_printf_i+0xfc>
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	f043 0320 	orr.w	r3, r3, #32
 8002c72:	6023      	str	r3, [r4, #0]
 8002c74:	2378      	movs	r3, #120	; 0x78
 8002c76:	4828      	ldr	r0, [pc, #160]	; (8002d18 <_printf_i+0x248>)
 8002c78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c7c:	e7e3      	b.n	8002c46 <_printf_i+0x176>
 8002c7e:	0659      	lsls	r1, r3, #25
 8002c80:	bf48      	it	mi
 8002c82:	b2b6      	uxthmi	r6, r6
 8002c84:	e7e6      	b.n	8002c54 <_printf_i+0x184>
 8002c86:	4615      	mov	r5, r2
 8002c88:	e7bb      	b.n	8002c02 <_printf_i+0x132>
 8002c8a:	682b      	ldr	r3, [r5, #0]
 8002c8c:	6826      	ldr	r6, [r4, #0]
 8002c8e:	1d18      	adds	r0, r3, #4
 8002c90:	6961      	ldr	r1, [r4, #20]
 8002c92:	6028      	str	r0, [r5, #0]
 8002c94:	0635      	lsls	r5, r6, #24
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	d501      	bpl.n	8002c9e <_printf_i+0x1ce>
 8002c9a:	6019      	str	r1, [r3, #0]
 8002c9c:	e002      	b.n	8002ca4 <_printf_i+0x1d4>
 8002c9e:	0670      	lsls	r0, r6, #25
 8002ca0:	d5fb      	bpl.n	8002c9a <_printf_i+0x1ca>
 8002ca2:	8019      	strh	r1, [r3, #0]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	4615      	mov	r5, r2
 8002ca8:	6123      	str	r3, [r4, #16]
 8002caa:	e7ba      	b.n	8002c22 <_printf_i+0x152>
 8002cac:	682b      	ldr	r3, [r5, #0]
 8002cae:	2100      	movs	r1, #0
 8002cb0:	1d1a      	adds	r2, r3, #4
 8002cb2:	602a      	str	r2, [r5, #0]
 8002cb4:	681d      	ldr	r5, [r3, #0]
 8002cb6:	6862      	ldr	r2, [r4, #4]
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f000 fa9b 	bl	80031f4 <memchr>
 8002cbe:	b108      	cbz	r0, 8002cc4 <_printf_i+0x1f4>
 8002cc0:	1b40      	subs	r0, r0, r5
 8002cc2:	6060      	str	r0, [r4, #4]
 8002cc4:	6863      	ldr	r3, [r4, #4]
 8002cc6:	6123      	str	r3, [r4, #16]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cce:	e7a8      	b.n	8002c22 <_printf_i+0x152>
 8002cd0:	462a      	mov	r2, r5
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	4640      	mov	r0, r8
 8002cd6:	6923      	ldr	r3, [r4, #16]
 8002cd8:	47d0      	blx	sl
 8002cda:	3001      	adds	r0, #1
 8002cdc:	d0ab      	beq.n	8002c36 <_printf_i+0x166>
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	079b      	lsls	r3, r3, #30
 8002ce2:	d413      	bmi.n	8002d0c <_printf_i+0x23c>
 8002ce4:	68e0      	ldr	r0, [r4, #12]
 8002ce6:	9b03      	ldr	r3, [sp, #12]
 8002ce8:	4298      	cmp	r0, r3
 8002cea:	bfb8      	it	lt
 8002cec:	4618      	movlt	r0, r3
 8002cee:	e7a4      	b.n	8002c3a <_printf_i+0x16a>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	4632      	mov	r2, r6
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	4640      	mov	r0, r8
 8002cf8:	47d0      	blx	sl
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	d09b      	beq.n	8002c36 <_printf_i+0x166>
 8002cfe:	3501      	adds	r5, #1
 8002d00:	68e3      	ldr	r3, [r4, #12]
 8002d02:	9903      	ldr	r1, [sp, #12]
 8002d04:	1a5b      	subs	r3, r3, r1
 8002d06:	42ab      	cmp	r3, r5
 8002d08:	dcf2      	bgt.n	8002cf0 <_printf_i+0x220>
 8002d0a:	e7eb      	b.n	8002ce4 <_printf_i+0x214>
 8002d0c:	2500      	movs	r5, #0
 8002d0e:	f104 0619 	add.w	r6, r4, #25
 8002d12:	e7f5      	b.n	8002d00 <_printf_i+0x230>
 8002d14:	080033e9 	.word	0x080033e9
 8002d18:	080033fa 	.word	0x080033fa

08002d1c <_sbrk_r>:
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	2300      	movs	r3, #0
 8002d20:	4d05      	ldr	r5, [pc, #20]	; (8002d38 <_sbrk_r+0x1c>)
 8002d22:	4604      	mov	r4, r0
 8002d24:	4608      	mov	r0, r1
 8002d26:	602b      	str	r3, [r5, #0]
 8002d28:	f7fd fcf6 	bl	8000718 <_sbrk>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_sbrk_r+0x1a>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_sbrk_r+0x1a>
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	20000118 	.word	0x20000118

08002d3c <__sread>:
 8002d3c:	b510      	push	{r4, lr}
 8002d3e:	460c      	mov	r4, r1
 8002d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d44:	f000 fab8 	bl	80032b8 <_read_r>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	bfab      	itete	ge
 8002d4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8002d50:	181b      	addge	r3, r3, r0
 8002d52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d56:	bfac      	ite	ge
 8002d58:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d5a:	81a3      	strhlt	r3, [r4, #12]
 8002d5c:	bd10      	pop	{r4, pc}

08002d5e <__swrite>:
 8002d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d62:	461f      	mov	r7, r3
 8002d64:	898b      	ldrh	r3, [r1, #12]
 8002d66:	4605      	mov	r5, r0
 8002d68:	05db      	lsls	r3, r3, #23
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	4616      	mov	r6, r2
 8002d6e:	d505      	bpl.n	8002d7c <__swrite+0x1e>
 8002d70:	2302      	movs	r3, #2
 8002d72:	2200      	movs	r2, #0
 8002d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d78:	f000 f9c4 	bl	8003104 <_lseek_r>
 8002d7c:	89a3      	ldrh	r3, [r4, #12]
 8002d7e:	4632      	mov	r2, r6
 8002d80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	4628      	mov	r0, r5
 8002d88:	463b      	mov	r3, r7
 8002d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d92:	f000 b869 	b.w	8002e68 <_write_r>

08002d96 <__sseek>:
 8002d96:	b510      	push	{r4, lr}
 8002d98:	460c      	mov	r4, r1
 8002d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d9e:	f000 f9b1 	bl	8003104 <_lseek_r>
 8002da2:	1c43      	adds	r3, r0, #1
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	bf15      	itete	ne
 8002da8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002daa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002dae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002db2:	81a3      	strheq	r3, [r4, #12]
 8002db4:	bf18      	it	ne
 8002db6:	81a3      	strhne	r3, [r4, #12]
 8002db8:	bd10      	pop	{r4, pc}

08002dba <__sclose>:
 8002dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dbe:	f000 b8d3 	b.w	8002f68 <_close_r>
	...

08002dc4 <__swbuf_r>:
 8002dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc6:	460e      	mov	r6, r1
 8002dc8:	4614      	mov	r4, r2
 8002dca:	4605      	mov	r5, r0
 8002dcc:	b118      	cbz	r0, 8002dd6 <__swbuf_r+0x12>
 8002dce:	6983      	ldr	r3, [r0, #24]
 8002dd0:	b90b      	cbnz	r3, 8002dd6 <__swbuf_r+0x12>
 8002dd2:	f7ff fb81 	bl	80024d8 <__sinit>
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <__swbuf_r+0x98>)
 8002dd8:	429c      	cmp	r4, r3
 8002dda:	d12b      	bne.n	8002e34 <__swbuf_r+0x70>
 8002ddc:	686c      	ldr	r4, [r5, #4]
 8002dde:	69a3      	ldr	r3, [r4, #24]
 8002de0:	60a3      	str	r3, [r4, #8]
 8002de2:	89a3      	ldrh	r3, [r4, #12]
 8002de4:	071a      	lsls	r2, r3, #28
 8002de6:	d52f      	bpl.n	8002e48 <__swbuf_r+0x84>
 8002de8:	6923      	ldr	r3, [r4, #16]
 8002dea:	b36b      	cbz	r3, 8002e48 <__swbuf_r+0x84>
 8002dec:	6923      	ldr	r3, [r4, #16]
 8002dee:	6820      	ldr	r0, [r4, #0]
 8002df0:	b2f6      	uxtb	r6, r6
 8002df2:	1ac0      	subs	r0, r0, r3
 8002df4:	6963      	ldr	r3, [r4, #20]
 8002df6:	4637      	mov	r7, r6
 8002df8:	4283      	cmp	r3, r0
 8002dfa:	dc04      	bgt.n	8002e06 <__swbuf_r+0x42>
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	4628      	mov	r0, r5
 8002e00:	f000 f944 	bl	800308c <_fflush_r>
 8002e04:	bb30      	cbnz	r0, 8002e54 <__swbuf_r+0x90>
 8002e06:	68a3      	ldr	r3, [r4, #8]
 8002e08:	3001      	adds	r0, #1
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	60a3      	str	r3, [r4, #8]
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	6022      	str	r2, [r4, #0]
 8002e14:	701e      	strb	r6, [r3, #0]
 8002e16:	6963      	ldr	r3, [r4, #20]
 8002e18:	4283      	cmp	r3, r0
 8002e1a:	d004      	beq.n	8002e26 <__swbuf_r+0x62>
 8002e1c:	89a3      	ldrh	r3, [r4, #12]
 8002e1e:	07db      	lsls	r3, r3, #31
 8002e20:	d506      	bpl.n	8002e30 <__swbuf_r+0x6c>
 8002e22:	2e0a      	cmp	r6, #10
 8002e24:	d104      	bne.n	8002e30 <__swbuf_r+0x6c>
 8002e26:	4621      	mov	r1, r4
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 f92f 	bl	800308c <_fflush_r>
 8002e2e:	b988      	cbnz	r0, 8002e54 <__swbuf_r+0x90>
 8002e30:	4638      	mov	r0, r7
 8002e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <__swbuf_r+0x9c>)
 8002e36:	429c      	cmp	r4, r3
 8002e38:	d101      	bne.n	8002e3e <__swbuf_r+0x7a>
 8002e3a:	68ac      	ldr	r4, [r5, #8]
 8002e3c:	e7cf      	b.n	8002dde <__swbuf_r+0x1a>
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <__swbuf_r+0xa0>)
 8002e40:	429c      	cmp	r4, r3
 8002e42:	bf08      	it	eq
 8002e44:	68ec      	ldreq	r4, [r5, #12]
 8002e46:	e7ca      	b.n	8002dde <__swbuf_r+0x1a>
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f000 f81e 	bl	8002e8c <__swsetup_r>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d0cb      	beq.n	8002dec <__swbuf_r+0x28>
 8002e54:	f04f 37ff 	mov.w	r7, #4294967295
 8002e58:	e7ea      	b.n	8002e30 <__swbuf_r+0x6c>
 8002e5a:	bf00      	nop
 8002e5c:	08003398 	.word	0x08003398
 8002e60:	080033b8 	.word	0x080033b8
 8002e64:	08003378 	.word	0x08003378

08002e68 <_write_r>:
 8002e68:	b538      	push	{r3, r4, r5, lr}
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	4608      	mov	r0, r1
 8002e6e:	4611      	mov	r1, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	4d05      	ldr	r5, [pc, #20]	; (8002e88 <_write_r+0x20>)
 8002e74:	602a      	str	r2, [r5, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f7fd fc01 	bl	800067e <_write>
 8002e7c:	1c43      	adds	r3, r0, #1
 8002e7e:	d102      	bne.n	8002e86 <_write_r+0x1e>
 8002e80:	682b      	ldr	r3, [r5, #0]
 8002e82:	b103      	cbz	r3, 8002e86 <_write_r+0x1e>
 8002e84:	6023      	str	r3, [r4, #0]
 8002e86:	bd38      	pop	{r3, r4, r5, pc}
 8002e88:	20000118 	.word	0x20000118

08002e8c <__swsetup_r>:
 8002e8c:	4b32      	ldr	r3, [pc, #200]	; (8002f58 <__swsetup_r+0xcc>)
 8002e8e:	b570      	push	{r4, r5, r6, lr}
 8002e90:	681d      	ldr	r5, [r3, #0]
 8002e92:	4606      	mov	r6, r0
 8002e94:	460c      	mov	r4, r1
 8002e96:	b125      	cbz	r5, 8002ea2 <__swsetup_r+0x16>
 8002e98:	69ab      	ldr	r3, [r5, #24]
 8002e9a:	b913      	cbnz	r3, 8002ea2 <__swsetup_r+0x16>
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f7ff fb1b 	bl	80024d8 <__sinit>
 8002ea2:	4b2e      	ldr	r3, [pc, #184]	; (8002f5c <__swsetup_r+0xd0>)
 8002ea4:	429c      	cmp	r4, r3
 8002ea6:	d10f      	bne.n	8002ec8 <__swsetup_r+0x3c>
 8002ea8:	686c      	ldr	r4, [r5, #4]
 8002eaa:	89a3      	ldrh	r3, [r4, #12]
 8002eac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002eb0:	0719      	lsls	r1, r3, #28
 8002eb2:	d42c      	bmi.n	8002f0e <__swsetup_r+0x82>
 8002eb4:	06dd      	lsls	r5, r3, #27
 8002eb6:	d411      	bmi.n	8002edc <__swsetup_r+0x50>
 8002eb8:	2309      	movs	r3, #9
 8002eba:	6033      	str	r3, [r6, #0]
 8002ebc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec4:	81a3      	strh	r3, [r4, #12]
 8002ec6:	e03e      	b.n	8002f46 <__swsetup_r+0xba>
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <__swsetup_r+0xd4>)
 8002eca:	429c      	cmp	r4, r3
 8002ecc:	d101      	bne.n	8002ed2 <__swsetup_r+0x46>
 8002ece:	68ac      	ldr	r4, [r5, #8]
 8002ed0:	e7eb      	b.n	8002eaa <__swsetup_r+0x1e>
 8002ed2:	4b24      	ldr	r3, [pc, #144]	; (8002f64 <__swsetup_r+0xd8>)
 8002ed4:	429c      	cmp	r4, r3
 8002ed6:	bf08      	it	eq
 8002ed8:	68ec      	ldreq	r4, [r5, #12]
 8002eda:	e7e6      	b.n	8002eaa <__swsetup_r+0x1e>
 8002edc:	0758      	lsls	r0, r3, #29
 8002ede:	d512      	bpl.n	8002f06 <__swsetup_r+0x7a>
 8002ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ee2:	b141      	cbz	r1, 8002ef6 <__swsetup_r+0x6a>
 8002ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ee8:	4299      	cmp	r1, r3
 8002eea:	d002      	beq.n	8002ef2 <__swsetup_r+0x66>
 8002eec:	4630      	mov	r0, r6
 8002eee:	f000 f99b 	bl	8003228 <_free_r>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	6363      	str	r3, [r4, #52]	; 0x34
 8002ef6:	89a3      	ldrh	r3, [r4, #12]
 8002ef8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002efc:	81a3      	strh	r3, [r4, #12]
 8002efe:	2300      	movs	r3, #0
 8002f00:	6063      	str	r3, [r4, #4]
 8002f02:	6923      	ldr	r3, [r4, #16]
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	89a3      	ldrh	r3, [r4, #12]
 8002f08:	f043 0308 	orr.w	r3, r3, #8
 8002f0c:	81a3      	strh	r3, [r4, #12]
 8002f0e:	6923      	ldr	r3, [r4, #16]
 8002f10:	b94b      	cbnz	r3, 8002f26 <__swsetup_r+0x9a>
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1c:	d003      	beq.n	8002f26 <__swsetup_r+0x9a>
 8002f1e:	4621      	mov	r1, r4
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 f927 	bl	8003174 <__smakebuf_r>
 8002f26:	89a0      	ldrh	r0, [r4, #12]
 8002f28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f2c:	f010 0301 	ands.w	r3, r0, #1
 8002f30:	d00a      	beq.n	8002f48 <__swsetup_r+0xbc>
 8002f32:	2300      	movs	r3, #0
 8002f34:	60a3      	str	r3, [r4, #8]
 8002f36:	6963      	ldr	r3, [r4, #20]
 8002f38:	425b      	negs	r3, r3
 8002f3a:	61a3      	str	r3, [r4, #24]
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	b943      	cbnz	r3, 8002f52 <__swsetup_r+0xc6>
 8002f40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f44:	d1ba      	bne.n	8002ebc <__swsetup_r+0x30>
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	0781      	lsls	r1, r0, #30
 8002f4a:	bf58      	it	pl
 8002f4c:	6963      	ldrpl	r3, [r4, #20]
 8002f4e:	60a3      	str	r3, [r4, #8]
 8002f50:	e7f4      	b.n	8002f3c <__swsetup_r+0xb0>
 8002f52:	2000      	movs	r0, #0
 8002f54:	e7f7      	b.n	8002f46 <__swsetup_r+0xba>
 8002f56:	bf00      	nop
 8002f58:	2000000c 	.word	0x2000000c
 8002f5c:	08003398 	.word	0x08003398
 8002f60:	080033b8 	.word	0x080033b8
 8002f64:	08003378 	.word	0x08003378

08002f68 <_close_r>:
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	4d05      	ldr	r5, [pc, #20]	; (8002f84 <_close_r+0x1c>)
 8002f6e:	4604      	mov	r4, r0
 8002f70:	4608      	mov	r0, r1
 8002f72:	602b      	str	r3, [r5, #0]
 8002f74:	f7fd fb9f 	bl	80006b6 <_close>
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	d102      	bne.n	8002f82 <_close_r+0x1a>
 8002f7c:	682b      	ldr	r3, [r5, #0]
 8002f7e:	b103      	cbz	r3, 8002f82 <_close_r+0x1a>
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	bd38      	pop	{r3, r4, r5, pc}
 8002f84:	20000118 	.word	0x20000118

08002f88 <__sflush_r>:
 8002f88:	898a      	ldrh	r2, [r1, #12]
 8002f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	0710      	lsls	r0, r2, #28
 8002f90:	460c      	mov	r4, r1
 8002f92:	d457      	bmi.n	8003044 <__sflush_r+0xbc>
 8002f94:	684b      	ldr	r3, [r1, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	dc04      	bgt.n	8002fa4 <__sflush_r+0x1c>
 8002f9a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	dc01      	bgt.n	8002fa4 <__sflush_r+0x1c>
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fa6:	2e00      	cmp	r6, #0
 8002fa8:	d0fa      	beq.n	8002fa0 <__sflush_r+0x18>
 8002faa:	2300      	movs	r3, #0
 8002fac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fb0:	682f      	ldr	r7, [r5, #0]
 8002fb2:	602b      	str	r3, [r5, #0]
 8002fb4:	d032      	beq.n	800301c <__sflush_r+0x94>
 8002fb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002fb8:	89a3      	ldrh	r3, [r4, #12]
 8002fba:	075a      	lsls	r2, r3, #29
 8002fbc:	d505      	bpl.n	8002fca <__sflush_r+0x42>
 8002fbe:	6863      	ldr	r3, [r4, #4]
 8002fc0:	1ac0      	subs	r0, r0, r3
 8002fc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fc4:	b10b      	cbz	r3, 8002fca <__sflush_r+0x42>
 8002fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fc8:	1ac0      	subs	r0, r0, r3
 8002fca:	2300      	movs	r3, #0
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	6a21      	ldr	r1, [r4, #32]
 8002fd4:	47b0      	blx	r6
 8002fd6:	1c43      	adds	r3, r0, #1
 8002fd8:	89a3      	ldrh	r3, [r4, #12]
 8002fda:	d106      	bne.n	8002fea <__sflush_r+0x62>
 8002fdc:	6829      	ldr	r1, [r5, #0]
 8002fde:	291d      	cmp	r1, #29
 8002fe0:	d82c      	bhi.n	800303c <__sflush_r+0xb4>
 8002fe2:	4a29      	ldr	r2, [pc, #164]	; (8003088 <__sflush_r+0x100>)
 8002fe4:	40ca      	lsrs	r2, r1
 8002fe6:	07d6      	lsls	r6, r2, #31
 8002fe8:	d528      	bpl.n	800303c <__sflush_r+0xb4>
 8002fea:	2200      	movs	r2, #0
 8002fec:	6062      	str	r2, [r4, #4]
 8002fee:	6922      	ldr	r2, [r4, #16]
 8002ff0:	04d9      	lsls	r1, r3, #19
 8002ff2:	6022      	str	r2, [r4, #0]
 8002ff4:	d504      	bpl.n	8003000 <__sflush_r+0x78>
 8002ff6:	1c42      	adds	r2, r0, #1
 8002ff8:	d101      	bne.n	8002ffe <__sflush_r+0x76>
 8002ffa:	682b      	ldr	r3, [r5, #0]
 8002ffc:	b903      	cbnz	r3, 8003000 <__sflush_r+0x78>
 8002ffe:	6560      	str	r0, [r4, #84]	; 0x54
 8003000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003002:	602f      	str	r7, [r5, #0]
 8003004:	2900      	cmp	r1, #0
 8003006:	d0cb      	beq.n	8002fa0 <__sflush_r+0x18>
 8003008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800300c:	4299      	cmp	r1, r3
 800300e:	d002      	beq.n	8003016 <__sflush_r+0x8e>
 8003010:	4628      	mov	r0, r5
 8003012:	f000 f909 	bl	8003228 <_free_r>
 8003016:	2000      	movs	r0, #0
 8003018:	6360      	str	r0, [r4, #52]	; 0x34
 800301a:	e7c2      	b.n	8002fa2 <__sflush_r+0x1a>
 800301c:	6a21      	ldr	r1, [r4, #32]
 800301e:	2301      	movs	r3, #1
 8003020:	4628      	mov	r0, r5
 8003022:	47b0      	blx	r6
 8003024:	1c41      	adds	r1, r0, #1
 8003026:	d1c7      	bne.n	8002fb8 <__sflush_r+0x30>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0c4      	beq.n	8002fb8 <__sflush_r+0x30>
 800302e:	2b1d      	cmp	r3, #29
 8003030:	d001      	beq.n	8003036 <__sflush_r+0xae>
 8003032:	2b16      	cmp	r3, #22
 8003034:	d101      	bne.n	800303a <__sflush_r+0xb2>
 8003036:	602f      	str	r7, [r5, #0]
 8003038:	e7b2      	b.n	8002fa0 <__sflush_r+0x18>
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003040:	81a3      	strh	r3, [r4, #12]
 8003042:	e7ae      	b.n	8002fa2 <__sflush_r+0x1a>
 8003044:	690f      	ldr	r7, [r1, #16]
 8003046:	2f00      	cmp	r7, #0
 8003048:	d0aa      	beq.n	8002fa0 <__sflush_r+0x18>
 800304a:	0793      	lsls	r3, r2, #30
 800304c:	bf18      	it	ne
 800304e:	2300      	movne	r3, #0
 8003050:	680e      	ldr	r6, [r1, #0]
 8003052:	bf08      	it	eq
 8003054:	694b      	ldreq	r3, [r1, #20]
 8003056:	1bf6      	subs	r6, r6, r7
 8003058:	600f      	str	r7, [r1, #0]
 800305a:	608b      	str	r3, [r1, #8]
 800305c:	2e00      	cmp	r6, #0
 800305e:	dd9f      	ble.n	8002fa0 <__sflush_r+0x18>
 8003060:	4633      	mov	r3, r6
 8003062:	463a      	mov	r2, r7
 8003064:	4628      	mov	r0, r5
 8003066:	6a21      	ldr	r1, [r4, #32]
 8003068:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800306c:	47e0      	blx	ip
 800306e:	2800      	cmp	r0, #0
 8003070:	dc06      	bgt.n	8003080 <__sflush_r+0xf8>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800307c:	81a3      	strh	r3, [r4, #12]
 800307e:	e790      	b.n	8002fa2 <__sflush_r+0x1a>
 8003080:	4407      	add	r7, r0
 8003082:	1a36      	subs	r6, r6, r0
 8003084:	e7ea      	b.n	800305c <__sflush_r+0xd4>
 8003086:	bf00      	nop
 8003088:	20400001 	.word	0x20400001

0800308c <_fflush_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	690b      	ldr	r3, [r1, #16]
 8003090:	4605      	mov	r5, r0
 8003092:	460c      	mov	r4, r1
 8003094:	b913      	cbnz	r3, 800309c <_fflush_r+0x10>
 8003096:	2500      	movs	r5, #0
 8003098:	4628      	mov	r0, r5
 800309a:	bd38      	pop	{r3, r4, r5, pc}
 800309c:	b118      	cbz	r0, 80030a6 <_fflush_r+0x1a>
 800309e:	6983      	ldr	r3, [r0, #24]
 80030a0:	b90b      	cbnz	r3, 80030a6 <_fflush_r+0x1a>
 80030a2:	f7ff fa19 	bl	80024d8 <__sinit>
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <_fflush_r+0x6c>)
 80030a8:	429c      	cmp	r4, r3
 80030aa:	d11b      	bne.n	80030e4 <_fflush_r+0x58>
 80030ac:	686c      	ldr	r4, [r5, #4]
 80030ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ef      	beq.n	8003096 <_fflush_r+0xa>
 80030b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80030b8:	07d0      	lsls	r0, r2, #31
 80030ba:	d404      	bmi.n	80030c6 <_fflush_r+0x3a>
 80030bc:	0599      	lsls	r1, r3, #22
 80030be:	d402      	bmi.n	80030c6 <_fflush_r+0x3a>
 80030c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030c2:	f7ff faa7 	bl	8002614 <__retarget_lock_acquire_recursive>
 80030c6:	4628      	mov	r0, r5
 80030c8:	4621      	mov	r1, r4
 80030ca:	f7ff ff5d 	bl	8002f88 <__sflush_r>
 80030ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030d0:	4605      	mov	r5, r0
 80030d2:	07da      	lsls	r2, r3, #31
 80030d4:	d4e0      	bmi.n	8003098 <_fflush_r+0xc>
 80030d6:	89a3      	ldrh	r3, [r4, #12]
 80030d8:	059b      	lsls	r3, r3, #22
 80030da:	d4dd      	bmi.n	8003098 <_fflush_r+0xc>
 80030dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030de:	f7ff fa9a 	bl	8002616 <__retarget_lock_release_recursive>
 80030e2:	e7d9      	b.n	8003098 <_fflush_r+0xc>
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <_fflush_r+0x70>)
 80030e6:	429c      	cmp	r4, r3
 80030e8:	d101      	bne.n	80030ee <_fflush_r+0x62>
 80030ea:	68ac      	ldr	r4, [r5, #8]
 80030ec:	e7df      	b.n	80030ae <_fflush_r+0x22>
 80030ee:	4b04      	ldr	r3, [pc, #16]	; (8003100 <_fflush_r+0x74>)
 80030f0:	429c      	cmp	r4, r3
 80030f2:	bf08      	it	eq
 80030f4:	68ec      	ldreq	r4, [r5, #12]
 80030f6:	e7da      	b.n	80030ae <_fflush_r+0x22>
 80030f8:	08003398 	.word	0x08003398
 80030fc:	080033b8 	.word	0x080033b8
 8003100:	08003378 	.word	0x08003378

08003104 <_lseek_r>:
 8003104:	b538      	push	{r3, r4, r5, lr}
 8003106:	4604      	mov	r4, r0
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	2200      	movs	r2, #0
 800310e:	4d05      	ldr	r5, [pc, #20]	; (8003124 <_lseek_r+0x20>)
 8003110:	602a      	str	r2, [r5, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	f7fd faf3 	bl	80006fe <_lseek>
 8003118:	1c43      	adds	r3, r0, #1
 800311a:	d102      	bne.n	8003122 <_lseek_r+0x1e>
 800311c:	682b      	ldr	r3, [r5, #0]
 800311e:	b103      	cbz	r3, 8003122 <_lseek_r+0x1e>
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	20000118 	.word	0x20000118

08003128 <__swhatbuf_r>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	460e      	mov	r6, r1
 800312c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003130:	4614      	mov	r4, r2
 8003132:	2900      	cmp	r1, #0
 8003134:	461d      	mov	r5, r3
 8003136:	b096      	sub	sp, #88	; 0x58
 8003138:	da08      	bge.n	800314c <__swhatbuf_r+0x24>
 800313a:	2200      	movs	r2, #0
 800313c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003140:	602a      	str	r2, [r5, #0]
 8003142:	061a      	lsls	r2, r3, #24
 8003144:	d410      	bmi.n	8003168 <__swhatbuf_r+0x40>
 8003146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800314a:	e00e      	b.n	800316a <__swhatbuf_r+0x42>
 800314c:	466a      	mov	r2, sp
 800314e:	f000 f8c5 	bl	80032dc <_fstat_r>
 8003152:	2800      	cmp	r0, #0
 8003154:	dbf1      	blt.n	800313a <__swhatbuf_r+0x12>
 8003156:	9a01      	ldr	r2, [sp, #4]
 8003158:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800315c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003160:	425a      	negs	r2, r3
 8003162:	415a      	adcs	r2, r3
 8003164:	602a      	str	r2, [r5, #0]
 8003166:	e7ee      	b.n	8003146 <__swhatbuf_r+0x1e>
 8003168:	2340      	movs	r3, #64	; 0x40
 800316a:	2000      	movs	r0, #0
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	b016      	add	sp, #88	; 0x58
 8003170:	bd70      	pop	{r4, r5, r6, pc}
	...

08003174 <__smakebuf_r>:
 8003174:	898b      	ldrh	r3, [r1, #12]
 8003176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003178:	079d      	lsls	r5, r3, #30
 800317a:	4606      	mov	r6, r0
 800317c:	460c      	mov	r4, r1
 800317e:	d507      	bpl.n	8003190 <__smakebuf_r+0x1c>
 8003180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003184:	6023      	str	r3, [r4, #0]
 8003186:	6123      	str	r3, [r4, #16]
 8003188:	2301      	movs	r3, #1
 800318a:	6163      	str	r3, [r4, #20]
 800318c:	b002      	add	sp, #8
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	466a      	mov	r2, sp
 8003192:	ab01      	add	r3, sp, #4
 8003194:	f7ff ffc8 	bl	8003128 <__swhatbuf_r>
 8003198:	9900      	ldr	r1, [sp, #0]
 800319a:	4605      	mov	r5, r0
 800319c:	4630      	mov	r0, r6
 800319e:	f7ff fa5b 	bl	8002658 <_malloc_r>
 80031a2:	b948      	cbnz	r0, 80031b8 <__smakebuf_r+0x44>
 80031a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031a8:	059a      	lsls	r2, r3, #22
 80031aa:	d4ef      	bmi.n	800318c <__smakebuf_r+0x18>
 80031ac:	f023 0303 	bic.w	r3, r3, #3
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	81a3      	strh	r3, [r4, #12]
 80031b6:	e7e3      	b.n	8003180 <__smakebuf_r+0xc>
 80031b8:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <__smakebuf_r+0x7c>)
 80031ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	6020      	str	r0, [r4, #0]
 80031c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c4:	81a3      	strh	r3, [r4, #12]
 80031c6:	9b00      	ldr	r3, [sp, #0]
 80031c8:	6120      	str	r0, [r4, #16]
 80031ca:	6163      	str	r3, [r4, #20]
 80031cc:	9b01      	ldr	r3, [sp, #4]
 80031ce:	b15b      	cbz	r3, 80031e8 <__smakebuf_r+0x74>
 80031d0:	4630      	mov	r0, r6
 80031d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031d6:	f000 f893 	bl	8003300 <_isatty_r>
 80031da:	b128      	cbz	r0, 80031e8 <__smakebuf_r+0x74>
 80031dc:	89a3      	ldrh	r3, [r4, #12]
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	81a3      	strh	r3, [r4, #12]
 80031e8:	89a0      	ldrh	r0, [r4, #12]
 80031ea:	4305      	orrs	r5, r0
 80031ec:	81a5      	strh	r5, [r4, #12]
 80031ee:	e7cd      	b.n	800318c <__smakebuf_r+0x18>
 80031f0:	08002471 	.word	0x08002471

080031f4 <memchr>:
 80031f4:	4603      	mov	r3, r0
 80031f6:	b510      	push	{r4, lr}
 80031f8:	b2c9      	uxtb	r1, r1
 80031fa:	4402      	add	r2, r0
 80031fc:	4293      	cmp	r3, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	d101      	bne.n	8003206 <memchr+0x12>
 8003202:	2000      	movs	r0, #0
 8003204:	e003      	b.n	800320e <memchr+0x1a>
 8003206:	7804      	ldrb	r4, [r0, #0]
 8003208:	3301      	adds	r3, #1
 800320a:	428c      	cmp	r4, r1
 800320c:	d1f6      	bne.n	80031fc <memchr+0x8>
 800320e:	bd10      	pop	{r4, pc}

08003210 <__malloc_lock>:
 8003210:	4801      	ldr	r0, [pc, #4]	; (8003218 <__malloc_lock+0x8>)
 8003212:	f7ff b9ff 	b.w	8002614 <__retarget_lock_acquire_recursive>
 8003216:	bf00      	nop
 8003218:	2000010c 	.word	0x2000010c

0800321c <__malloc_unlock>:
 800321c:	4801      	ldr	r0, [pc, #4]	; (8003224 <__malloc_unlock+0x8>)
 800321e:	f7ff b9fa 	b.w	8002616 <__retarget_lock_release_recursive>
 8003222:	bf00      	nop
 8003224:	2000010c 	.word	0x2000010c

08003228 <_free_r>:
 8003228:	b538      	push	{r3, r4, r5, lr}
 800322a:	4605      	mov	r5, r0
 800322c:	2900      	cmp	r1, #0
 800322e:	d040      	beq.n	80032b2 <_free_r+0x8a>
 8003230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003234:	1f0c      	subs	r4, r1, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	bfb8      	it	lt
 800323a:	18e4      	addlt	r4, r4, r3
 800323c:	f7ff ffe8 	bl	8003210 <__malloc_lock>
 8003240:	4a1c      	ldr	r2, [pc, #112]	; (80032b4 <_free_r+0x8c>)
 8003242:	6813      	ldr	r3, [r2, #0]
 8003244:	b933      	cbnz	r3, 8003254 <_free_r+0x2c>
 8003246:	6063      	str	r3, [r4, #4]
 8003248:	6014      	str	r4, [r2, #0]
 800324a:	4628      	mov	r0, r5
 800324c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003250:	f7ff bfe4 	b.w	800321c <__malloc_unlock>
 8003254:	42a3      	cmp	r3, r4
 8003256:	d908      	bls.n	800326a <_free_r+0x42>
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	1821      	adds	r1, r4, r0
 800325c:	428b      	cmp	r3, r1
 800325e:	bf01      	itttt	eq
 8003260:	6819      	ldreq	r1, [r3, #0]
 8003262:	685b      	ldreq	r3, [r3, #4]
 8003264:	1809      	addeq	r1, r1, r0
 8003266:	6021      	streq	r1, [r4, #0]
 8003268:	e7ed      	b.n	8003246 <_free_r+0x1e>
 800326a:	461a      	mov	r2, r3
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b10b      	cbz	r3, 8003274 <_free_r+0x4c>
 8003270:	42a3      	cmp	r3, r4
 8003272:	d9fa      	bls.n	800326a <_free_r+0x42>
 8003274:	6811      	ldr	r1, [r2, #0]
 8003276:	1850      	adds	r0, r2, r1
 8003278:	42a0      	cmp	r0, r4
 800327a:	d10b      	bne.n	8003294 <_free_r+0x6c>
 800327c:	6820      	ldr	r0, [r4, #0]
 800327e:	4401      	add	r1, r0
 8003280:	1850      	adds	r0, r2, r1
 8003282:	4283      	cmp	r3, r0
 8003284:	6011      	str	r1, [r2, #0]
 8003286:	d1e0      	bne.n	800324a <_free_r+0x22>
 8003288:	6818      	ldr	r0, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4401      	add	r1, r0
 800328e:	6011      	str	r1, [r2, #0]
 8003290:	6053      	str	r3, [r2, #4]
 8003292:	e7da      	b.n	800324a <_free_r+0x22>
 8003294:	d902      	bls.n	800329c <_free_r+0x74>
 8003296:	230c      	movs	r3, #12
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	e7d6      	b.n	800324a <_free_r+0x22>
 800329c:	6820      	ldr	r0, [r4, #0]
 800329e:	1821      	adds	r1, r4, r0
 80032a0:	428b      	cmp	r3, r1
 80032a2:	bf01      	itttt	eq
 80032a4:	6819      	ldreq	r1, [r3, #0]
 80032a6:	685b      	ldreq	r3, [r3, #4]
 80032a8:	1809      	addeq	r1, r1, r0
 80032aa:	6021      	streq	r1, [r4, #0]
 80032ac:	6063      	str	r3, [r4, #4]
 80032ae:	6054      	str	r4, [r2, #4]
 80032b0:	e7cb      	b.n	800324a <_free_r+0x22>
 80032b2:	bd38      	pop	{r3, r4, r5, pc}
 80032b4:	20000110 	.word	0x20000110

080032b8 <_read_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4604      	mov	r4, r0
 80032bc:	4608      	mov	r0, r1
 80032be:	4611      	mov	r1, r2
 80032c0:	2200      	movs	r2, #0
 80032c2:	4d05      	ldr	r5, [pc, #20]	; (80032d8 <_read_r+0x20>)
 80032c4:	602a      	str	r2, [r5, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f7fd f9bc 	bl	8000644 <_read>
 80032cc:	1c43      	adds	r3, r0, #1
 80032ce:	d102      	bne.n	80032d6 <_read_r+0x1e>
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	b103      	cbz	r3, 80032d6 <_read_r+0x1e>
 80032d4:	6023      	str	r3, [r4, #0]
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
 80032d8:	20000118 	.word	0x20000118

080032dc <_fstat_r>:
 80032dc:	b538      	push	{r3, r4, r5, lr}
 80032de:	2300      	movs	r3, #0
 80032e0:	4d06      	ldr	r5, [pc, #24]	; (80032fc <_fstat_r+0x20>)
 80032e2:	4604      	mov	r4, r0
 80032e4:	4608      	mov	r0, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	602b      	str	r3, [r5, #0]
 80032ea:	f7fd f9ef 	bl	80006cc <_fstat>
 80032ee:	1c43      	adds	r3, r0, #1
 80032f0:	d102      	bne.n	80032f8 <_fstat_r+0x1c>
 80032f2:	682b      	ldr	r3, [r5, #0]
 80032f4:	b103      	cbz	r3, 80032f8 <_fstat_r+0x1c>
 80032f6:	6023      	str	r3, [r4, #0]
 80032f8:	bd38      	pop	{r3, r4, r5, pc}
 80032fa:	bf00      	nop
 80032fc:	20000118 	.word	0x20000118

08003300 <_isatty_r>:
 8003300:	b538      	push	{r3, r4, r5, lr}
 8003302:	2300      	movs	r3, #0
 8003304:	4d05      	ldr	r5, [pc, #20]	; (800331c <_isatty_r+0x1c>)
 8003306:	4604      	mov	r4, r0
 8003308:	4608      	mov	r0, r1
 800330a:	602b      	str	r3, [r5, #0]
 800330c:	f7fd f9ed 	bl	80006ea <_isatty>
 8003310:	1c43      	adds	r3, r0, #1
 8003312:	d102      	bne.n	800331a <_isatty_r+0x1a>
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	b103      	cbz	r3, 800331a <_isatty_r+0x1a>
 8003318:	6023      	str	r3, [r4, #0]
 800331a:	bd38      	pop	{r3, r4, r5, pc}
 800331c:	20000118 	.word	0x20000118

08003320 <_init>:
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	bf00      	nop
 8003324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003326:	bc08      	pop	{r3}
 8003328:	469e      	mov	lr, r3
 800332a:	4770      	bx	lr

0800332c <_fini>:
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	bf00      	nop
 8003330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003332:	bc08      	pop	{r3}
 8003334:	469e      	mov	lr, r3
 8003336:	4770      	bx	lr
