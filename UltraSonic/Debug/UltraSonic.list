
UltraSonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005230  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08005340  08005340  00015340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005754  08005754  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005754  08005754  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005754  08005754  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800575c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001dc  08005938  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08005938  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e70  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c4  00000000  00000000  0002a075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002ba40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018404  00000000  00000000  0002d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc9f  00000000  00000000  000455dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b829  00000000  00000000  0005127b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcaa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004338  00000000  00000000  000dcaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005328 	.word	0x08005328

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005328 	.word	0x08005328

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a90:	1d39      	adds	r1, r7, #4
 8000a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a96:	2201      	movs	r2, #1
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <__io_putchar+0x20>)
 8000a9a:	f001 fd82 	bl	80025a2 <HAL_UART_Transmit>

  return ch;
 8000a9e:	687b      	ldr	r3, [r7, #4]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000240 	.word	0x20000240

08000aac <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t delay) {
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <delay_us+0x2c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < delay);
 8000abe:	bf00      	nop
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <delay_us+0x2c>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d3f9      	bcc.n	8000ac0 <delay_us+0x14>

//	TIM3->CNT = 0;
//	while(TIM3->CNT < delay);
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	200001f8 	.word	0x200001f8

08000adc <ultraSonic>:

void ultraSonic(uint32_t gpio_pin) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	if(trigflag == 0) {
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <ultraSonic+0x9c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d114      	bne.n	8000b16 <ultraSonic+0x3a>
		HAL_GPIO_WritePin(GPIOA, gpio_pin, GPIO_PIN_SET);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	2201      	movs	r2, #1
 8000af2:	4619      	mov	r1, r3
 8000af4:	4821      	ldr	r0, [pc, #132]	; (8000b7c <ultraSonic+0xa0>)
 8000af6:	f000 fe48 	bl	800178a <HAL_GPIO_WritePin>
		delay_us(10);
 8000afa:	200a      	movs	r0, #10
 8000afc:	f7ff ffd6 	bl	8000aac <delay_us>
		HAL_GPIO_WritePin(GPIOA, gpio_pin, GPIO_PIN_RESET);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	481c      	ldr	r0, [pc, #112]	; (8000b7c <ultraSonic+0xa0>)
 8000b0a:	f000 fe3e 	bl	800178a <HAL_GPIO_WritePin>
		trigflag = 1;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <ultraSonic+0x9c>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
			printf("distance : %d\n\r", distance);
			trigflag = 0;
			cnt = 0;
		}
	}
}
 8000b14:	e02c      	b.n	8000b70 <ultraSonic+0x94>
	else if(trigflag == 1) {
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <ultraSonic+0x9c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d128      	bne.n	8000b70 <ultraSonic+0x94>
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000b1e:	e004      	b.n	8000b2a <ultraSonic+0x4e>
			cnt++;
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <ultraSonic+0xa4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <ultraSonic+0xa4>)
 8000b28:	6013      	str	r3, [r2, #0]
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	4813      	ldr	r0, [pc, #76]	; (8000b7c <ultraSonic+0xa0>)
 8000b2e:	f000 fe15 	bl	800175c <HAL_GPIO_ReadPin>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d0f3      	beq.n	8000b20 <ultraSonic+0x44>
		if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) && cnt > 0) {
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4810      	ldr	r0, [pc, #64]	; (8000b7c <ultraSonic+0xa0>)
 8000b3c:	f000 fe0e 	bl	800175c <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d114      	bne.n	8000b70 <ultraSonic+0x94>
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <ultraSonic+0xa4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dd10      	ble.n	8000b70 <ultraSonic+0x94>
			distance = cnt;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <ultraSonic+0xa4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <ultraSonic+0xa8>)
 8000b56:	601a      	str	r2, [r3, #0]
			printf("distance : %d\n\r", distance);
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <ultraSonic+0xa8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480a      	ldr	r0, [pc, #40]	; (8000b88 <ultraSonic+0xac>)
 8000b60:	f002 fb1c 	bl	800319c <iprintf>
			trigflag = 0;
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <ultraSonic+0x9c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
			cnt = 0;
 8000b6a:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <ultraSonic+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000284 	.word	0x20000284
 8000b7c:	40010800 	.word	0x40010800
 8000b80:	2000028c 	.word	0x2000028c
 8000b84:	20000288 	.word	0x20000288
 8000b88:	08005340 	.word	0x08005340

08000b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b90:	f000 faf0 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b94:	f000 f80a 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b98:	f000 f8c2 	bl	8000d20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b9c:	f000 f896 	bl	8000ccc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ba0:	f000 f846 	bl	8000c30 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ultraSonic(GPIO_PIN_1);
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f7ff ff99 	bl	8000adc <ultraSonic>
 8000baa:	e7fb      	b.n	8000ba4 <main+0x18>

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b090      	sub	sp, #64	; 0x40
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0318 	add.w	r3, r7, #24
 8000bb6:	2228      	movs	r2, #40	; 0x28
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fe86 	bl	80028cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bde:	2300      	movs	r3, #0
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000be2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 fe07 	bl	8001800 <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bf8:	f000 f90c 	bl	8000e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c00:	2302      	movs	r3, #2
 8000c02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2102      	movs	r1, #2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 f874 	bl	8001d04 <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c22:	f000 f8f7 	bl	8000e14 <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3740      	adds	r7, #64	; 0x40
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	; (8000cc8 <MX_TIM3_Init+0x98>)
 8000c50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c54:	223f      	movs	r2, #63	; 0x3f
 8000c56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c72:	4814      	ldr	r0, [pc, #80]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c74:	f001 f9de 	bl	8002034 <HAL_TIM_Base_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c7e:	f000 f8c9 	bl	8000e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000c90:	f001 fa1f 	bl	80020d2 <HAL_TIM_ConfigClockSource>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c9a:	f000 f8bb 	bl	8000e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <MX_TIM3_Init+0x94>)
 8000cac:	f001 fbce 	bl	800244c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000cb6:	f000 f8ad 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200001f8 	.word	0x200001f8
 8000cc8:	40000400 	.word	0x40000400

08000ccc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <MX_USART2_UART_Init+0x50>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_USART2_UART_Init+0x4c>)
 8000d04:	f001 fc00 	bl	8002508 <HAL_UART_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d0e:	f000 f881 	bl	8000e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000240 	.word	0x20000240
 8000d1c:	40004400 	.word	0x40004400

08000d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d3a:	f043 0310 	orr.w	r3, r3, #16
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	4b2d      	ldr	r3, [pc, #180]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a2c      	ldr	r2, [pc, #176]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0320 	and.w	r3, r3, #32
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6193      	str	r3, [r2, #24]
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a20      	ldr	r2, [pc, #128]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_GPIO_Init+0xe4>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2122      	movs	r1, #34	; 0x22
 8000d98:	481b      	ldr	r0, [pc, #108]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000d9a:	f000 fcf6 	bl	800178a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <MX_GPIO_Init+0xec>)
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	4817      	ldr	r0, [pc, #92]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000db4:	f000 fb4e 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin_Pin */
  GPIO_InitStruct.Pin = Echo_Pin_Pin;
 8000db8:	2301      	movs	r3, #1
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Echo_Pin_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480f      	ldr	r0, [pc, #60]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000dcc:	f000 fb42 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trig_Pin_Pin LD2_Pin */
  GPIO_InitStruct.Pin = Trig_Pin_Pin|LD2_Pin;
 8000dd0:	2322      	movs	r3, #34	; 0x22
 8000dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000de8:	f000 fb34 	bl	8001454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2028      	movs	r0, #40	; 0x28
 8000df2:	f000 faf8 	bl	80013e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000df6:	2028      	movs	r0, #40	; 0x28
 8000df8:	f000 fb11 	bl	800141e <HAL_NVIC_EnableIRQ>

}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010800 	.word	0x40010800
 8000e0c:	10110000 	.word	0x10110000
 8000e10:	40011000 	.word	0x40011000

08000e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e18:	b672      	cpsid	i
}
 8000e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <Error_Handler+0x8>
	...

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e28:	699b      	ldr	r3, [r3, #24]
 8000e2a:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6193      	str	r3, [r2, #24]
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_MspInit+0x60>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_MspInit+0x60>)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010000 	.word	0x40010000

08000e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_TIM_Base_MspInit+0x34>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10b      	bne.n	8000eae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_TIM_Base_MspInit+0x38>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_TIM_Base_MspInit+0x38>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	61d3      	str	r3, [r2, #28]
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_TIM_Base_MspInit+0x38>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40000400 	.word	0x40000400
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <HAL_UART_MspInit+0x70>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d123      	bne.n	8000f28 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_UART_MspInit+0x74>)
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <HAL_UART_MspInit+0x74>)
 8000ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eea:	61d3      	str	r3, [r2, #28]
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_UART_MspInit+0x74>)
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_UART_MspInit+0x74>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_UART_MspInit+0x74>)
 8000efe:	f043 0304 	orr.w	r3, r3, #4
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_UART_MspInit+0x74>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0304 	and.w	r3, r3, #4
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f10:	230c      	movs	r3, #12
 8000f12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_UART_MspInit+0x78>)
 8000f24:	f000 fa96 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40004400 	.word	0x40004400
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010800 	.word	0x40010800

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f82:	f000 f93d 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f8e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f92:	f000 fc13 	bl	80017bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
	return 1;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <_kill>:

int _kill(int pid, int sig)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fb2:	f001 fc61 	bl	8002878 <__errno>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2216      	movs	r2, #22
 8000fba:	601a      	str	r2, [r3, #0]
	return -1;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_exit>:

void _exit (int status)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ffe7 	bl	8000fa8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fda:	e7fe      	b.n	8000fda <_exit+0x12>

08000fdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e00a      	b.n	8001004 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fee:	f3af 8000 	nop.w
 8000ff2:	4601      	mov	r1, r0
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	60ba      	str	r2, [r7, #8]
 8000ffa:	b2ca      	uxtb	r2, r1
 8000ffc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbf0      	blt.n	8000fee <_read+0x12>
	}

return len;
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e009      	b.n	800103c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	1c5a      	adds	r2, r3, #1
 800102c:	60ba      	str	r2, [r7, #8]
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fd29 	bl	8000a88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	dbf1      	blt.n	8001028 <_write+0x12>
	}
	return len;
 8001044:	687b      	ldr	r3, [r7, #4]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_close>:

int _close(int file)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001074:	605a      	str	r2, [r3, #4]
	return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <_isatty>:

int _isatty(int file)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	return 1;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
	return 0;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
	...

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f001 fbca 	bl	8002878 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20005000 	.word	0x20005000
 8001110:	00000400 	.word	0x00000400
 8001114:	20000290 	.word	0x20000290
 8001118:	200002a8 	.word	0x200002a8

0800111c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480c      	ldr	r0, [pc, #48]	; (800115c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800112a:	490d      	ldr	r1, [pc, #52]	; (8001160 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001140:	4c0a      	ldr	r4, [pc, #40]	; (800116c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800114e:	f7ff ffe5 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001152:	f001 fb97 	bl	8002884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001156:	f7ff fd19 	bl	8000b8c <main>
  bx lr
 800115a:	4770      	bx	lr
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001164:	0800575c 	.word	0x0800575c
  ldr r2, =_sbss
 8001168:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800116c:	200002a8 	.word	0x200002a8

08001170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC1_2_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_Init+0x28>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_Init+0x28>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f923 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f808 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001190:	f7ff fe46 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40022000 	.word	0x40022000

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x54>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x58>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f93b 	bl	800143a <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00e      	b.n	80011ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d80a      	bhi.n	80011ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f903 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <HAL_InitTick+0x5c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000004 	.word	0x20000004

08001200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_IncTick+0x1c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_IncTick+0x20>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a03      	ldr	r2, [pc, #12]	; (8001220 <HAL_IncTick+0x20>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	20000008 	.word	0x20000008
 8001220:	20000294 	.word	0x20000294

08001224 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b02      	ldr	r3, [pc, #8]	; (8001234 <HAL_GetTick+0x10>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	20000294 	.word	0x20000294

08001238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001254:	4013      	ands	r3, r2
 8001256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001260:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	; (800127c <__NVIC_SetPriorityGrouping+0x44>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <__NVIC_GetPriorityGrouping+0x18>)
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	0a1b      	lsrs	r3, r3, #8
 800128a:	f003 0307 	and.w	r3, r3, #7
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	db0b      	blt.n	80012c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	f003 021f 	and.w	r2, r3, #31
 80012b4:	4906      	ldr	r1, [pc, #24]	; (80012d0 <__NVIC_EnableIRQ+0x34>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	095b      	lsrs	r3, r3, #5
 80012bc:	2001      	movs	r0, #1
 80012be:	fa00 f202 	lsl.w	r2, r0, r2
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff90 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff2d 	bl	8001238 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff42 	bl	8001280 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff90 	bl	8001328 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5f 	bl	80012d4 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff35 	bl	800129c <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa2 	bl	800138c <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b08b      	sub	sp, #44	; 0x2c
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001466:	e169      	b.n	800173c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001468:	2201      	movs	r2, #1
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	69fa      	ldr	r2, [r7, #28]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	429a      	cmp	r2, r3
 8001482:	f040 8158 	bne.w	8001736 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4a9a      	ldr	r2, [pc, #616]	; (80016f4 <HAL_GPIO_Init+0x2a0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d05e      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 8001490:	4a98      	ldr	r2, [pc, #608]	; (80016f4 <HAL_GPIO_Init+0x2a0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d875      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 8001496:	4a98      	ldr	r2, [pc, #608]	; (80016f8 <HAL_GPIO_Init+0x2a4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d058      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 800149c:	4a96      	ldr	r2, [pc, #600]	; (80016f8 <HAL_GPIO_Init+0x2a4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d86f      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014a2:	4a96      	ldr	r2, [pc, #600]	; (80016fc <HAL_GPIO_Init+0x2a8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d052      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014a8:	4a94      	ldr	r2, [pc, #592]	; (80016fc <HAL_GPIO_Init+0x2a8>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d869      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ae:	4a94      	ldr	r2, [pc, #592]	; (8001700 <HAL_GPIO_Init+0x2ac>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d04c      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014b4:	4a92      	ldr	r2, [pc, #584]	; (8001700 <HAL_GPIO_Init+0x2ac>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d863      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ba:	4a92      	ldr	r2, [pc, #584]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d046      	beq.n	800154e <HAL_GPIO_Init+0xfa>
 80014c0:	4a90      	ldr	r2, [pc, #576]	; (8001704 <HAL_GPIO_Init+0x2b0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d85d      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d82a      	bhi.n	8001520 <HAL_GPIO_Init+0xcc>
 80014ca:	2b12      	cmp	r3, #18
 80014cc:	d859      	bhi.n	8001582 <HAL_GPIO_Init+0x12e>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <HAL_GPIO_Init+0x80>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	0800154f 	.word	0x0800154f
 80014d8:	08001529 	.word	0x08001529
 80014dc:	0800153b 	.word	0x0800153b
 80014e0:	0800157d 	.word	0x0800157d
 80014e4:	08001583 	.word	0x08001583
 80014e8:	08001583 	.word	0x08001583
 80014ec:	08001583 	.word	0x08001583
 80014f0:	08001583 	.word	0x08001583
 80014f4:	08001583 	.word	0x08001583
 80014f8:	08001583 	.word	0x08001583
 80014fc:	08001583 	.word	0x08001583
 8001500:	08001583 	.word	0x08001583
 8001504:	08001583 	.word	0x08001583
 8001508:	08001583 	.word	0x08001583
 800150c:	08001583 	.word	0x08001583
 8001510:	08001583 	.word	0x08001583
 8001514:	08001583 	.word	0x08001583
 8001518:	08001531 	.word	0x08001531
 800151c:	08001545 	.word	0x08001545
 8001520:	4a79      	ldr	r2, [pc, #484]	; (8001708 <HAL_GPIO_Init+0x2b4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001526:	e02c      	b.n	8001582 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e029      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	3304      	adds	r3, #4
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e024      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	3308      	adds	r3, #8
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e01f      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	330c      	adds	r3, #12
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e01a      	b.n	8001584 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001556:	2304      	movs	r3, #4
 8001558:	623b      	str	r3, [r7, #32]
          break;
 800155a:	e013      	b.n	8001584 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001564:	2308      	movs	r3, #8
 8001566:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	611a      	str	r2, [r3, #16]
          break;
 800156e:	e009      	b.n	8001584 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001570:	2308      	movs	r3, #8
 8001572:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	615a      	str	r2, [r3, #20]
          break;
 800157a:	e003      	b.n	8001584 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800157c:	2300      	movs	r3, #0
 800157e:	623b      	str	r3, [r7, #32]
          break;
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x130>
          break;
 8001582:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2bff      	cmp	r3, #255	; 0xff
 8001588:	d801      	bhi.n	800158e <HAL_GPIO_Init+0x13a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	e001      	b.n	8001592 <HAL_GPIO_Init+0x13e>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3304      	adds	r3, #4
 8001592:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	2bff      	cmp	r3, #255	; 0xff
 8001598:	d802      	bhi.n	80015a0 <HAL_GPIO_Init+0x14c>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	e002      	b.n	80015a6 <HAL_GPIO_Init+0x152>
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	3b08      	subs	r3, #8
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	210f      	movs	r1, #15
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	401a      	ands	r2, r3
 80015b8:	6a39      	ldr	r1, [r7, #32]
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	fa01 f303 	lsl.w	r3, r1, r3
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80b1 	beq.w	8001736 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d4:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_GPIO_Init+0x2b8>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a4c      	ldr	r2, [pc, #304]	; (800170c <HAL_GPIO_Init+0x2b8>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_GPIO_Init+0x2b8>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015ec:	4a48      	ldr	r2, [pc, #288]	; (8001710 <HAL_GPIO_Init+0x2bc>)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	220f      	movs	r2, #15
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a40      	ldr	r2, [pc, #256]	; (8001714 <HAL_GPIO_Init+0x2c0>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_GPIO_Init+0x1ec>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <HAL_GPIO_Init+0x2c4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d00d      	beq.n	800163c <HAL_GPIO_Init+0x1e8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a3e      	ldr	r2, [pc, #248]	; (800171c <HAL_GPIO_Init+0x2c8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d007      	beq.n	8001638 <HAL_GPIO_Init+0x1e4>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a3d      	ldr	r2, [pc, #244]	; (8001720 <HAL_GPIO_Init+0x2cc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d101      	bne.n	8001634 <HAL_GPIO_Init+0x1e0>
 8001630:	2303      	movs	r3, #3
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001634:	2304      	movs	r3, #4
 8001636:	e004      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001638:	2302      	movs	r3, #2
 800163a:	e002      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_GPIO_Init+0x1ee>
 8001640:	2300      	movs	r3, #0
 8001642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001644:	f002 0203 	and.w	r2, r2, #3
 8001648:	0092      	lsls	r2, r2, #2
 800164a:	4093      	lsls	r3, r2
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001652:	492f      	ldr	r1, [pc, #188]	; (8001710 <HAL_GPIO_Init+0x2bc>)
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d006      	beq.n	800167a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	492c      	ldr	r1, [pc, #176]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e006      	b.n	8001688 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	43db      	mvns	r3, r3
 8001682:	4928      	ldr	r1, [pc, #160]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001684:	4013      	ands	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	4922      	ldr	r1, [pc, #136]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	491e      	ldr	r1, [pc, #120]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	4918      	ldr	r1, [pc, #96]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	608b      	str	r3, [r1, #8]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	4914      	ldr	r1, [pc, #80]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d021      	beq.n	8001728 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016e6:	68da      	ldr	r2, [r3, #12]
 80016e8:	490e      	ldr	r1, [pc, #56]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	60cb      	str	r3, [r1, #12]
 80016f0:	e021      	b.n	8001736 <HAL_GPIO_Init+0x2e2>
 80016f2:	bf00      	nop
 80016f4:	10320000 	.word	0x10320000
 80016f8:	10310000 	.word	0x10310000
 80016fc:	10220000 	.word	0x10220000
 8001700:	10210000 	.word	0x10210000
 8001704:	10120000 	.word	0x10120000
 8001708:	10110000 	.word	0x10110000
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000
 8001714:	40010800 	.word	0x40010800
 8001718:	40010c00 	.word	0x40010c00
 800171c:	40011000 	.word	0x40011000
 8001720:	40011400 	.word	0x40011400
 8001724:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_GPIO_Init+0x304>)
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	43db      	mvns	r3, r3
 8001730:	4909      	ldr	r1, [pc, #36]	; (8001758 <HAL_GPIO_Init+0x304>)
 8001732:	4013      	ands	r3, r2
 8001734:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	3301      	adds	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	f47f ae8e 	bne.w	8001468 <HAL_GPIO_Init+0x14>
  }
}
 800174c:	bf00      	nop
 800174e:	bf00      	nop
 8001750:	372c      	adds	r7, #44	; 0x2c
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e001      	b.n	800177e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr

0800178a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	807b      	strh	r3, [r7, #2]
 8001796:	4613      	mov	r3, r2
 8001798:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179a:	787b      	ldrb	r3, [r7, #1]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a6:	e003      	b.n	80017b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	611a      	str	r2, [r3, #16]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017c6:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d006      	beq.n	80017e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f806 	bl	80017ec <HAL_GPIO_EXTI_Callback>
  }
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40010400 	.word	0x40010400

080017ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e272      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8087 	beq.w	800192e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001820:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	d00c      	beq.n	8001846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800182c:	4b8f      	ldr	r3, [pc, #572]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d112      	bne.n	800185e <HAL_RCC_OscConfig+0x5e>
 8001838:	4b8c      	ldr	r3, [pc, #560]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001844:	d10b      	bne.n	800185e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001846:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d06c      	beq.n	800192c <HAL_RCC_OscConfig+0x12c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d168      	bne.n	800192c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e24c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001866:	d106      	bne.n	8001876 <HAL_RCC_OscConfig+0x76>
 8001868:	4b80      	ldr	r3, [pc, #512]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a7f      	ldr	r2, [pc, #508]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e02e      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x98>
 800187e:	4b7b      	ldr	r3, [pc, #492]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7a      	ldr	r2, [pc, #488]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b78      	ldr	r3, [pc, #480]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a77      	ldr	r2, [pc, #476]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e01d      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0xbc>
 80018a2:	4b72      	ldr	r3, [pc, #456]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a71      	ldr	r2, [pc, #452]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b6f      	ldr	r3, [pc, #444]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6e      	ldr	r2, [pc, #440]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0xd4>
 80018bc:	4b6b      	ldr	r3, [pc, #428]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6a      	ldr	r2, [pc, #424]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b68      	ldr	r3, [pc, #416]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a67      	ldr	r2, [pc, #412]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fca2 	bl	8001224 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fc9e 	bl	8001224 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e200      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0xe4>
 8001902:	e014      	b.n	800192e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fc8e 	bl	8001224 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff fc8a 	bl	8001224 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	; 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e1ec      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191e:	4b53      	ldr	r3, [pc, #332]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x10c>
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d063      	beq.n	8001a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193a:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001946:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	2b08      	cmp	r3, #8
 8001950:	d11c      	bne.n	800198c <HAL_RCC_OscConfig+0x18c>
 8001952:	4b46      	ldr	r3, [pc, #280]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d116      	bne.n	800198c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d005      	beq.n	8001976 <HAL_RCC_OscConfig+0x176>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d001      	beq.n	8001976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e1c0      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4939      	ldr	r1, [pc, #228]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001986:	4313      	orrs	r3, r2
 8001988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	e03a      	b.n	8001a02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff fc43 	bl	8001224 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff fc3f 	bl	8001224 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e1a1      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4927      	ldr	r1, [pc, #156]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fc22 	bl	8001224 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff fc1e 	bl	8001224 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e180      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d03a      	beq.n	8001a84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d019      	beq.n	8001a4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1c:	f7ff fc02 	bl	8001224 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff fbfe 	bl	8001224 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e160      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_RCC_OscConfig+0x26c>)
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f000 fad8 	bl	8001ff8 <RCC_Delay>
 8001a48:	e01c      	b.n	8001a84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a50:	f7ff fbe8 	bl	8001224 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a56:	e00f      	b.n	8001a78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff fbe4 	bl	8001224 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d908      	bls.n	8001a78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e146      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	42420000 	.word	0x42420000
 8001a74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a78:	4b92      	ldr	r3, [pc, #584]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1e9      	bne.n	8001a58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0304 	and.w	r3, r3, #4
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a6 	beq.w	8001bde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b8b      	ldr	r3, [pc, #556]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10d      	bne.n	8001abe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a87      	ldr	r2, [pc, #540]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b85      	ldr	r3, [pc, #532]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aba:	2301      	movs	r3, #1
 8001abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abe:	4b82      	ldr	r3, [pc, #520]	; (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d118      	bne.n	8001afc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aca:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a7e      	ldr	r2, [pc, #504]	; (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fba5 	bl	8001224 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7ff fba1 	bl	8001224 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b64      	cmp	r3, #100	; 0x64
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e103      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	4b75      	ldr	r3, [pc, #468]	; (8001cc8 <HAL_RCC_OscConfig+0x4c8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x312>
 8001b04:	4b6f      	ldr	r3, [pc, #444]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6213      	str	r3, [r2, #32]
 8001b10:	e02d      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x334>
 8001b1a:	4b6a      	ldr	r3, [pc, #424]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a69      	ldr	r2, [pc, #420]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	4b67      	ldr	r3, [pc, #412]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4a66      	ldr	r2, [pc, #408]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	6213      	str	r3, [r2, #32]
 8001b32:	e01c      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d10c      	bne.n	8001b56 <HAL_RCC_OscConfig+0x356>
 8001b3c:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a60      	ldr	r2, [pc, #384]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a5d      	ldr	r2, [pc, #372]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	e00b      	b.n	8001b6e <HAL_RCC_OscConfig+0x36e>
 8001b56:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a5a      	ldr	r2, [pc, #360]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 0301 	bic.w	r3, r3, #1
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	4b58      	ldr	r3, [pc, #352]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4a57      	ldr	r2, [pc, #348]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d015      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fb55 	bl	8001224 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fb51 	bl	8001224 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e0b1      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	4b4b      	ldr	r3, [pc, #300]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ee      	beq.n	8001b7e <HAL_RCC_OscConfig+0x37e>
 8001ba0:	e014      	b.n	8001bcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba2:	f7ff fb3f 	bl	8001224 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7ff fb3b 	bl	8001224 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e09b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ee      	bne.n	8001baa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d105      	bne.n	8001bde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd2:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a3b      	ldr	r2, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8087 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be8:	4b36      	ldr	r3, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d061      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d146      	bne.n	8001c8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fb0f 	bl	8001224 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff fb0b 	bl	8001224 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e06d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d108      	bne.n	8001c44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4921      	ldr	r1, [pc, #132]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a19      	ldr	r1, [r3, #32]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	430b      	orrs	r3, r1
 8001c56:	491b      	ldr	r1, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x4cc>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff fadf 	bl	8001224 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff fadb 	bl	8001224 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e03d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x46a>
 8001c88:	e035      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <HAL_RCC_OscConfig+0x4cc>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fac8 	bl	8001224 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff fac4 	bl	8001224 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e026      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x498>
 8001cb6:	e01e      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e019      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_OscConfig+0x500>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000

08001d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e0d0      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d910      	bls.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 0207 	bic.w	r2, r3, #7
 8001d2e:	4965      	ldr	r1, [pc, #404]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b63      	ldr	r3, [pc, #396]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0b8      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d005      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d60:	4b59      	ldr	r3, [pc, #356]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	4a58      	ldr	r2, [pc, #352]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d78:	4b53      	ldr	r3, [pc, #332]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a52      	ldr	r2, [pc, #328]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d84:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	494d      	ldr	r1, [pc, #308]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d040      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d107      	bne.n	8001dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d115      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e07f      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d107      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	4b41      	ldr	r3, [pc, #260]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e073      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e06b      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 0203 	bic.w	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4936      	ldr	r1, [pc, #216]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df4:	f7ff fa16 	bl	8001224 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfc:	f7ff fa12 	bl	8001224 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e053      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 020c 	and.w	r2, r3, #12
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1eb      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d210      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	4922      	ldr	r1, [pc, #136]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e032      	b.n	8001eba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4916      	ldr	r1, [pc, #88]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e92:	f000 f821 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e96:	4602      	mov	r2, r0
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	091b      	lsrs	r3, r3, #4
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	490a      	ldr	r1, [pc, #40]	; (8001ecc <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	5ccb      	ldrb	r3, [r1, r3]
 8001ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eaa:	4a09      	ldr	r2, [pc, #36]	; (8001ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8001eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff f974 	bl	80011a0 <HAL_InitTick>

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	08005360 	.word	0x08005360
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b490      	push	{r4, r7}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ede:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ee0:	1d3c      	adds	r4, r7, #4
 8001ee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ee8:	f240 2301 	movw	r3, #513	; 0x201
 8001eec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f02:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d002      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x40>
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d003      	beq.n	8001f1e <HAL_RCC_GetSysClockFreq+0x46>
 8001f16:	e02b      	b.n	8001f70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f18:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f1a:	623b      	str	r3, [r7, #32]
      break;
 8001f1c:	e02b      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	0c9b      	lsrs	r3, r3, #18
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3328      	adds	r3, #40	; 0x28
 8001f28:	443b      	add	r3, r7
 8001f2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d012      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	0c5b      	lsrs	r3, r3, #17
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	3328      	adds	r3, #40	; 0x28
 8001f46:	443b      	add	r3, r7
 8001f48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f52:	fb03 f202 	mul.w	r2, r3, r2
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5e:	e004      	b.n	8001f6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	623b      	str	r3, [r7, #32]
      break;
 8001f6e:	e002      	b.n	8001f76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f72:	623b      	str	r3, [r7, #32]
      break;
 8001f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f76:	6a3b      	ldr	r3, [r7, #32]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc90      	pop	{r4, r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	08005350 	.word	0x08005350
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	007a1200 	.word	0x007a1200
 8001f90:	003d0900 	.word	0x003d0900

08001f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f98:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000000 	.word	0x20000000

08001fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fac:	f7ff fff2 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	0a1b      	lsrs	r3, r3, #8
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	4903      	ldr	r1, [pc, #12]	; (8001fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08005370 	.word	0x08005370

08001fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fd4:	f7ff ffde 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0adb      	lsrs	r3, r3, #11
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4903      	ldr	r1, [pc, #12]	; (8001ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08005370 	.word	0x08005370

08001ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <RCC_Delay+0x34>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <RCC_Delay+0x38>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0a5b      	lsrs	r3, r3, #9
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002014:	bf00      	nop
  }
  while (Delay --);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	60fa      	str	r2, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f9      	bne.n	8002014 <RCC_Delay+0x1c>
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	20000000 	.word	0x20000000
 8002030:	10624dd3 	.word	0x10624dd3

08002034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e041      	b.n	80020ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe ff12 	bl	8000e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 f8f2 	bl	800225c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_TIM_ConfigClockSource+0x18>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e0b3      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x180>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002108:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002110:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002122:	d03e      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0xd0>
 8002124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002128:	f200 8087 	bhi.w	800223a <HAL_TIM_ConfigClockSource+0x168>
 800212c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002130:	f000 8085 	beq.w	800223e <HAL_TIM_ConfigClockSource+0x16c>
 8002134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002138:	d87f      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x168>
 800213a:	2b70      	cmp	r3, #112	; 0x70
 800213c:	d01a      	beq.n	8002174 <HAL_TIM_ConfigClockSource+0xa2>
 800213e:	2b70      	cmp	r3, #112	; 0x70
 8002140:	d87b      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x168>
 8002142:	2b60      	cmp	r3, #96	; 0x60
 8002144:	d050      	beq.n	80021e8 <HAL_TIM_ConfigClockSource+0x116>
 8002146:	2b60      	cmp	r3, #96	; 0x60
 8002148:	d877      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x168>
 800214a:	2b50      	cmp	r3, #80	; 0x50
 800214c:	d03c      	beq.n	80021c8 <HAL_TIM_ConfigClockSource+0xf6>
 800214e:	2b50      	cmp	r3, #80	; 0x50
 8002150:	d873      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x168>
 8002152:	2b40      	cmp	r3, #64	; 0x40
 8002154:	d058      	beq.n	8002208 <HAL_TIM_ConfigClockSource+0x136>
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d86f      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x168>
 800215a:	2b30      	cmp	r3, #48	; 0x30
 800215c:	d064      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x156>
 800215e:	2b30      	cmp	r3, #48	; 0x30
 8002160:	d86b      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x168>
 8002162:	2b20      	cmp	r3, #32
 8002164:	d060      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x156>
 8002166:	2b20      	cmp	r3, #32
 8002168:	d867      	bhi.n	800223a <HAL_TIM_ConfigClockSource+0x168>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d05c      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x156>
 800216e:	2b10      	cmp	r3, #16
 8002170:	d05a      	beq.n	8002228 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002172:	e062      	b.n	800223a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6818      	ldr	r0, [r3, #0]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f000 f943 	bl	800240e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002196:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	609a      	str	r2, [r3, #8]
      break;
 80021a0:	e04e      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6899      	ldr	r1, [r3, #8]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f000 f92c 	bl	800240e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c4:	609a      	str	r2, [r3, #8]
      break;
 80021c6:	e03b      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	461a      	mov	r2, r3
 80021d6:	f000 f8a3 	bl	8002320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2150      	movs	r1, #80	; 0x50
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f8fa 	bl	80023da <TIM_ITRx_SetConfig>
      break;
 80021e6:	e02b      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f000 f8c1 	bl	800237c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2160      	movs	r1, #96	; 0x60
 8002200:	4618      	mov	r0, r3
 8002202:	f000 f8ea 	bl	80023da <TIM_ITRx_SetConfig>
      break;
 8002206:	e01b      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	461a      	mov	r2, r3
 8002216:	f000 f883 	bl	8002320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	4618      	mov	r0, r3
 8002222:	f000 f8da 	bl	80023da <TIM_ITRx_SetConfig>
      break;
 8002226:	e00b      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	4610      	mov	r0, r2
 8002234:	f000 f8d1 	bl	80023da <TIM_ITRx_SetConfig>
        break;
 8002238:	e002      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800223a:	bf00      	nop
 800223c:	e000      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800223e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a29      	ldr	r2, [pc, #164]	; (8002314 <TIM_Base_SetConfig+0xb8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00b      	beq.n	800228c <TIM_Base_SetConfig+0x30>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d007      	beq.n	800228c <TIM_Base_SetConfig+0x30>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a26      	ldr	r2, [pc, #152]	; (8002318 <TIM_Base_SetConfig+0xbc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <TIM_Base_SetConfig+0x30>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a25      	ldr	r2, [pc, #148]	; (800231c <TIM_Base_SetConfig+0xc0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d108      	bne.n	800229e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1c      	ldr	r2, [pc, #112]	; (8002314 <TIM_Base_SetConfig+0xb8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00b      	beq.n	80022be <TIM_Base_SetConfig+0x62>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d007      	beq.n	80022be <TIM_Base_SetConfig+0x62>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <TIM_Base_SetConfig+0xbc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d003      	beq.n	80022be <TIM_Base_SetConfig+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a18      	ldr	r2, [pc, #96]	; (800231c <TIM_Base_SetConfig+0xc0>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d108      	bne.n	80022d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <TIM_Base_SetConfig+0xb8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d103      	bne.n	8002304 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	615a      	str	r2, [r3, #20]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40012c00 	.word	0x40012c00
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800

08002320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f023 0201 	bic.w	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800234a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f023 030a 	bic.w	r3, r3, #10
 800235c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	621a      	str	r2, [r3, #32]
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f023 0210 	bic.w	r2, r3, #16
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	031b      	lsls	r3, r3, #12
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	621a      	str	r2, [r3, #32]
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr

080023da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f043 0307 	orr.w	r3, r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800240e:	b480      	push	{r7}
 8002410:	b087      	sub	sp, #28
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002428:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	021a      	lsls	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	431a      	orrs	r2, r3
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4313      	orrs	r3, r2
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	609a      	str	r2, [r3, #8]
}
 8002442:	bf00      	nop
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002460:	2302      	movs	r3, #2
 8002462:	e046      	b.n	80024f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800248a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a16      	ldr	r2, [pc, #88]	; (80024fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00e      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b0:	d009      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a10      	ldr	r2, [pc, #64]	; (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10c      	bne.n	80024e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr
 80024fc:	40012c00 	.word	0x40012c00
 8002500:	40000400 	.word	0x40000400
 8002504:	40000800 	.word	0x40000800

08002508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e03f      	b.n	800259a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fcc6 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	; 0x24
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800254a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f905 	bl	800275c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b08a      	sub	sp, #40	; 0x28
 80025a6:	af02      	add	r7, sp, #8
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d17c      	bne.n	80026bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <HAL_UART_Transmit+0x2c>
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e075      	b.n	80026be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_UART_Transmit+0x3e>
 80025dc:	2302      	movs	r3, #2
 80025de:	e06e      	b.n	80026be <HAL_UART_Transmit+0x11c>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2221      	movs	r2, #33	; 0x21
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025f6:	f7fe fe15 	bl	8001224 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	88fa      	ldrh	r2, [r7, #6]
 8002606:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002610:	d108      	bne.n	8002624 <HAL_UART_Transmit+0x82>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	e003      	b.n	800262c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002634:	e02a      	b.n	800268c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	2180      	movs	r1, #128	; 0x80
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f840 	bl	80026c6 <UART_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e036      	b.n	80026be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10b      	bne.n	800266e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002664:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	3302      	adds	r3, #2
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	e007      	b.n	800267e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3301      	adds	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002682:	b29b      	uxth	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1cf      	bne.n	8002636 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	2140      	movs	r1, #64	; 0x40
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 f810 	bl	80026c6 <UART_WaitOnFlagUntilTimeout>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e006      	b.n	80026be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	e000      	b.n	80026be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026bc:	2302      	movs	r3, #2
  }
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b084      	sub	sp, #16
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	4613      	mov	r3, r2
 80026d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026d6:	e02c      	b.n	8002732 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026de:	d028      	beq.n	8002732 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80026e6:	f7fe fd9d 	bl	8001224 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d21d      	bcs.n	8002732 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002704:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2220      	movs	r2, #32
 800271a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e00f      	b.n	8002752 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	4013      	ands	r3, r2
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	429a      	cmp	r2, r3
 8002740:	bf0c      	ite	eq
 8002742:	2301      	moveq	r3, #1
 8002744:	2300      	movne	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	429a      	cmp	r2, r3
 800274e:	d0c3      	beq.n	80026d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002796:	f023 030c 	bic.w	r3, r3, #12
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a2c      	ldr	r2, [pc, #176]	; (8002870 <UART_SetConfig+0x114>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d103      	bne.n	80027cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027c4:	f7ff fc04 	bl	8001fd0 <HAL_RCC_GetPCLK2Freq>
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	e002      	b.n	80027d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027cc:	f7ff fbec 	bl	8001fa8 <HAL_RCC_GetPCLK1Freq>
 80027d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	009a      	lsls	r2, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e8:	4a22      	ldr	r2, [pc, #136]	; (8002874 <UART_SetConfig+0x118>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	0119      	lsls	r1, r3, #4
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009a      	lsls	r2, r3, #2
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	fbb2 f2f3 	udiv	r2, r2, r3
 8002808:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <UART_SetConfig+0x118>)
 800280a:	fba3 0302 	umull	r0, r3, r3, r2
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2064      	movs	r0, #100	; 0x64
 8002812:	fb00 f303 	mul.w	r3, r0, r3
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	3332      	adds	r3, #50	; 0x32
 800281c:	4a15      	ldr	r2, [pc, #84]	; (8002874 <UART_SetConfig+0x118>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002828:	4419      	add	r1, r3
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009a      	lsls	r2, r3, #2
 8002834:	441a      	add	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <UART_SetConfig+0x118>)
 8002842:	fba3 0302 	umull	r0, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2064      	movs	r0, #100	; 0x64
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	3332      	adds	r3, #50	; 0x32
 8002854:	4a07      	ldr	r2, [pc, #28]	; (8002874 <UART_SetConfig+0x118>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	f003 020f 	and.w	r2, r3, #15
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	440a      	add	r2, r1
 8002866:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002868:	bf00      	nop
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40013800 	.word	0x40013800
 8002874:	51eb851f 	.word	0x51eb851f

08002878 <__errno>:
 8002878:	4b01      	ldr	r3, [pc, #4]	; (8002880 <__errno+0x8>)
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	2000000c 	.word	0x2000000c

08002884 <__libc_init_array>:
 8002884:	b570      	push	{r4, r5, r6, lr}
 8002886:	2600      	movs	r6, #0
 8002888:	4d0c      	ldr	r5, [pc, #48]	; (80028bc <__libc_init_array+0x38>)
 800288a:	4c0d      	ldr	r4, [pc, #52]	; (80028c0 <__libc_init_array+0x3c>)
 800288c:	1b64      	subs	r4, r4, r5
 800288e:	10a4      	asrs	r4, r4, #2
 8002890:	42a6      	cmp	r6, r4
 8002892:	d109      	bne.n	80028a8 <__libc_init_array+0x24>
 8002894:	f002 fd48 	bl	8005328 <_init>
 8002898:	2600      	movs	r6, #0
 800289a:	4d0a      	ldr	r5, [pc, #40]	; (80028c4 <__libc_init_array+0x40>)
 800289c:	4c0a      	ldr	r4, [pc, #40]	; (80028c8 <__libc_init_array+0x44>)
 800289e:	1b64      	subs	r4, r4, r5
 80028a0:	10a4      	asrs	r4, r4, #2
 80028a2:	42a6      	cmp	r6, r4
 80028a4:	d105      	bne.n	80028b2 <__libc_init_array+0x2e>
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
 80028a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ac:	4798      	blx	r3
 80028ae:	3601      	adds	r6, #1
 80028b0:	e7ee      	b.n	8002890 <__libc_init_array+0xc>
 80028b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b6:	4798      	blx	r3
 80028b8:	3601      	adds	r6, #1
 80028ba:	e7f2      	b.n	80028a2 <__libc_init_array+0x1e>
 80028bc:	08005754 	.word	0x08005754
 80028c0:	08005754 	.word	0x08005754
 80028c4:	08005754 	.word	0x08005754
 80028c8:	08005758 	.word	0x08005758

080028cc <memset>:
 80028cc:	4603      	mov	r3, r0
 80028ce:	4402      	add	r2, r0
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d100      	bne.n	80028d6 <memset+0xa>
 80028d4:	4770      	bx	lr
 80028d6:	f803 1b01 	strb.w	r1, [r3], #1
 80028da:	e7f9      	b.n	80028d0 <memset+0x4>

080028dc <__cvt>:
 80028dc:	2b00      	cmp	r3, #0
 80028de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028e2:	461f      	mov	r7, r3
 80028e4:	bfbb      	ittet	lt
 80028e6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80028ea:	461f      	movlt	r7, r3
 80028ec:	2300      	movge	r3, #0
 80028ee:	232d      	movlt	r3, #45	; 0x2d
 80028f0:	b088      	sub	sp, #32
 80028f2:	4614      	mov	r4, r2
 80028f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80028f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80028f8:	7013      	strb	r3, [r2, #0]
 80028fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80028fc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002900:	f023 0820 	bic.w	r8, r3, #32
 8002904:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002908:	d005      	beq.n	8002916 <__cvt+0x3a>
 800290a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800290e:	d100      	bne.n	8002912 <__cvt+0x36>
 8002910:	3501      	adds	r5, #1
 8002912:	2302      	movs	r3, #2
 8002914:	e000      	b.n	8002918 <__cvt+0x3c>
 8002916:	2303      	movs	r3, #3
 8002918:	aa07      	add	r2, sp, #28
 800291a:	9204      	str	r2, [sp, #16]
 800291c:	aa06      	add	r2, sp, #24
 800291e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002922:	e9cd 3500 	strd	r3, r5, [sp]
 8002926:	4622      	mov	r2, r4
 8002928:	463b      	mov	r3, r7
 800292a:	f000 fcdd 	bl	80032e8 <_dtoa_r>
 800292e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002932:	4606      	mov	r6, r0
 8002934:	d102      	bne.n	800293c <__cvt+0x60>
 8002936:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002938:	07db      	lsls	r3, r3, #31
 800293a:	d522      	bpl.n	8002982 <__cvt+0xa6>
 800293c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002940:	eb06 0905 	add.w	r9, r6, r5
 8002944:	d110      	bne.n	8002968 <__cvt+0x8c>
 8002946:	7833      	ldrb	r3, [r6, #0]
 8002948:	2b30      	cmp	r3, #48	; 0x30
 800294a:	d10a      	bne.n	8002962 <__cvt+0x86>
 800294c:	2200      	movs	r2, #0
 800294e:	2300      	movs	r3, #0
 8002950:	4620      	mov	r0, r4
 8002952:	4639      	mov	r1, r7
 8002954:	f7fe f828 	bl	80009a8 <__aeabi_dcmpeq>
 8002958:	b918      	cbnz	r0, 8002962 <__cvt+0x86>
 800295a:	f1c5 0501 	rsb	r5, r5, #1
 800295e:	f8ca 5000 	str.w	r5, [sl]
 8002962:	f8da 3000 	ldr.w	r3, [sl]
 8002966:	4499      	add	r9, r3
 8002968:	2200      	movs	r2, #0
 800296a:	2300      	movs	r3, #0
 800296c:	4620      	mov	r0, r4
 800296e:	4639      	mov	r1, r7
 8002970:	f7fe f81a 	bl	80009a8 <__aeabi_dcmpeq>
 8002974:	b108      	cbz	r0, 800297a <__cvt+0x9e>
 8002976:	f8cd 901c 	str.w	r9, [sp, #28]
 800297a:	2230      	movs	r2, #48	; 0x30
 800297c:	9b07      	ldr	r3, [sp, #28]
 800297e:	454b      	cmp	r3, r9
 8002980:	d307      	bcc.n	8002992 <__cvt+0xb6>
 8002982:	4630      	mov	r0, r6
 8002984:	9b07      	ldr	r3, [sp, #28]
 8002986:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002988:	1b9b      	subs	r3, r3, r6
 800298a:	6013      	str	r3, [r2, #0]
 800298c:	b008      	add	sp, #32
 800298e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002992:	1c59      	adds	r1, r3, #1
 8002994:	9107      	str	r1, [sp, #28]
 8002996:	701a      	strb	r2, [r3, #0]
 8002998:	e7f0      	b.n	800297c <__cvt+0xa0>

0800299a <__exponent>:
 800299a:	4603      	mov	r3, r0
 800299c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800299e:	2900      	cmp	r1, #0
 80029a0:	f803 2b02 	strb.w	r2, [r3], #2
 80029a4:	bfb6      	itet	lt
 80029a6:	222d      	movlt	r2, #45	; 0x2d
 80029a8:	222b      	movge	r2, #43	; 0x2b
 80029aa:	4249      	neglt	r1, r1
 80029ac:	2909      	cmp	r1, #9
 80029ae:	7042      	strb	r2, [r0, #1]
 80029b0:	dd2b      	ble.n	8002a0a <__exponent+0x70>
 80029b2:	f10d 0407 	add.w	r4, sp, #7
 80029b6:	46a4      	mov	ip, r4
 80029b8:	270a      	movs	r7, #10
 80029ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80029be:	460a      	mov	r2, r1
 80029c0:	46a6      	mov	lr, r4
 80029c2:	fb07 1516 	mls	r5, r7, r6, r1
 80029c6:	2a63      	cmp	r2, #99	; 0x63
 80029c8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80029cc:	4631      	mov	r1, r6
 80029ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80029d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80029d6:	dcf0      	bgt.n	80029ba <__exponent+0x20>
 80029d8:	3130      	adds	r1, #48	; 0x30
 80029da:	f1ae 0502 	sub.w	r5, lr, #2
 80029de:	f804 1c01 	strb.w	r1, [r4, #-1]
 80029e2:	4629      	mov	r1, r5
 80029e4:	1c44      	adds	r4, r0, #1
 80029e6:	4561      	cmp	r1, ip
 80029e8:	d30a      	bcc.n	8002a00 <__exponent+0x66>
 80029ea:	f10d 0209 	add.w	r2, sp, #9
 80029ee:	eba2 020e 	sub.w	r2, r2, lr
 80029f2:	4565      	cmp	r5, ip
 80029f4:	bf88      	it	hi
 80029f6:	2200      	movhi	r2, #0
 80029f8:	4413      	add	r3, r2
 80029fa:	1a18      	subs	r0, r3, r0
 80029fc:	b003      	add	sp, #12
 80029fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a04:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002a08:	e7ed      	b.n	80029e6 <__exponent+0x4c>
 8002a0a:	2330      	movs	r3, #48	; 0x30
 8002a0c:	3130      	adds	r1, #48	; 0x30
 8002a0e:	7083      	strb	r3, [r0, #2]
 8002a10:	70c1      	strb	r1, [r0, #3]
 8002a12:	1d03      	adds	r3, r0, #4
 8002a14:	e7f1      	b.n	80029fa <__exponent+0x60>
	...

08002a18 <_printf_float>:
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1c:	b091      	sub	sp, #68	; 0x44
 8002a1e:	460c      	mov	r4, r1
 8002a20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002a24:	4616      	mov	r6, r2
 8002a26:	461f      	mov	r7, r3
 8002a28:	4605      	mov	r5, r0
 8002a2a:	f001 fb41 	bl	80040b0 <_localeconv_r>
 8002a2e:	6803      	ldr	r3, [r0, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	9309      	str	r3, [sp, #36]	; 0x24
 8002a34:	f7fd fb8c 	bl	8000150 <strlen>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	930e      	str	r3, [sp, #56]	; 0x38
 8002a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8002a40:	900a      	str	r0, [sp, #40]	; 0x28
 8002a42:	3307      	adds	r3, #7
 8002a44:	f023 0307 	bic.w	r3, r3, #7
 8002a48:	f103 0208 	add.w	r2, r3, #8
 8002a4c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002a50:	f8d4 b000 	ldr.w	fp, [r4]
 8002a54:	f8c8 2000 	str.w	r2, [r8]
 8002a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002a60:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002a64:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8002a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6e:	4640      	mov	r0, r8
 8002a70:	4b9c      	ldr	r3, [pc, #624]	; (8002ce4 <_printf_float+0x2cc>)
 8002a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a74:	f7fd ffca 	bl	8000a0c <__aeabi_dcmpun>
 8002a78:	bb70      	cbnz	r0, 8002ad8 <_printf_float+0xc0>
 8002a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7e:	4640      	mov	r0, r8
 8002a80:	4b98      	ldr	r3, [pc, #608]	; (8002ce4 <_printf_float+0x2cc>)
 8002a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a84:	f7fd ffa4 	bl	80009d0 <__aeabi_dcmple>
 8002a88:	bb30      	cbnz	r0, 8002ad8 <_printf_float+0xc0>
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	4640      	mov	r0, r8
 8002a90:	4651      	mov	r1, sl
 8002a92:	f7fd ff93 	bl	80009bc <__aeabi_dcmplt>
 8002a96:	b110      	cbz	r0, 8002a9e <_printf_float+0x86>
 8002a98:	232d      	movs	r3, #45	; 0x2d
 8002a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a9e:	4b92      	ldr	r3, [pc, #584]	; (8002ce8 <_printf_float+0x2d0>)
 8002aa0:	4892      	ldr	r0, [pc, #584]	; (8002cec <_printf_float+0x2d4>)
 8002aa2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002aa6:	bf94      	ite	ls
 8002aa8:	4698      	movls	r8, r3
 8002aaa:	4680      	movhi	r8, r0
 8002aac:	2303      	movs	r3, #3
 8002aae:	f04f 0a00 	mov.w	sl, #0
 8002ab2:	6123      	str	r3, [r4, #16]
 8002ab4:	f02b 0304 	bic.w	r3, fp, #4
 8002ab8:	6023      	str	r3, [r4, #0]
 8002aba:	4633      	mov	r3, r6
 8002abc:	4621      	mov	r1, r4
 8002abe:	4628      	mov	r0, r5
 8002ac0:	9700      	str	r7, [sp, #0]
 8002ac2:	aa0f      	add	r2, sp, #60	; 0x3c
 8002ac4:	f000 f9d4 	bl	8002e70 <_printf_common>
 8002ac8:	3001      	adds	r0, #1
 8002aca:	f040 8090 	bne.w	8002bee <_printf_float+0x1d6>
 8002ace:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad2:	b011      	add	sp, #68	; 0x44
 8002ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ad8:	4642      	mov	r2, r8
 8002ada:	4653      	mov	r3, sl
 8002adc:	4640      	mov	r0, r8
 8002ade:	4651      	mov	r1, sl
 8002ae0:	f7fd ff94 	bl	8000a0c <__aeabi_dcmpun>
 8002ae4:	b148      	cbz	r0, 8002afa <_printf_float+0xe2>
 8002ae6:	f1ba 0f00 	cmp.w	sl, #0
 8002aea:	bfb8      	it	lt
 8002aec:	232d      	movlt	r3, #45	; 0x2d
 8002aee:	4880      	ldr	r0, [pc, #512]	; (8002cf0 <_printf_float+0x2d8>)
 8002af0:	bfb8      	it	lt
 8002af2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002af6:	4b7f      	ldr	r3, [pc, #508]	; (8002cf4 <_printf_float+0x2dc>)
 8002af8:	e7d3      	b.n	8002aa2 <_printf_float+0x8a>
 8002afa:	6863      	ldr	r3, [r4, #4]
 8002afc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	d142      	bne.n	8002b8a <_printf_float+0x172>
 8002b04:	2306      	movs	r3, #6
 8002b06:	6063      	str	r3, [r4, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	9206      	str	r2, [sp, #24]
 8002b0c:	aa0e      	add	r2, sp, #56	; 0x38
 8002b0e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002b12:	aa0d      	add	r2, sp, #52	; 0x34
 8002b14:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002b18:	9203      	str	r2, [sp, #12]
 8002b1a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002b1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002b22:	6023      	str	r3, [r4, #0]
 8002b24:	6863      	ldr	r3, [r4, #4]
 8002b26:	4642      	mov	r2, r8
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	4628      	mov	r0, r5
 8002b2c:	4653      	mov	r3, sl
 8002b2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8002b30:	f7ff fed4 	bl	80028dc <__cvt>
 8002b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b36:	4680      	mov	r8, r0
 8002b38:	2947      	cmp	r1, #71	; 0x47
 8002b3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002b3c:	d108      	bne.n	8002b50 <_printf_float+0x138>
 8002b3e:	1cc8      	adds	r0, r1, #3
 8002b40:	db02      	blt.n	8002b48 <_printf_float+0x130>
 8002b42:	6863      	ldr	r3, [r4, #4]
 8002b44:	4299      	cmp	r1, r3
 8002b46:	dd40      	ble.n	8002bca <_printf_float+0x1b2>
 8002b48:	f1a9 0902 	sub.w	r9, r9, #2
 8002b4c:	fa5f f989 	uxtb.w	r9, r9
 8002b50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002b54:	d81f      	bhi.n	8002b96 <_printf_float+0x17e>
 8002b56:	464a      	mov	r2, r9
 8002b58:	3901      	subs	r1, #1
 8002b5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b5e:	910d      	str	r1, [sp, #52]	; 0x34
 8002b60:	f7ff ff1b 	bl	800299a <__exponent>
 8002b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b66:	4682      	mov	sl, r0
 8002b68:	1813      	adds	r3, r2, r0
 8002b6a:	2a01      	cmp	r2, #1
 8002b6c:	6123      	str	r3, [r4, #16]
 8002b6e:	dc02      	bgt.n	8002b76 <_printf_float+0x15e>
 8002b70:	6822      	ldr	r2, [r4, #0]
 8002b72:	07d2      	lsls	r2, r2, #31
 8002b74:	d501      	bpl.n	8002b7a <_printf_float+0x162>
 8002b76:	3301      	adds	r3, #1
 8002b78:	6123      	str	r3, [r4, #16]
 8002b7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d09b      	beq.n	8002aba <_printf_float+0xa2>
 8002b82:	232d      	movs	r3, #45	; 0x2d
 8002b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b88:	e797      	b.n	8002aba <_printf_float+0xa2>
 8002b8a:	2947      	cmp	r1, #71	; 0x47
 8002b8c:	d1bc      	bne.n	8002b08 <_printf_float+0xf0>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ba      	bne.n	8002b08 <_printf_float+0xf0>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e7b7      	b.n	8002b06 <_printf_float+0xee>
 8002b96:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002b9a:	d118      	bne.n	8002bce <_printf_float+0x1b6>
 8002b9c:	2900      	cmp	r1, #0
 8002b9e:	6863      	ldr	r3, [r4, #4]
 8002ba0:	dd0b      	ble.n	8002bba <_printf_float+0x1a2>
 8002ba2:	6121      	str	r1, [r4, #16]
 8002ba4:	b913      	cbnz	r3, 8002bac <_printf_float+0x194>
 8002ba6:	6822      	ldr	r2, [r4, #0]
 8002ba8:	07d0      	lsls	r0, r2, #31
 8002baa:	d502      	bpl.n	8002bb2 <_printf_float+0x19a>
 8002bac:	3301      	adds	r3, #1
 8002bae:	440b      	add	r3, r1
 8002bb0:	6123      	str	r3, [r4, #16]
 8002bb2:	f04f 0a00 	mov.w	sl, #0
 8002bb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8002bb8:	e7df      	b.n	8002b7a <_printf_float+0x162>
 8002bba:	b913      	cbnz	r3, 8002bc2 <_printf_float+0x1aa>
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	07d2      	lsls	r2, r2, #31
 8002bc0:	d501      	bpl.n	8002bc6 <_printf_float+0x1ae>
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	e7f4      	b.n	8002bb0 <_printf_float+0x198>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e7f2      	b.n	8002bb0 <_printf_float+0x198>
 8002bca:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002bd0:	4299      	cmp	r1, r3
 8002bd2:	db05      	blt.n	8002be0 <_printf_float+0x1c8>
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	6121      	str	r1, [r4, #16]
 8002bd8:	07d8      	lsls	r0, r3, #31
 8002bda:	d5ea      	bpl.n	8002bb2 <_printf_float+0x19a>
 8002bdc:	1c4b      	adds	r3, r1, #1
 8002bde:	e7e7      	b.n	8002bb0 <_printf_float+0x198>
 8002be0:	2900      	cmp	r1, #0
 8002be2:	bfcc      	ite	gt
 8002be4:	2201      	movgt	r2, #1
 8002be6:	f1c1 0202 	rsble	r2, r1, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	e7e0      	b.n	8002bb0 <_printf_float+0x198>
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	055a      	lsls	r2, r3, #21
 8002bf2:	d407      	bmi.n	8002c04 <_printf_float+0x1ec>
 8002bf4:	6923      	ldr	r3, [r4, #16]
 8002bf6:	4642      	mov	r2, r8
 8002bf8:	4631      	mov	r1, r6
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	47b8      	blx	r7
 8002bfe:	3001      	adds	r0, #1
 8002c00:	d12b      	bne.n	8002c5a <_printf_float+0x242>
 8002c02:	e764      	b.n	8002ace <_printf_float+0xb6>
 8002c04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002c08:	f240 80dd 	bls.w	8002dc6 <_printf_float+0x3ae>
 8002c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c10:	2200      	movs	r2, #0
 8002c12:	2300      	movs	r3, #0
 8002c14:	f7fd fec8 	bl	80009a8 <__aeabi_dcmpeq>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	d033      	beq.n	8002c84 <_printf_float+0x26c>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	4631      	mov	r1, r6
 8002c20:	4628      	mov	r0, r5
 8002c22:	4a35      	ldr	r2, [pc, #212]	; (8002cf8 <_printf_float+0x2e0>)
 8002c24:	47b8      	blx	r7
 8002c26:	3001      	adds	r0, #1
 8002c28:	f43f af51 	beq.w	8002ace <_printf_float+0xb6>
 8002c2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c30:	429a      	cmp	r2, r3
 8002c32:	db02      	blt.n	8002c3a <_printf_float+0x222>
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	07d8      	lsls	r0, r3, #31
 8002c38:	d50f      	bpl.n	8002c5a <_printf_float+0x242>
 8002c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c3e:	4631      	mov	r1, r6
 8002c40:	4628      	mov	r0, r5
 8002c42:	47b8      	blx	r7
 8002c44:	3001      	adds	r0, #1
 8002c46:	f43f af42 	beq.w	8002ace <_printf_float+0xb6>
 8002c4a:	f04f 0800 	mov.w	r8, #0
 8002c4e:	f104 091a 	add.w	r9, r4, #26
 8002c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c54:	3b01      	subs	r3, #1
 8002c56:	4543      	cmp	r3, r8
 8002c58:	dc09      	bgt.n	8002c6e <_printf_float+0x256>
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	079b      	lsls	r3, r3, #30
 8002c5e:	f100 8102 	bmi.w	8002e66 <_printf_float+0x44e>
 8002c62:	68e0      	ldr	r0, [r4, #12]
 8002c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002c66:	4298      	cmp	r0, r3
 8002c68:	bfb8      	it	lt
 8002c6a:	4618      	movlt	r0, r3
 8002c6c:	e731      	b.n	8002ad2 <_printf_float+0xba>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	464a      	mov	r2, r9
 8002c72:	4631      	mov	r1, r6
 8002c74:	4628      	mov	r0, r5
 8002c76:	47b8      	blx	r7
 8002c78:	3001      	adds	r0, #1
 8002c7a:	f43f af28 	beq.w	8002ace <_printf_float+0xb6>
 8002c7e:	f108 0801 	add.w	r8, r8, #1
 8002c82:	e7e6      	b.n	8002c52 <_printf_float+0x23a>
 8002c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	dc38      	bgt.n	8002cfc <_printf_float+0x2e4>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	4631      	mov	r1, r6
 8002c8e:	4628      	mov	r0, r5
 8002c90:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <_printf_float+0x2e0>)
 8002c92:	47b8      	blx	r7
 8002c94:	3001      	adds	r0, #1
 8002c96:	f43f af1a 	beq.w	8002ace <_printf_float+0xb6>
 8002c9a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	d102      	bne.n	8002ca8 <_printf_float+0x290>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	07d9      	lsls	r1, r3, #31
 8002ca6:	d5d8      	bpl.n	8002c5a <_printf_float+0x242>
 8002ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cac:	4631      	mov	r1, r6
 8002cae:	4628      	mov	r0, r5
 8002cb0:	47b8      	blx	r7
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	f43f af0b 	beq.w	8002ace <_printf_float+0xb6>
 8002cb8:	f04f 0900 	mov.w	r9, #0
 8002cbc:	f104 0a1a 	add.w	sl, r4, #26
 8002cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cc2:	425b      	negs	r3, r3
 8002cc4:	454b      	cmp	r3, r9
 8002cc6:	dc01      	bgt.n	8002ccc <_printf_float+0x2b4>
 8002cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002cca:	e794      	b.n	8002bf6 <_printf_float+0x1de>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	4652      	mov	r2, sl
 8002cd0:	4631      	mov	r1, r6
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	47b8      	blx	r7
 8002cd6:	3001      	adds	r0, #1
 8002cd8:	f43f aef9 	beq.w	8002ace <_printf_float+0xb6>
 8002cdc:	f109 0901 	add.w	r9, r9, #1
 8002ce0:	e7ee      	b.n	8002cc0 <_printf_float+0x2a8>
 8002ce2:	bf00      	nop
 8002ce4:	7fefffff 	.word	0x7fefffff
 8002ce8:	0800537c 	.word	0x0800537c
 8002cec:	08005380 	.word	0x08005380
 8002cf0:	08005388 	.word	0x08005388
 8002cf4:	08005384 	.word	0x08005384
 8002cf8:	0800538c 	.word	0x0800538c
 8002cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d00:	429a      	cmp	r2, r3
 8002d02:	bfa8      	it	ge
 8002d04:	461a      	movge	r2, r3
 8002d06:	2a00      	cmp	r2, #0
 8002d08:	4691      	mov	r9, r2
 8002d0a:	dc37      	bgt.n	8002d7c <_printf_float+0x364>
 8002d0c:	f04f 0b00 	mov.w	fp, #0
 8002d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d14:	f104 021a 	add.w	r2, r4, #26
 8002d18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002d1c:	ebaa 0309 	sub.w	r3, sl, r9
 8002d20:	455b      	cmp	r3, fp
 8002d22:	dc33      	bgt.n	8002d8c <_printf_float+0x374>
 8002d24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	db3b      	blt.n	8002da4 <_printf_float+0x38c>
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	07da      	lsls	r2, r3, #31
 8002d30:	d438      	bmi.n	8002da4 <_printf_float+0x38c>
 8002d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d36:	eba3 020a 	sub.w	r2, r3, sl
 8002d3a:	eba3 0901 	sub.w	r9, r3, r1
 8002d3e:	4591      	cmp	r9, r2
 8002d40:	bfa8      	it	ge
 8002d42:	4691      	movge	r9, r2
 8002d44:	f1b9 0f00 	cmp.w	r9, #0
 8002d48:	dc34      	bgt.n	8002db4 <_printf_float+0x39c>
 8002d4a:	f04f 0800 	mov.w	r8, #0
 8002d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d52:	f104 0a1a 	add.w	sl, r4, #26
 8002d56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	eba3 0309 	sub.w	r3, r3, r9
 8002d60:	4543      	cmp	r3, r8
 8002d62:	f77f af7a 	ble.w	8002c5a <_printf_float+0x242>
 8002d66:	2301      	movs	r3, #1
 8002d68:	4652      	mov	r2, sl
 8002d6a:	4631      	mov	r1, r6
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	47b8      	blx	r7
 8002d70:	3001      	adds	r0, #1
 8002d72:	f43f aeac 	beq.w	8002ace <_printf_float+0xb6>
 8002d76:	f108 0801 	add.w	r8, r8, #1
 8002d7a:	e7ec      	b.n	8002d56 <_printf_float+0x33e>
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	4631      	mov	r1, r6
 8002d80:	4642      	mov	r2, r8
 8002d82:	4628      	mov	r0, r5
 8002d84:	47b8      	blx	r7
 8002d86:	3001      	adds	r0, #1
 8002d88:	d1c0      	bne.n	8002d0c <_printf_float+0x2f4>
 8002d8a:	e6a0      	b.n	8002ace <_printf_float+0xb6>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	4631      	mov	r1, r6
 8002d90:	4628      	mov	r0, r5
 8002d92:	920b      	str	r2, [sp, #44]	; 0x2c
 8002d94:	47b8      	blx	r7
 8002d96:	3001      	adds	r0, #1
 8002d98:	f43f ae99 	beq.w	8002ace <_printf_float+0xb6>
 8002d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d9e:	f10b 0b01 	add.w	fp, fp, #1
 8002da2:	e7b9      	b.n	8002d18 <_printf_float+0x300>
 8002da4:	4631      	mov	r1, r6
 8002da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002daa:	4628      	mov	r0, r5
 8002dac:	47b8      	blx	r7
 8002dae:	3001      	adds	r0, #1
 8002db0:	d1bf      	bne.n	8002d32 <_printf_float+0x31a>
 8002db2:	e68c      	b.n	8002ace <_printf_float+0xb6>
 8002db4:	464b      	mov	r3, r9
 8002db6:	4631      	mov	r1, r6
 8002db8:	4628      	mov	r0, r5
 8002dba:	eb08 020a 	add.w	r2, r8, sl
 8002dbe:	47b8      	blx	r7
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	d1c2      	bne.n	8002d4a <_printf_float+0x332>
 8002dc4:	e683      	b.n	8002ace <_printf_float+0xb6>
 8002dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002dc8:	2a01      	cmp	r2, #1
 8002dca:	dc01      	bgt.n	8002dd0 <_printf_float+0x3b8>
 8002dcc:	07db      	lsls	r3, r3, #31
 8002dce:	d537      	bpl.n	8002e40 <_printf_float+0x428>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	4642      	mov	r2, r8
 8002dd4:	4631      	mov	r1, r6
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	47b8      	blx	r7
 8002dda:	3001      	adds	r0, #1
 8002ddc:	f43f ae77 	beq.w	8002ace <_printf_float+0xb6>
 8002de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002de4:	4631      	mov	r1, r6
 8002de6:	4628      	mov	r0, r5
 8002de8:	47b8      	blx	r7
 8002dea:	3001      	adds	r0, #1
 8002dec:	f43f ae6f 	beq.w	8002ace <_printf_float+0xb6>
 8002df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002df4:	2200      	movs	r2, #0
 8002df6:	2300      	movs	r3, #0
 8002df8:	f7fd fdd6 	bl	80009a8 <__aeabi_dcmpeq>
 8002dfc:	b9d8      	cbnz	r0, 8002e36 <_printf_float+0x41e>
 8002dfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e00:	f108 0201 	add.w	r2, r8, #1
 8002e04:	3b01      	subs	r3, #1
 8002e06:	4631      	mov	r1, r6
 8002e08:	4628      	mov	r0, r5
 8002e0a:	47b8      	blx	r7
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d10e      	bne.n	8002e2e <_printf_float+0x416>
 8002e10:	e65d      	b.n	8002ace <_printf_float+0xb6>
 8002e12:	2301      	movs	r3, #1
 8002e14:	464a      	mov	r2, r9
 8002e16:	4631      	mov	r1, r6
 8002e18:	4628      	mov	r0, r5
 8002e1a:	47b8      	blx	r7
 8002e1c:	3001      	adds	r0, #1
 8002e1e:	f43f ae56 	beq.w	8002ace <_printf_float+0xb6>
 8002e22:	f108 0801 	add.w	r8, r8, #1
 8002e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	4543      	cmp	r3, r8
 8002e2c:	dcf1      	bgt.n	8002e12 <_printf_float+0x3fa>
 8002e2e:	4653      	mov	r3, sl
 8002e30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002e34:	e6e0      	b.n	8002bf8 <_printf_float+0x1e0>
 8002e36:	f04f 0800 	mov.w	r8, #0
 8002e3a:	f104 091a 	add.w	r9, r4, #26
 8002e3e:	e7f2      	b.n	8002e26 <_printf_float+0x40e>
 8002e40:	2301      	movs	r3, #1
 8002e42:	4642      	mov	r2, r8
 8002e44:	e7df      	b.n	8002e06 <_printf_float+0x3ee>
 8002e46:	2301      	movs	r3, #1
 8002e48:	464a      	mov	r2, r9
 8002e4a:	4631      	mov	r1, r6
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	47b8      	blx	r7
 8002e50:	3001      	adds	r0, #1
 8002e52:	f43f ae3c 	beq.w	8002ace <_printf_float+0xb6>
 8002e56:	f108 0801 	add.w	r8, r8, #1
 8002e5a:	68e3      	ldr	r3, [r4, #12]
 8002e5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002e5e:	1a5b      	subs	r3, r3, r1
 8002e60:	4543      	cmp	r3, r8
 8002e62:	dcf0      	bgt.n	8002e46 <_printf_float+0x42e>
 8002e64:	e6fd      	b.n	8002c62 <_printf_float+0x24a>
 8002e66:	f04f 0800 	mov.w	r8, #0
 8002e6a:	f104 0919 	add.w	r9, r4, #25
 8002e6e:	e7f4      	b.n	8002e5a <_printf_float+0x442>

08002e70 <_printf_common>:
 8002e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e74:	4616      	mov	r6, r2
 8002e76:	4699      	mov	r9, r3
 8002e78:	688a      	ldr	r2, [r1, #8]
 8002e7a:	690b      	ldr	r3, [r1, #16]
 8002e7c:	4607      	mov	r7, r0
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	bfb8      	it	lt
 8002e82:	4613      	movlt	r3, r2
 8002e84:	6033      	str	r3, [r6, #0]
 8002e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e90:	b10a      	cbz	r2, 8002e96 <_printf_common+0x26>
 8002e92:	3301      	adds	r3, #1
 8002e94:	6033      	str	r3, [r6, #0]
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	0699      	lsls	r1, r3, #26
 8002e9a:	bf42      	ittt	mi
 8002e9c:	6833      	ldrmi	r3, [r6, #0]
 8002e9e:	3302      	addmi	r3, #2
 8002ea0:	6033      	strmi	r3, [r6, #0]
 8002ea2:	6825      	ldr	r5, [r4, #0]
 8002ea4:	f015 0506 	ands.w	r5, r5, #6
 8002ea8:	d106      	bne.n	8002eb8 <_printf_common+0x48>
 8002eaa:	f104 0a19 	add.w	sl, r4, #25
 8002eae:	68e3      	ldr	r3, [r4, #12]
 8002eb0:	6832      	ldr	r2, [r6, #0]
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	42ab      	cmp	r3, r5
 8002eb6:	dc28      	bgt.n	8002f0a <_printf_common+0x9a>
 8002eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ebc:	1e13      	subs	r3, r2, #0
 8002ebe:	6822      	ldr	r2, [r4, #0]
 8002ec0:	bf18      	it	ne
 8002ec2:	2301      	movne	r3, #1
 8002ec4:	0692      	lsls	r2, r2, #26
 8002ec6:	d42d      	bmi.n	8002f24 <_printf_common+0xb4>
 8002ec8:	4649      	mov	r1, r9
 8002eca:	4638      	mov	r0, r7
 8002ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ed0:	47c0      	blx	r8
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	d020      	beq.n	8002f18 <_printf_common+0xa8>
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	68e5      	ldr	r5, [r4, #12]
 8002eda:	f003 0306 	and.w	r3, r3, #6
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf18      	it	ne
 8002ee2:	2500      	movne	r5, #0
 8002ee4:	6832      	ldr	r2, [r6, #0]
 8002ee6:	f04f 0600 	mov.w	r6, #0
 8002eea:	68a3      	ldr	r3, [r4, #8]
 8002eec:	bf08      	it	eq
 8002eee:	1aad      	subeq	r5, r5, r2
 8002ef0:	6922      	ldr	r2, [r4, #16]
 8002ef2:	bf08      	it	eq
 8002ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	bfc4      	itt	gt
 8002efc:	1a9b      	subgt	r3, r3, r2
 8002efe:	18ed      	addgt	r5, r5, r3
 8002f00:	341a      	adds	r4, #26
 8002f02:	42b5      	cmp	r5, r6
 8002f04:	d11a      	bne.n	8002f3c <_printf_common+0xcc>
 8002f06:	2000      	movs	r0, #0
 8002f08:	e008      	b.n	8002f1c <_printf_common+0xac>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	4652      	mov	r2, sl
 8002f0e:	4649      	mov	r1, r9
 8002f10:	4638      	mov	r0, r7
 8002f12:	47c0      	blx	r8
 8002f14:	3001      	adds	r0, #1
 8002f16:	d103      	bne.n	8002f20 <_printf_common+0xb0>
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f20:	3501      	adds	r5, #1
 8002f22:	e7c4      	b.n	8002eae <_printf_common+0x3e>
 8002f24:	2030      	movs	r0, #48	; 0x30
 8002f26:	18e1      	adds	r1, r4, r3
 8002f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f32:	4422      	add	r2, r4
 8002f34:	3302      	adds	r3, #2
 8002f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f3a:	e7c5      	b.n	8002ec8 <_printf_common+0x58>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	4622      	mov	r2, r4
 8002f40:	4649      	mov	r1, r9
 8002f42:	4638      	mov	r0, r7
 8002f44:	47c0      	blx	r8
 8002f46:	3001      	adds	r0, #1
 8002f48:	d0e6      	beq.n	8002f18 <_printf_common+0xa8>
 8002f4a:	3601      	adds	r6, #1
 8002f4c:	e7d9      	b.n	8002f02 <_printf_common+0x92>
	...

08002f50 <_printf_i>:
 8002f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f54:	7e0f      	ldrb	r7, [r1, #24]
 8002f56:	4691      	mov	r9, r2
 8002f58:	2f78      	cmp	r7, #120	; 0x78
 8002f5a:	4680      	mov	r8, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	469a      	mov	sl, r3
 8002f60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f66:	d807      	bhi.n	8002f78 <_printf_i+0x28>
 8002f68:	2f62      	cmp	r7, #98	; 0x62
 8002f6a:	d80a      	bhi.n	8002f82 <_printf_i+0x32>
 8002f6c:	2f00      	cmp	r7, #0
 8002f6e:	f000 80d9 	beq.w	8003124 <_printf_i+0x1d4>
 8002f72:	2f58      	cmp	r7, #88	; 0x58
 8002f74:	f000 80a4 	beq.w	80030c0 <_printf_i+0x170>
 8002f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f80:	e03a      	b.n	8002ff8 <_printf_i+0xa8>
 8002f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f86:	2b15      	cmp	r3, #21
 8002f88:	d8f6      	bhi.n	8002f78 <_printf_i+0x28>
 8002f8a:	a101      	add	r1, pc, #4	; (adr r1, 8002f90 <_printf_i+0x40>)
 8002f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f90:	08002fe9 	.word	0x08002fe9
 8002f94:	08002ffd 	.word	0x08002ffd
 8002f98:	08002f79 	.word	0x08002f79
 8002f9c:	08002f79 	.word	0x08002f79
 8002fa0:	08002f79 	.word	0x08002f79
 8002fa4:	08002f79 	.word	0x08002f79
 8002fa8:	08002ffd 	.word	0x08002ffd
 8002fac:	08002f79 	.word	0x08002f79
 8002fb0:	08002f79 	.word	0x08002f79
 8002fb4:	08002f79 	.word	0x08002f79
 8002fb8:	08002f79 	.word	0x08002f79
 8002fbc:	0800310b 	.word	0x0800310b
 8002fc0:	0800302d 	.word	0x0800302d
 8002fc4:	080030ed 	.word	0x080030ed
 8002fc8:	08002f79 	.word	0x08002f79
 8002fcc:	08002f79 	.word	0x08002f79
 8002fd0:	0800312d 	.word	0x0800312d
 8002fd4:	08002f79 	.word	0x08002f79
 8002fd8:	0800302d 	.word	0x0800302d
 8002fdc:	08002f79 	.word	0x08002f79
 8002fe0:	08002f79 	.word	0x08002f79
 8002fe4:	080030f5 	.word	0x080030f5
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	1d1a      	adds	r2, r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	602a      	str	r2, [r5, #0]
 8002ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0a4      	b.n	8003146 <_printf_i+0x1f6>
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	6829      	ldr	r1, [r5, #0]
 8003000:	0606      	lsls	r6, r0, #24
 8003002:	f101 0304 	add.w	r3, r1, #4
 8003006:	d50a      	bpl.n	800301e <_printf_i+0xce>
 8003008:	680e      	ldr	r6, [r1, #0]
 800300a:	602b      	str	r3, [r5, #0]
 800300c:	2e00      	cmp	r6, #0
 800300e:	da03      	bge.n	8003018 <_printf_i+0xc8>
 8003010:	232d      	movs	r3, #45	; 0x2d
 8003012:	4276      	negs	r6, r6
 8003014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003018:	230a      	movs	r3, #10
 800301a:	485e      	ldr	r0, [pc, #376]	; (8003194 <_printf_i+0x244>)
 800301c:	e019      	b.n	8003052 <_printf_i+0x102>
 800301e:	680e      	ldr	r6, [r1, #0]
 8003020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003024:	602b      	str	r3, [r5, #0]
 8003026:	bf18      	it	ne
 8003028:	b236      	sxthne	r6, r6
 800302a:	e7ef      	b.n	800300c <_printf_i+0xbc>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	1d19      	adds	r1, r3, #4
 8003032:	6029      	str	r1, [r5, #0]
 8003034:	0601      	lsls	r1, r0, #24
 8003036:	d501      	bpl.n	800303c <_printf_i+0xec>
 8003038:	681e      	ldr	r6, [r3, #0]
 800303a:	e002      	b.n	8003042 <_printf_i+0xf2>
 800303c:	0646      	lsls	r6, r0, #25
 800303e:	d5fb      	bpl.n	8003038 <_printf_i+0xe8>
 8003040:	881e      	ldrh	r6, [r3, #0]
 8003042:	2f6f      	cmp	r7, #111	; 0x6f
 8003044:	bf0c      	ite	eq
 8003046:	2308      	moveq	r3, #8
 8003048:	230a      	movne	r3, #10
 800304a:	4852      	ldr	r0, [pc, #328]	; (8003194 <_printf_i+0x244>)
 800304c:	2100      	movs	r1, #0
 800304e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003052:	6865      	ldr	r5, [r4, #4]
 8003054:	2d00      	cmp	r5, #0
 8003056:	bfa8      	it	ge
 8003058:	6821      	ldrge	r1, [r4, #0]
 800305a:	60a5      	str	r5, [r4, #8]
 800305c:	bfa4      	itt	ge
 800305e:	f021 0104 	bicge.w	r1, r1, #4
 8003062:	6021      	strge	r1, [r4, #0]
 8003064:	b90e      	cbnz	r6, 800306a <_printf_i+0x11a>
 8003066:	2d00      	cmp	r5, #0
 8003068:	d04d      	beq.n	8003106 <_printf_i+0x1b6>
 800306a:	4615      	mov	r5, r2
 800306c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003070:	fb03 6711 	mls	r7, r3, r1, r6
 8003074:	5dc7      	ldrb	r7, [r0, r7]
 8003076:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800307a:	4637      	mov	r7, r6
 800307c:	42bb      	cmp	r3, r7
 800307e:	460e      	mov	r6, r1
 8003080:	d9f4      	bls.n	800306c <_printf_i+0x11c>
 8003082:	2b08      	cmp	r3, #8
 8003084:	d10b      	bne.n	800309e <_printf_i+0x14e>
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	07de      	lsls	r6, r3, #31
 800308a:	d508      	bpl.n	800309e <_printf_i+0x14e>
 800308c:	6923      	ldr	r3, [r4, #16]
 800308e:	6861      	ldr	r1, [r4, #4]
 8003090:	4299      	cmp	r1, r3
 8003092:	bfde      	ittt	le
 8003094:	2330      	movle	r3, #48	; 0x30
 8003096:	f805 3c01 	strble.w	r3, [r5, #-1]
 800309a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800309e:	1b52      	subs	r2, r2, r5
 80030a0:	6122      	str	r2, [r4, #16]
 80030a2:	464b      	mov	r3, r9
 80030a4:	4621      	mov	r1, r4
 80030a6:	4640      	mov	r0, r8
 80030a8:	f8cd a000 	str.w	sl, [sp]
 80030ac:	aa03      	add	r2, sp, #12
 80030ae:	f7ff fedf 	bl	8002e70 <_printf_common>
 80030b2:	3001      	adds	r0, #1
 80030b4:	d14c      	bne.n	8003150 <_printf_i+0x200>
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ba:	b004      	add	sp, #16
 80030bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c0:	4834      	ldr	r0, [pc, #208]	; (8003194 <_printf_i+0x244>)
 80030c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030c6:	6829      	ldr	r1, [r5, #0]
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80030ce:	6029      	str	r1, [r5, #0]
 80030d0:	061d      	lsls	r5, r3, #24
 80030d2:	d514      	bpl.n	80030fe <_printf_i+0x1ae>
 80030d4:	07df      	lsls	r7, r3, #31
 80030d6:	bf44      	itt	mi
 80030d8:	f043 0320 	orrmi.w	r3, r3, #32
 80030dc:	6023      	strmi	r3, [r4, #0]
 80030de:	b91e      	cbnz	r6, 80030e8 <_printf_i+0x198>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	f023 0320 	bic.w	r3, r3, #32
 80030e6:	6023      	str	r3, [r4, #0]
 80030e8:	2310      	movs	r3, #16
 80030ea:	e7af      	b.n	800304c <_printf_i+0xfc>
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	2378      	movs	r3, #120	; 0x78
 80030f6:	4828      	ldr	r0, [pc, #160]	; (8003198 <_printf_i+0x248>)
 80030f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030fc:	e7e3      	b.n	80030c6 <_printf_i+0x176>
 80030fe:	0659      	lsls	r1, r3, #25
 8003100:	bf48      	it	mi
 8003102:	b2b6      	uxthmi	r6, r6
 8003104:	e7e6      	b.n	80030d4 <_printf_i+0x184>
 8003106:	4615      	mov	r5, r2
 8003108:	e7bb      	b.n	8003082 <_printf_i+0x132>
 800310a:	682b      	ldr	r3, [r5, #0]
 800310c:	6826      	ldr	r6, [r4, #0]
 800310e:	1d18      	adds	r0, r3, #4
 8003110:	6961      	ldr	r1, [r4, #20]
 8003112:	6028      	str	r0, [r5, #0]
 8003114:	0635      	lsls	r5, r6, #24
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	d501      	bpl.n	800311e <_printf_i+0x1ce>
 800311a:	6019      	str	r1, [r3, #0]
 800311c:	e002      	b.n	8003124 <_printf_i+0x1d4>
 800311e:	0670      	lsls	r0, r6, #25
 8003120:	d5fb      	bpl.n	800311a <_printf_i+0x1ca>
 8003122:	8019      	strh	r1, [r3, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	4615      	mov	r5, r2
 8003128:	6123      	str	r3, [r4, #16]
 800312a:	e7ba      	b.n	80030a2 <_printf_i+0x152>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	2100      	movs	r1, #0
 8003130:	1d1a      	adds	r2, r3, #4
 8003132:	602a      	str	r2, [r5, #0]
 8003134:	681d      	ldr	r5, [r3, #0]
 8003136:	6862      	ldr	r2, [r4, #4]
 8003138:	4628      	mov	r0, r5
 800313a:	f000 ffc9 	bl	80040d0 <memchr>
 800313e:	b108      	cbz	r0, 8003144 <_printf_i+0x1f4>
 8003140:	1b40      	subs	r0, r0, r5
 8003142:	6060      	str	r0, [r4, #4]
 8003144:	6863      	ldr	r3, [r4, #4]
 8003146:	6123      	str	r3, [r4, #16]
 8003148:	2300      	movs	r3, #0
 800314a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800314e:	e7a8      	b.n	80030a2 <_printf_i+0x152>
 8003150:	462a      	mov	r2, r5
 8003152:	4649      	mov	r1, r9
 8003154:	4640      	mov	r0, r8
 8003156:	6923      	ldr	r3, [r4, #16]
 8003158:	47d0      	blx	sl
 800315a:	3001      	adds	r0, #1
 800315c:	d0ab      	beq.n	80030b6 <_printf_i+0x166>
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	079b      	lsls	r3, r3, #30
 8003162:	d413      	bmi.n	800318c <_printf_i+0x23c>
 8003164:	68e0      	ldr	r0, [r4, #12]
 8003166:	9b03      	ldr	r3, [sp, #12]
 8003168:	4298      	cmp	r0, r3
 800316a:	bfb8      	it	lt
 800316c:	4618      	movlt	r0, r3
 800316e:	e7a4      	b.n	80030ba <_printf_i+0x16a>
 8003170:	2301      	movs	r3, #1
 8003172:	4632      	mov	r2, r6
 8003174:	4649      	mov	r1, r9
 8003176:	4640      	mov	r0, r8
 8003178:	47d0      	blx	sl
 800317a:	3001      	adds	r0, #1
 800317c:	d09b      	beq.n	80030b6 <_printf_i+0x166>
 800317e:	3501      	adds	r5, #1
 8003180:	68e3      	ldr	r3, [r4, #12]
 8003182:	9903      	ldr	r1, [sp, #12]
 8003184:	1a5b      	subs	r3, r3, r1
 8003186:	42ab      	cmp	r3, r5
 8003188:	dcf2      	bgt.n	8003170 <_printf_i+0x220>
 800318a:	e7eb      	b.n	8003164 <_printf_i+0x214>
 800318c:	2500      	movs	r5, #0
 800318e:	f104 0619 	add.w	r6, r4, #25
 8003192:	e7f5      	b.n	8003180 <_printf_i+0x230>
 8003194:	0800538e 	.word	0x0800538e
 8003198:	0800539f 	.word	0x0800539f

0800319c <iprintf>:
 800319c:	b40f      	push	{r0, r1, r2, r3}
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <iprintf+0x2c>)
 80031a0:	b513      	push	{r0, r1, r4, lr}
 80031a2:	681c      	ldr	r4, [r3, #0]
 80031a4:	b124      	cbz	r4, 80031b0 <iprintf+0x14>
 80031a6:	69a3      	ldr	r3, [r4, #24]
 80031a8:	b913      	cbnz	r3, 80031b0 <iprintf+0x14>
 80031aa:	4620      	mov	r0, r4
 80031ac:	f000 fee2 	bl	8003f74 <__sinit>
 80031b0:	ab05      	add	r3, sp, #20
 80031b2:	4620      	mov	r0, r4
 80031b4:	9a04      	ldr	r2, [sp, #16]
 80031b6:	68a1      	ldr	r1, [r4, #8]
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	f001 fc3f 	bl	8004a3c <_vfiprintf_r>
 80031be:	b002      	add	sp, #8
 80031c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031c4:	b004      	add	sp, #16
 80031c6:	4770      	bx	lr
 80031c8:	2000000c 	.word	0x2000000c

080031cc <quorem>:
 80031cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d0:	6903      	ldr	r3, [r0, #16]
 80031d2:	690c      	ldr	r4, [r1, #16]
 80031d4:	4607      	mov	r7, r0
 80031d6:	42a3      	cmp	r3, r4
 80031d8:	f2c0 8082 	blt.w	80032e0 <quorem+0x114>
 80031dc:	3c01      	subs	r4, #1
 80031de:	f100 0514 	add.w	r5, r0, #20
 80031e2:	f101 0814 	add.w	r8, r1, #20
 80031e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80031f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80031f4:	3301      	adds	r3, #1
 80031f6:	429a      	cmp	r2, r3
 80031f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80031fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003200:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003204:	d331      	bcc.n	800326a <quorem+0x9e>
 8003206:	f04f 0e00 	mov.w	lr, #0
 800320a:	4640      	mov	r0, r8
 800320c:	46ac      	mov	ip, r5
 800320e:	46f2      	mov	sl, lr
 8003210:	f850 2b04 	ldr.w	r2, [r0], #4
 8003214:	b293      	uxth	r3, r2
 8003216:	fb06 e303 	mla	r3, r6, r3, lr
 800321a:	0c12      	lsrs	r2, r2, #16
 800321c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003220:	b29b      	uxth	r3, r3
 8003222:	fb06 e202 	mla	r2, r6, r2, lr
 8003226:	ebaa 0303 	sub.w	r3, sl, r3
 800322a:	f8dc a000 	ldr.w	sl, [ip]
 800322e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003232:	fa1f fa8a 	uxth.w	sl, sl
 8003236:	4453      	add	r3, sl
 8003238:	f8dc a000 	ldr.w	sl, [ip]
 800323c:	b292      	uxth	r2, r2
 800323e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003242:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003246:	b29b      	uxth	r3, r3
 8003248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800324c:	4581      	cmp	r9, r0
 800324e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003252:	f84c 3b04 	str.w	r3, [ip], #4
 8003256:	d2db      	bcs.n	8003210 <quorem+0x44>
 8003258:	f855 300b 	ldr.w	r3, [r5, fp]
 800325c:	b92b      	cbnz	r3, 800326a <quorem+0x9e>
 800325e:	9b01      	ldr	r3, [sp, #4]
 8003260:	3b04      	subs	r3, #4
 8003262:	429d      	cmp	r5, r3
 8003264:	461a      	mov	r2, r3
 8003266:	d32f      	bcc.n	80032c8 <quorem+0xfc>
 8003268:	613c      	str	r4, [r7, #16]
 800326a:	4638      	mov	r0, r7
 800326c:	f001 f9ca 	bl	8004604 <__mcmp>
 8003270:	2800      	cmp	r0, #0
 8003272:	db25      	blt.n	80032c0 <quorem+0xf4>
 8003274:	4628      	mov	r0, r5
 8003276:	f04f 0c00 	mov.w	ip, #0
 800327a:	3601      	adds	r6, #1
 800327c:	f858 1b04 	ldr.w	r1, [r8], #4
 8003280:	f8d0 e000 	ldr.w	lr, [r0]
 8003284:	b28b      	uxth	r3, r1
 8003286:	ebac 0303 	sub.w	r3, ip, r3
 800328a:	fa1f f28e 	uxth.w	r2, lr
 800328e:	4413      	add	r3, r2
 8003290:	0c0a      	lsrs	r2, r1, #16
 8003292:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003296:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800329a:	b29b      	uxth	r3, r3
 800329c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032a0:	45c1      	cmp	r9, r8
 80032a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80032a6:	f840 3b04 	str.w	r3, [r0], #4
 80032aa:	d2e7      	bcs.n	800327c <quorem+0xb0>
 80032ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80032b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80032b4:	b922      	cbnz	r2, 80032c0 <quorem+0xf4>
 80032b6:	3b04      	subs	r3, #4
 80032b8:	429d      	cmp	r5, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	d30a      	bcc.n	80032d4 <quorem+0x108>
 80032be:	613c      	str	r4, [r7, #16]
 80032c0:	4630      	mov	r0, r6
 80032c2:	b003      	add	sp, #12
 80032c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	3b04      	subs	r3, #4
 80032cc:	2a00      	cmp	r2, #0
 80032ce:	d1cb      	bne.n	8003268 <quorem+0x9c>
 80032d0:	3c01      	subs	r4, #1
 80032d2:	e7c6      	b.n	8003262 <quorem+0x96>
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	3b04      	subs	r3, #4
 80032d8:	2a00      	cmp	r2, #0
 80032da:	d1f0      	bne.n	80032be <quorem+0xf2>
 80032dc:	3c01      	subs	r4, #1
 80032de:	e7eb      	b.n	80032b8 <quorem+0xec>
 80032e0:	2000      	movs	r0, #0
 80032e2:	e7ee      	b.n	80032c2 <quorem+0xf6>
 80032e4:	0000      	movs	r0, r0
	...

080032e8 <_dtoa_r>:
 80032e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ec:	4616      	mov	r6, r2
 80032ee:	461f      	mov	r7, r3
 80032f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80032f2:	b099      	sub	sp, #100	; 0x64
 80032f4:	4605      	mov	r5, r0
 80032f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80032fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80032fe:	b974      	cbnz	r4, 800331e <_dtoa_r+0x36>
 8003300:	2010      	movs	r0, #16
 8003302:	f000 fedd 	bl	80040c0 <malloc>
 8003306:	4602      	mov	r2, r0
 8003308:	6268      	str	r0, [r5, #36]	; 0x24
 800330a:	b920      	cbnz	r0, 8003316 <_dtoa_r+0x2e>
 800330c:	21ea      	movs	r1, #234	; 0xea
 800330e:	4ba8      	ldr	r3, [pc, #672]	; (80035b0 <_dtoa_r+0x2c8>)
 8003310:	48a8      	ldr	r0, [pc, #672]	; (80035b4 <_dtoa_r+0x2cc>)
 8003312:	f001 fde9 	bl	8004ee8 <__assert_func>
 8003316:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800331a:	6004      	str	r4, [r0, #0]
 800331c:	60c4      	str	r4, [r0, #12]
 800331e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003320:	6819      	ldr	r1, [r3, #0]
 8003322:	b151      	cbz	r1, 800333a <_dtoa_r+0x52>
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	2301      	movs	r3, #1
 8003328:	4093      	lsls	r3, r2
 800332a:	604a      	str	r2, [r1, #4]
 800332c:	608b      	str	r3, [r1, #8]
 800332e:	4628      	mov	r0, r5
 8003330:	f000 ff2a 	bl	8004188 <_Bfree>
 8003334:	2200      	movs	r2, #0
 8003336:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	1e3b      	subs	r3, r7, #0
 800333c:	bfaf      	iteee	ge
 800333e:	2300      	movge	r3, #0
 8003340:	2201      	movlt	r2, #1
 8003342:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003346:	9305      	strlt	r3, [sp, #20]
 8003348:	bfa8      	it	ge
 800334a:	f8c8 3000 	strge.w	r3, [r8]
 800334e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003352:	4b99      	ldr	r3, [pc, #612]	; (80035b8 <_dtoa_r+0x2d0>)
 8003354:	bfb8      	it	lt
 8003356:	f8c8 2000 	strlt.w	r2, [r8]
 800335a:	ea33 0309 	bics.w	r3, r3, r9
 800335e:	d119      	bne.n	8003394 <_dtoa_r+0xac>
 8003360:	f242 730f 	movw	r3, #9999	; 0x270f
 8003364:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800336c:	4333      	orrs	r3, r6
 800336e:	f000 857f 	beq.w	8003e70 <_dtoa_r+0xb88>
 8003372:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003374:	b953      	cbnz	r3, 800338c <_dtoa_r+0xa4>
 8003376:	4b91      	ldr	r3, [pc, #580]	; (80035bc <_dtoa_r+0x2d4>)
 8003378:	e022      	b.n	80033c0 <_dtoa_r+0xd8>
 800337a:	4b91      	ldr	r3, [pc, #580]	; (80035c0 <_dtoa_r+0x2d8>)
 800337c:	9303      	str	r3, [sp, #12]
 800337e:	3308      	adds	r3, #8
 8003380:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	9803      	ldr	r0, [sp, #12]
 8003386:	b019      	add	sp, #100	; 0x64
 8003388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800338c:	4b8b      	ldr	r3, [pc, #556]	; (80035bc <_dtoa_r+0x2d4>)
 800338e:	9303      	str	r3, [sp, #12]
 8003390:	3303      	adds	r3, #3
 8003392:	e7f5      	b.n	8003380 <_dtoa_r+0x98>
 8003394:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003398:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800339c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80033a0:	2200      	movs	r2, #0
 80033a2:	2300      	movs	r3, #0
 80033a4:	f7fd fb00 	bl	80009a8 <__aeabi_dcmpeq>
 80033a8:	4680      	mov	r8, r0
 80033aa:	b158      	cbz	r0, 80033c4 <_dtoa_r+0xdc>
 80033ac:	2301      	movs	r3, #1
 80033ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8558 	beq.w	8003e6a <_dtoa_r+0xb82>
 80033ba:	4882      	ldr	r0, [pc, #520]	; (80035c4 <_dtoa_r+0x2dc>)
 80033bc:	6018      	str	r0, [r3, #0]
 80033be:	1e43      	subs	r3, r0, #1
 80033c0:	9303      	str	r3, [sp, #12]
 80033c2:	e7df      	b.n	8003384 <_dtoa_r+0x9c>
 80033c4:	ab16      	add	r3, sp, #88	; 0x58
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	ab17      	add	r3, sp, #92	; 0x5c
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	4628      	mov	r0, r5
 80033ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80033d2:	f001 f9bf 	bl	8004754 <__d2b>
 80033d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80033da:	4683      	mov	fp, r0
 80033dc:	2c00      	cmp	r4, #0
 80033de:	d07f      	beq.n	80034e0 <_dtoa_r+0x1f8>
 80033e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80033e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80033ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80033f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80033f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80033fa:	2200      	movs	r2, #0
 80033fc:	4b72      	ldr	r3, [pc, #456]	; (80035c8 <_dtoa_r+0x2e0>)
 80033fe:	f7fc feb3 	bl	8000168 <__aeabi_dsub>
 8003402:	a365      	add	r3, pc, #404	; (adr r3, 8003598 <_dtoa_r+0x2b0>)
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f7fd f866 	bl	80004d8 <__aeabi_dmul>
 800340c:	a364      	add	r3, pc, #400	; (adr r3, 80035a0 <_dtoa_r+0x2b8>)
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f7fc feab 	bl	800016c <__adddf3>
 8003416:	4606      	mov	r6, r0
 8003418:	4620      	mov	r0, r4
 800341a:	460f      	mov	r7, r1
 800341c:	f7fc fff2 	bl	8000404 <__aeabi_i2d>
 8003420:	a361      	add	r3, pc, #388	; (adr r3, 80035a8 <_dtoa_r+0x2c0>)
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f7fd f857 	bl	80004d8 <__aeabi_dmul>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4630      	mov	r0, r6
 8003430:	4639      	mov	r1, r7
 8003432:	f7fc fe9b 	bl	800016c <__adddf3>
 8003436:	4606      	mov	r6, r0
 8003438:	460f      	mov	r7, r1
 800343a:	f7fd fafd 	bl	8000a38 <__aeabi_d2iz>
 800343e:	2200      	movs	r2, #0
 8003440:	4682      	mov	sl, r0
 8003442:	2300      	movs	r3, #0
 8003444:	4630      	mov	r0, r6
 8003446:	4639      	mov	r1, r7
 8003448:	f7fd fab8 	bl	80009bc <__aeabi_dcmplt>
 800344c:	b148      	cbz	r0, 8003462 <_dtoa_r+0x17a>
 800344e:	4650      	mov	r0, sl
 8003450:	f7fc ffd8 	bl	8000404 <__aeabi_i2d>
 8003454:	4632      	mov	r2, r6
 8003456:	463b      	mov	r3, r7
 8003458:	f7fd faa6 	bl	80009a8 <__aeabi_dcmpeq>
 800345c:	b908      	cbnz	r0, 8003462 <_dtoa_r+0x17a>
 800345e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003462:	f1ba 0f16 	cmp.w	sl, #22
 8003466:	d858      	bhi.n	800351a <_dtoa_r+0x232>
 8003468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800346c:	4b57      	ldr	r3, [pc, #348]	; (80035cc <_dtoa_r+0x2e4>)
 800346e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	f7fd faa1 	bl	80009bc <__aeabi_dcmplt>
 800347a:	2800      	cmp	r0, #0
 800347c:	d04f      	beq.n	800351e <_dtoa_r+0x236>
 800347e:	2300      	movs	r3, #0
 8003480:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003484:	930f      	str	r3, [sp, #60]	; 0x3c
 8003486:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003488:	1b1c      	subs	r4, r3, r4
 800348a:	1e63      	subs	r3, r4, #1
 800348c:	9309      	str	r3, [sp, #36]	; 0x24
 800348e:	bf49      	itett	mi
 8003490:	f1c4 0301 	rsbmi	r3, r4, #1
 8003494:	2300      	movpl	r3, #0
 8003496:	9306      	strmi	r3, [sp, #24]
 8003498:	2300      	movmi	r3, #0
 800349a:	bf54      	ite	pl
 800349c:	9306      	strpl	r3, [sp, #24]
 800349e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80034a0:	f1ba 0f00 	cmp.w	sl, #0
 80034a4:	db3d      	blt.n	8003522 <_dtoa_r+0x23a>
 80034a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80034ac:	4453      	add	r3, sl
 80034ae:	9309      	str	r3, [sp, #36]	; 0x24
 80034b0:	2300      	movs	r3, #0
 80034b2:	930a      	str	r3, [sp, #40]	; 0x28
 80034b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034b6:	2b09      	cmp	r3, #9
 80034b8:	f200 808c 	bhi.w	80035d4 <_dtoa_r+0x2ec>
 80034bc:	2b05      	cmp	r3, #5
 80034be:	bfc4      	itt	gt
 80034c0:	3b04      	subgt	r3, #4
 80034c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80034c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034c6:	bfc8      	it	gt
 80034c8:	2400      	movgt	r4, #0
 80034ca:	f1a3 0302 	sub.w	r3, r3, #2
 80034ce:	bfd8      	it	le
 80034d0:	2401      	movle	r4, #1
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	f200 808a 	bhi.w	80035ec <_dtoa_r+0x304>
 80034d8:	e8df f003 	tbb	[pc, r3]
 80034dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80034e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80034e4:	441c      	add	r4, r3
 80034e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	bfc3      	ittte	gt
 80034ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80034f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80034f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80034fa:	f1c3 0320 	rsble	r3, r3, #32
 80034fe:	bfc6      	itte	gt
 8003500:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003504:	4318      	orrgt	r0, r3
 8003506:	fa06 f003 	lslle.w	r0, r6, r3
 800350a:	f7fc ff6b 	bl	80003e4 <__aeabi_ui2d>
 800350e:	2301      	movs	r3, #1
 8003510:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003514:	3c01      	subs	r4, #1
 8003516:	9313      	str	r3, [sp, #76]	; 0x4c
 8003518:	e76f      	b.n	80033fa <_dtoa_r+0x112>
 800351a:	2301      	movs	r3, #1
 800351c:	e7b2      	b.n	8003484 <_dtoa_r+0x19c>
 800351e:	900f      	str	r0, [sp, #60]	; 0x3c
 8003520:	e7b1      	b.n	8003486 <_dtoa_r+0x19e>
 8003522:	9b06      	ldr	r3, [sp, #24]
 8003524:	eba3 030a 	sub.w	r3, r3, sl
 8003528:	9306      	str	r3, [sp, #24]
 800352a:	f1ca 0300 	rsb	r3, sl, #0
 800352e:	930a      	str	r3, [sp, #40]	; 0x28
 8003530:	2300      	movs	r3, #0
 8003532:	930e      	str	r3, [sp, #56]	; 0x38
 8003534:	e7be      	b.n	80034b4 <_dtoa_r+0x1cc>
 8003536:	2300      	movs	r3, #0
 8003538:	930b      	str	r3, [sp, #44]	; 0x2c
 800353a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800353c:	2b00      	cmp	r3, #0
 800353e:	dc58      	bgt.n	80035f2 <_dtoa_r+0x30a>
 8003540:	f04f 0901 	mov.w	r9, #1
 8003544:	464b      	mov	r3, r9
 8003546:	f8cd 9020 	str.w	r9, [sp, #32]
 800354a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800354e:	2200      	movs	r2, #0
 8003550:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003552:	6042      	str	r2, [r0, #4]
 8003554:	2204      	movs	r2, #4
 8003556:	f102 0614 	add.w	r6, r2, #20
 800355a:	429e      	cmp	r6, r3
 800355c:	6841      	ldr	r1, [r0, #4]
 800355e:	d94e      	bls.n	80035fe <_dtoa_r+0x316>
 8003560:	4628      	mov	r0, r5
 8003562:	f000 fdd1 	bl	8004108 <_Balloc>
 8003566:	9003      	str	r0, [sp, #12]
 8003568:	2800      	cmp	r0, #0
 800356a:	d14c      	bne.n	8003606 <_dtoa_r+0x31e>
 800356c:	4602      	mov	r2, r0
 800356e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003572:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <_dtoa_r+0x2e8>)
 8003574:	e6cc      	b.n	8003310 <_dtoa_r+0x28>
 8003576:	2301      	movs	r3, #1
 8003578:	e7de      	b.n	8003538 <_dtoa_r+0x250>
 800357a:	2300      	movs	r3, #0
 800357c:	930b      	str	r3, [sp, #44]	; 0x2c
 800357e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003580:	eb0a 0903 	add.w	r9, sl, r3
 8003584:	f109 0301 	add.w	r3, r9, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	9308      	str	r3, [sp, #32]
 800358c:	bfb8      	it	lt
 800358e:	2301      	movlt	r3, #1
 8003590:	e7dd      	b.n	800354e <_dtoa_r+0x266>
 8003592:	2301      	movs	r3, #1
 8003594:	e7f2      	b.n	800357c <_dtoa_r+0x294>
 8003596:	bf00      	nop
 8003598:	636f4361 	.word	0x636f4361
 800359c:	3fd287a7 	.word	0x3fd287a7
 80035a0:	8b60c8b3 	.word	0x8b60c8b3
 80035a4:	3fc68a28 	.word	0x3fc68a28
 80035a8:	509f79fb 	.word	0x509f79fb
 80035ac:	3fd34413 	.word	0x3fd34413
 80035b0:	080053bd 	.word	0x080053bd
 80035b4:	080053d4 	.word	0x080053d4
 80035b8:	7ff00000 	.word	0x7ff00000
 80035bc:	080053b9 	.word	0x080053b9
 80035c0:	080053b0 	.word	0x080053b0
 80035c4:	0800538d 	.word	0x0800538d
 80035c8:	3ff80000 	.word	0x3ff80000
 80035cc:	08005528 	.word	0x08005528
 80035d0:	0800542f 	.word	0x0800542f
 80035d4:	2401      	movs	r4, #1
 80035d6:	2300      	movs	r3, #0
 80035d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80035da:	9322      	str	r3, [sp, #136]	; 0x88
 80035dc:	f04f 39ff 	mov.w	r9, #4294967295
 80035e0:	2200      	movs	r2, #0
 80035e2:	2312      	movs	r3, #18
 80035e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80035e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80035ea:	e7b0      	b.n	800354e <_dtoa_r+0x266>
 80035ec:	2301      	movs	r3, #1
 80035ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80035f0:	e7f4      	b.n	80035dc <_dtoa_r+0x2f4>
 80035f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80035f6:	464b      	mov	r3, r9
 80035f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80035fc:	e7a7      	b.n	800354e <_dtoa_r+0x266>
 80035fe:	3101      	adds	r1, #1
 8003600:	6041      	str	r1, [r0, #4]
 8003602:	0052      	lsls	r2, r2, #1
 8003604:	e7a7      	b.n	8003556 <_dtoa_r+0x26e>
 8003606:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003608:	9a03      	ldr	r2, [sp, #12]
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	9b08      	ldr	r3, [sp, #32]
 800360e:	2b0e      	cmp	r3, #14
 8003610:	f200 80a8 	bhi.w	8003764 <_dtoa_r+0x47c>
 8003614:	2c00      	cmp	r4, #0
 8003616:	f000 80a5 	beq.w	8003764 <_dtoa_r+0x47c>
 800361a:	f1ba 0f00 	cmp.w	sl, #0
 800361e:	dd34      	ble.n	800368a <_dtoa_r+0x3a2>
 8003620:	4a9a      	ldr	r2, [pc, #616]	; (800388c <_dtoa_r+0x5a4>)
 8003622:	f00a 030f 	and.w	r3, sl, #15
 8003626:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800362a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800362e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003632:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003636:	ea4f 142a 	mov.w	r4, sl, asr #4
 800363a:	d016      	beq.n	800366a <_dtoa_r+0x382>
 800363c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003640:	4b93      	ldr	r3, [pc, #588]	; (8003890 <_dtoa_r+0x5a8>)
 8003642:	2703      	movs	r7, #3
 8003644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003648:	f7fd f870 	bl	800072c <__aeabi_ddiv>
 800364c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003650:	f004 040f 	and.w	r4, r4, #15
 8003654:	4e8e      	ldr	r6, [pc, #568]	; (8003890 <_dtoa_r+0x5a8>)
 8003656:	b954      	cbnz	r4, 800366e <_dtoa_r+0x386>
 8003658:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800365c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003660:	f7fd f864 	bl	800072c <__aeabi_ddiv>
 8003664:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003668:	e029      	b.n	80036be <_dtoa_r+0x3d6>
 800366a:	2702      	movs	r7, #2
 800366c:	e7f2      	b.n	8003654 <_dtoa_r+0x36c>
 800366e:	07e1      	lsls	r1, r4, #31
 8003670:	d508      	bpl.n	8003684 <_dtoa_r+0x39c>
 8003672:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003676:	e9d6 2300 	ldrd	r2, r3, [r6]
 800367a:	f7fc ff2d 	bl	80004d8 <__aeabi_dmul>
 800367e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003682:	3701      	adds	r7, #1
 8003684:	1064      	asrs	r4, r4, #1
 8003686:	3608      	adds	r6, #8
 8003688:	e7e5      	b.n	8003656 <_dtoa_r+0x36e>
 800368a:	f000 80a5 	beq.w	80037d8 <_dtoa_r+0x4f0>
 800368e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003692:	f1ca 0400 	rsb	r4, sl, #0
 8003696:	4b7d      	ldr	r3, [pc, #500]	; (800388c <_dtoa_r+0x5a4>)
 8003698:	f004 020f 	and.w	r2, r4, #15
 800369c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f7fc ff18 	bl	80004d8 <__aeabi_dmul>
 80036a8:	2702      	movs	r7, #2
 80036aa:	2300      	movs	r3, #0
 80036ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036b0:	4e77      	ldr	r6, [pc, #476]	; (8003890 <_dtoa_r+0x5a8>)
 80036b2:	1124      	asrs	r4, r4, #4
 80036b4:	2c00      	cmp	r4, #0
 80036b6:	f040 8084 	bne.w	80037c2 <_dtoa_r+0x4da>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1d2      	bne.n	8003664 <_dtoa_r+0x37c>
 80036be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 808b 	beq.w	80037dc <_dtoa_r+0x4f4>
 80036c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80036ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80036ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80036d2:	2200      	movs	r2, #0
 80036d4:	4b6f      	ldr	r3, [pc, #444]	; (8003894 <_dtoa_r+0x5ac>)
 80036d6:	f7fd f971 	bl	80009bc <__aeabi_dcmplt>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d07e      	beq.n	80037dc <_dtoa_r+0x4f4>
 80036de:	9b08      	ldr	r3, [sp, #32]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d07b      	beq.n	80037dc <_dtoa_r+0x4f4>
 80036e4:	f1b9 0f00 	cmp.w	r9, #0
 80036e8:	dd38      	ble.n	800375c <_dtoa_r+0x474>
 80036ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80036ee:	2200      	movs	r2, #0
 80036f0:	4b69      	ldr	r3, [pc, #420]	; (8003898 <_dtoa_r+0x5b0>)
 80036f2:	f7fc fef1 	bl	80004d8 <__aeabi_dmul>
 80036f6:	464c      	mov	r4, r9
 80036f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003700:	3701      	adds	r7, #1
 8003702:	4638      	mov	r0, r7
 8003704:	f7fc fe7e 	bl	8000404 <__aeabi_i2d>
 8003708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800370c:	f7fc fee4 	bl	80004d8 <__aeabi_dmul>
 8003710:	2200      	movs	r2, #0
 8003712:	4b62      	ldr	r3, [pc, #392]	; (800389c <_dtoa_r+0x5b4>)
 8003714:	f7fc fd2a 	bl	800016c <__adddf3>
 8003718:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800371c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003720:	9611      	str	r6, [sp, #68]	; 0x44
 8003722:	2c00      	cmp	r4, #0
 8003724:	d15d      	bne.n	80037e2 <_dtoa_r+0x4fa>
 8003726:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800372a:	2200      	movs	r2, #0
 800372c:	4b5c      	ldr	r3, [pc, #368]	; (80038a0 <_dtoa_r+0x5b8>)
 800372e:	f7fc fd1b 	bl	8000168 <__aeabi_dsub>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800373a:	4633      	mov	r3, r6
 800373c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800373e:	f7fd f95b 	bl	80009f8 <__aeabi_dcmpgt>
 8003742:	2800      	cmp	r0, #0
 8003744:	f040 829c 	bne.w	8003c80 <_dtoa_r+0x998>
 8003748:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800374c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800374e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003752:	f7fd f933 	bl	80009bc <__aeabi_dcmplt>
 8003756:	2800      	cmp	r0, #0
 8003758:	f040 8290 	bne.w	8003c7c <_dtoa_r+0x994>
 800375c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003760:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003764:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003766:	2b00      	cmp	r3, #0
 8003768:	f2c0 8152 	blt.w	8003a10 <_dtoa_r+0x728>
 800376c:	f1ba 0f0e 	cmp.w	sl, #14
 8003770:	f300 814e 	bgt.w	8003a10 <_dtoa_r+0x728>
 8003774:	4b45      	ldr	r3, [pc, #276]	; (800388c <_dtoa_r+0x5a4>)
 8003776:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800377a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800377e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003782:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003784:	2b00      	cmp	r3, #0
 8003786:	f280 80db 	bge.w	8003940 <_dtoa_r+0x658>
 800378a:	9b08      	ldr	r3, [sp, #32]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f300 80d7 	bgt.w	8003940 <_dtoa_r+0x658>
 8003792:	f040 8272 	bne.w	8003c7a <_dtoa_r+0x992>
 8003796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800379a:	2200      	movs	r2, #0
 800379c:	4b40      	ldr	r3, [pc, #256]	; (80038a0 <_dtoa_r+0x5b8>)
 800379e:	f7fc fe9b 	bl	80004d8 <__aeabi_dmul>
 80037a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80037a6:	f7fd f91d 	bl	80009e4 <__aeabi_dcmpge>
 80037aa:	9c08      	ldr	r4, [sp, #32]
 80037ac:	4626      	mov	r6, r4
 80037ae:	2800      	cmp	r0, #0
 80037b0:	f040 8248 	bne.w	8003c44 <_dtoa_r+0x95c>
 80037b4:	2331      	movs	r3, #49	; 0x31
 80037b6:	9f03      	ldr	r7, [sp, #12]
 80037b8:	f10a 0a01 	add.w	sl, sl, #1
 80037bc:	f807 3b01 	strb.w	r3, [r7], #1
 80037c0:	e244      	b.n	8003c4c <_dtoa_r+0x964>
 80037c2:	07e2      	lsls	r2, r4, #31
 80037c4:	d505      	bpl.n	80037d2 <_dtoa_r+0x4ea>
 80037c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80037ca:	f7fc fe85 	bl	80004d8 <__aeabi_dmul>
 80037ce:	2301      	movs	r3, #1
 80037d0:	3701      	adds	r7, #1
 80037d2:	1064      	asrs	r4, r4, #1
 80037d4:	3608      	adds	r6, #8
 80037d6:	e76d      	b.n	80036b4 <_dtoa_r+0x3cc>
 80037d8:	2702      	movs	r7, #2
 80037da:	e770      	b.n	80036be <_dtoa_r+0x3d6>
 80037dc:	46d0      	mov	r8, sl
 80037de:	9c08      	ldr	r4, [sp, #32]
 80037e0:	e78f      	b.n	8003702 <_dtoa_r+0x41a>
 80037e2:	9903      	ldr	r1, [sp, #12]
 80037e4:	4b29      	ldr	r3, [pc, #164]	; (800388c <_dtoa_r+0x5a4>)
 80037e6:	4421      	add	r1, r4
 80037e8:	9112      	str	r1, [sp, #72]	; 0x48
 80037ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80037ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80037f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80037f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80037f8:	2900      	cmp	r1, #0
 80037fa:	d055      	beq.n	80038a8 <_dtoa_r+0x5c0>
 80037fc:	2000      	movs	r0, #0
 80037fe:	4929      	ldr	r1, [pc, #164]	; (80038a4 <_dtoa_r+0x5bc>)
 8003800:	f7fc ff94 	bl	800072c <__aeabi_ddiv>
 8003804:	463b      	mov	r3, r7
 8003806:	4632      	mov	r2, r6
 8003808:	f7fc fcae 	bl	8000168 <__aeabi_dsub>
 800380c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003810:	9f03      	ldr	r7, [sp, #12]
 8003812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003816:	f7fd f90f 	bl	8000a38 <__aeabi_d2iz>
 800381a:	4604      	mov	r4, r0
 800381c:	f7fc fdf2 	bl	8000404 <__aeabi_i2d>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003828:	f7fc fc9e 	bl	8000168 <__aeabi_dsub>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	3430      	adds	r4, #48	; 0x30
 8003832:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800383a:	f807 4b01 	strb.w	r4, [r7], #1
 800383e:	f7fd f8bd 	bl	80009bc <__aeabi_dcmplt>
 8003842:	2800      	cmp	r0, #0
 8003844:	d174      	bne.n	8003930 <_dtoa_r+0x648>
 8003846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800384a:	2000      	movs	r0, #0
 800384c:	4911      	ldr	r1, [pc, #68]	; (8003894 <_dtoa_r+0x5ac>)
 800384e:	f7fc fc8b 	bl	8000168 <__aeabi_dsub>
 8003852:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003856:	f7fd f8b1 	bl	80009bc <__aeabi_dcmplt>
 800385a:	2800      	cmp	r0, #0
 800385c:	f040 80b7 	bne.w	80039ce <_dtoa_r+0x6e6>
 8003860:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003862:	429f      	cmp	r7, r3
 8003864:	f43f af7a 	beq.w	800375c <_dtoa_r+0x474>
 8003868:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800386c:	2200      	movs	r2, #0
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <_dtoa_r+0x5b0>)
 8003870:	f7fc fe32 	bl	80004d8 <__aeabi_dmul>
 8003874:	2200      	movs	r2, #0
 8003876:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800387a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <_dtoa_r+0x5b0>)
 8003880:	f7fc fe2a 	bl	80004d8 <__aeabi_dmul>
 8003884:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003888:	e7c3      	b.n	8003812 <_dtoa_r+0x52a>
 800388a:	bf00      	nop
 800388c:	08005528 	.word	0x08005528
 8003890:	08005500 	.word	0x08005500
 8003894:	3ff00000 	.word	0x3ff00000
 8003898:	40240000 	.word	0x40240000
 800389c:	401c0000 	.word	0x401c0000
 80038a0:	40140000 	.word	0x40140000
 80038a4:	3fe00000 	.word	0x3fe00000
 80038a8:	4630      	mov	r0, r6
 80038aa:	4639      	mov	r1, r7
 80038ac:	f7fc fe14 	bl	80004d8 <__aeabi_dmul>
 80038b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80038b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80038b6:	9c03      	ldr	r4, [sp, #12]
 80038b8:	9314      	str	r3, [sp, #80]	; 0x50
 80038ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038be:	f7fd f8bb 	bl	8000a38 <__aeabi_d2iz>
 80038c2:	9015      	str	r0, [sp, #84]	; 0x54
 80038c4:	f7fc fd9e 	bl	8000404 <__aeabi_i2d>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80038d0:	f7fc fc4a 	bl	8000168 <__aeabi_dsub>
 80038d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80038d6:	4606      	mov	r6, r0
 80038d8:	3330      	adds	r3, #48	; 0x30
 80038da:	f804 3b01 	strb.w	r3, [r4], #1
 80038de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80038e0:	460f      	mov	r7, r1
 80038e2:	429c      	cmp	r4, r3
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	d124      	bne.n	8003934 <_dtoa_r+0x64c>
 80038ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80038ee:	4bb0      	ldr	r3, [pc, #704]	; (8003bb0 <_dtoa_r+0x8c8>)
 80038f0:	f7fc fc3c 	bl	800016c <__adddf3>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4630      	mov	r0, r6
 80038fa:	4639      	mov	r1, r7
 80038fc:	f7fd f87c 	bl	80009f8 <__aeabi_dcmpgt>
 8003900:	2800      	cmp	r0, #0
 8003902:	d163      	bne.n	80039cc <_dtoa_r+0x6e4>
 8003904:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003908:	2000      	movs	r0, #0
 800390a:	49a9      	ldr	r1, [pc, #676]	; (8003bb0 <_dtoa_r+0x8c8>)
 800390c:	f7fc fc2c 	bl	8000168 <__aeabi_dsub>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4630      	mov	r0, r6
 8003916:	4639      	mov	r1, r7
 8003918:	f7fd f850 	bl	80009bc <__aeabi_dcmplt>
 800391c:	2800      	cmp	r0, #0
 800391e:	f43f af1d 	beq.w	800375c <_dtoa_r+0x474>
 8003922:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003924:	1e7b      	subs	r3, r7, #1
 8003926:	9314      	str	r3, [sp, #80]	; 0x50
 8003928:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800392c:	2b30      	cmp	r3, #48	; 0x30
 800392e:	d0f8      	beq.n	8003922 <_dtoa_r+0x63a>
 8003930:	46c2      	mov	sl, r8
 8003932:	e03b      	b.n	80039ac <_dtoa_r+0x6c4>
 8003934:	4b9f      	ldr	r3, [pc, #636]	; (8003bb4 <_dtoa_r+0x8cc>)
 8003936:	f7fc fdcf 	bl	80004d8 <__aeabi_dmul>
 800393a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800393e:	e7bc      	b.n	80038ba <_dtoa_r+0x5d2>
 8003940:	9f03      	ldr	r7, [sp, #12]
 8003942:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8003946:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800394a:	4640      	mov	r0, r8
 800394c:	4649      	mov	r1, r9
 800394e:	f7fc feed 	bl	800072c <__aeabi_ddiv>
 8003952:	f7fd f871 	bl	8000a38 <__aeabi_d2iz>
 8003956:	4604      	mov	r4, r0
 8003958:	f7fc fd54 	bl	8000404 <__aeabi_i2d>
 800395c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003960:	f7fc fdba 	bl	80004d8 <__aeabi_dmul>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4640      	mov	r0, r8
 800396a:	4649      	mov	r1, r9
 800396c:	f7fc fbfc 	bl	8000168 <__aeabi_dsub>
 8003970:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003974:	f807 6b01 	strb.w	r6, [r7], #1
 8003978:	9e03      	ldr	r6, [sp, #12]
 800397a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800397e:	1bbe      	subs	r6, r7, r6
 8003980:	45b4      	cmp	ip, r6
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	d136      	bne.n	80039f6 <_dtoa_r+0x70e>
 8003988:	f7fc fbf0 	bl	800016c <__adddf3>
 800398c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003990:	4680      	mov	r8, r0
 8003992:	4689      	mov	r9, r1
 8003994:	f7fd f830 	bl	80009f8 <__aeabi_dcmpgt>
 8003998:	bb58      	cbnz	r0, 80039f2 <_dtoa_r+0x70a>
 800399a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800399e:	4640      	mov	r0, r8
 80039a0:	4649      	mov	r1, r9
 80039a2:	f7fd f801 	bl	80009a8 <__aeabi_dcmpeq>
 80039a6:	b108      	cbz	r0, 80039ac <_dtoa_r+0x6c4>
 80039a8:	07e1      	lsls	r1, r4, #31
 80039aa:	d422      	bmi.n	80039f2 <_dtoa_r+0x70a>
 80039ac:	4628      	mov	r0, r5
 80039ae:	4659      	mov	r1, fp
 80039b0:	f000 fbea 	bl	8004188 <_Bfree>
 80039b4:	2300      	movs	r3, #0
 80039b6:	703b      	strb	r3, [r7, #0]
 80039b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80039ba:	f10a 0001 	add.w	r0, sl, #1
 80039be:	6018      	str	r0, [r3, #0]
 80039c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f43f acde 	beq.w	8003384 <_dtoa_r+0x9c>
 80039c8:	601f      	str	r7, [r3, #0]
 80039ca:	e4db      	b.n	8003384 <_dtoa_r+0x9c>
 80039cc:	4627      	mov	r7, r4
 80039ce:	463b      	mov	r3, r7
 80039d0:	461f      	mov	r7, r3
 80039d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80039d6:	2a39      	cmp	r2, #57	; 0x39
 80039d8:	d107      	bne.n	80039ea <_dtoa_r+0x702>
 80039da:	9a03      	ldr	r2, [sp, #12]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1f7      	bne.n	80039d0 <_dtoa_r+0x6e8>
 80039e0:	2230      	movs	r2, #48	; 0x30
 80039e2:	9903      	ldr	r1, [sp, #12]
 80039e4:	f108 0801 	add.w	r8, r8, #1
 80039e8:	700a      	strb	r2, [r1, #0]
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	3201      	adds	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e79e      	b.n	8003930 <_dtoa_r+0x648>
 80039f2:	46d0      	mov	r8, sl
 80039f4:	e7eb      	b.n	80039ce <_dtoa_r+0x6e6>
 80039f6:	2200      	movs	r2, #0
 80039f8:	4b6e      	ldr	r3, [pc, #440]	; (8003bb4 <_dtoa_r+0x8cc>)
 80039fa:	f7fc fd6d 	bl	80004d8 <__aeabi_dmul>
 80039fe:	2200      	movs	r2, #0
 8003a00:	2300      	movs	r3, #0
 8003a02:	4680      	mov	r8, r0
 8003a04:	4689      	mov	r9, r1
 8003a06:	f7fc ffcf 	bl	80009a8 <__aeabi_dcmpeq>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d09b      	beq.n	8003946 <_dtoa_r+0x65e>
 8003a0e:	e7cd      	b.n	80039ac <_dtoa_r+0x6c4>
 8003a10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a12:	2a00      	cmp	r2, #0
 8003a14:	f000 80d0 	beq.w	8003bb8 <_dtoa_r+0x8d0>
 8003a18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a1a:	2a01      	cmp	r2, #1
 8003a1c:	f300 80ae 	bgt.w	8003b7c <_dtoa_r+0x894>
 8003a20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003a22:	2a00      	cmp	r2, #0
 8003a24:	f000 80a6 	beq.w	8003b74 <_dtoa_r+0x88c>
 8003a28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003a2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003a2e:	9f06      	ldr	r7, [sp, #24]
 8003a30:	9a06      	ldr	r2, [sp, #24]
 8003a32:	2101      	movs	r1, #1
 8003a34:	441a      	add	r2, r3
 8003a36:	9206      	str	r2, [sp, #24]
 8003a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	441a      	add	r2, r3
 8003a3e:	9209      	str	r2, [sp, #36]	; 0x24
 8003a40:	f000 fc58 	bl	80042f4 <__i2b>
 8003a44:	4606      	mov	r6, r0
 8003a46:	2f00      	cmp	r7, #0
 8003a48:	dd0c      	ble.n	8003a64 <_dtoa_r+0x77c>
 8003a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	dd09      	ble.n	8003a64 <_dtoa_r+0x77c>
 8003a50:	42bb      	cmp	r3, r7
 8003a52:	bfa8      	it	ge
 8003a54:	463b      	movge	r3, r7
 8003a56:	9a06      	ldr	r2, [sp, #24]
 8003a58:	1aff      	subs	r7, r7, r3
 8003a5a:	1ad2      	subs	r2, r2, r3
 8003a5c:	9206      	str	r2, [sp, #24]
 8003a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	9309      	str	r3, [sp, #36]	; 0x24
 8003a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a66:	b1f3      	cbz	r3, 8003aa6 <_dtoa_r+0x7be>
 8003a68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 80a8 	beq.w	8003bc0 <_dtoa_r+0x8d8>
 8003a70:	2c00      	cmp	r4, #0
 8003a72:	dd10      	ble.n	8003a96 <_dtoa_r+0x7ae>
 8003a74:	4631      	mov	r1, r6
 8003a76:	4622      	mov	r2, r4
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f000 fcf9 	bl	8004470 <__pow5mult>
 8003a7e:	465a      	mov	r2, fp
 8003a80:	4601      	mov	r1, r0
 8003a82:	4606      	mov	r6, r0
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 fc4b 	bl	8004320 <__multiply>
 8003a8a:	4680      	mov	r8, r0
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	4628      	mov	r0, r5
 8003a90:	f000 fb7a 	bl	8004188 <_Bfree>
 8003a94:	46c3      	mov	fp, r8
 8003a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a98:	1b1a      	subs	r2, r3, r4
 8003a9a:	d004      	beq.n	8003aa6 <_dtoa_r+0x7be>
 8003a9c:	4659      	mov	r1, fp
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 fce6 	bl	8004470 <__pow5mult>
 8003aa4:	4683      	mov	fp, r0
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f000 fc23 	bl	80042f4 <__i2b>
 8003aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f340 8086 	ble.w	8003bc4 <_dtoa_r+0x8dc>
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4601      	mov	r1, r0
 8003abc:	4628      	mov	r0, r5
 8003abe:	f000 fcd7 	bl	8004470 <__pow5mult>
 8003ac2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	dd7f      	ble.n	8003bca <_dtoa_r+0x8e2>
 8003aca:	f04f 0800 	mov.w	r8, #0
 8003ace:	6923      	ldr	r3, [r4, #16]
 8003ad0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003ad4:	6918      	ldr	r0, [r3, #16]
 8003ad6:	f000 fbbf 	bl	8004258 <__hi0bits>
 8003ada:	f1c0 0020 	rsb	r0, r0, #32
 8003ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ae0:	4418      	add	r0, r3
 8003ae2:	f010 001f 	ands.w	r0, r0, #31
 8003ae6:	f000 8092 	beq.w	8003c0e <_dtoa_r+0x926>
 8003aea:	f1c0 0320 	rsb	r3, r0, #32
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	f340 808a 	ble.w	8003c08 <_dtoa_r+0x920>
 8003af4:	f1c0 001c 	rsb	r0, r0, #28
 8003af8:	9b06      	ldr	r3, [sp, #24]
 8003afa:	4407      	add	r7, r0
 8003afc:	4403      	add	r3, r0
 8003afe:	9306      	str	r3, [sp, #24]
 8003b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b02:	4403      	add	r3, r0
 8003b04:	9309      	str	r3, [sp, #36]	; 0x24
 8003b06:	9b06      	ldr	r3, [sp, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	dd05      	ble.n	8003b18 <_dtoa_r+0x830>
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	461a      	mov	r2, r3
 8003b10:	4628      	mov	r0, r5
 8003b12:	f000 fd07 	bl	8004524 <__lshift>
 8003b16:	4683      	mov	fp, r0
 8003b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	dd05      	ble.n	8003b2a <_dtoa_r+0x842>
 8003b1e:	4621      	mov	r1, r4
 8003b20:	461a      	mov	r2, r3
 8003b22:	4628      	mov	r0, r5
 8003b24:	f000 fcfe 	bl	8004524 <__lshift>
 8003b28:	4604      	mov	r4, r0
 8003b2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d070      	beq.n	8003c12 <_dtoa_r+0x92a>
 8003b30:	4621      	mov	r1, r4
 8003b32:	4658      	mov	r0, fp
 8003b34:	f000 fd66 	bl	8004604 <__mcmp>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	da6a      	bge.n	8003c12 <_dtoa_r+0x92a>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	4659      	mov	r1, fp
 8003b40:	220a      	movs	r2, #10
 8003b42:	4628      	mov	r0, r5
 8003b44:	f000 fb42 	bl	80041cc <__multadd>
 8003b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b4a:	4683      	mov	fp, r0
 8003b4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8194 	beq.w	8003e7e <_dtoa_r+0xb96>
 8003b56:	4631      	mov	r1, r6
 8003b58:	2300      	movs	r3, #0
 8003b5a:	220a      	movs	r2, #10
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f000 fb35 	bl	80041cc <__multadd>
 8003b62:	f1b9 0f00 	cmp.w	r9, #0
 8003b66:	4606      	mov	r6, r0
 8003b68:	f300 8093 	bgt.w	8003c92 <_dtoa_r+0x9aa>
 8003b6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	dc57      	bgt.n	8003c22 <_dtoa_r+0x93a>
 8003b72:	e08e      	b.n	8003c92 <_dtoa_r+0x9aa>
 8003b74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003b76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003b7a:	e757      	b.n	8003a2c <_dtoa_r+0x744>
 8003b7c:	9b08      	ldr	r3, [sp, #32]
 8003b7e:	1e5c      	subs	r4, r3, #1
 8003b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b82:	42a3      	cmp	r3, r4
 8003b84:	bfb7      	itett	lt
 8003b86:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003b88:	1b1c      	subge	r4, r3, r4
 8003b8a:	1ae2      	sublt	r2, r4, r3
 8003b8c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003b8e:	bfbe      	ittt	lt
 8003b90:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003b92:	189b      	addlt	r3, r3, r2
 8003b94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003b96:	9b08      	ldr	r3, [sp, #32]
 8003b98:	bfb8      	it	lt
 8003b9a:	2400      	movlt	r4, #0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bfbb      	ittet	lt
 8003ba0:	9b06      	ldrlt	r3, [sp, #24]
 8003ba2:	9a08      	ldrlt	r2, [sp, #32]
 8003ba4:	9f06      	ldrge	r7, [sp, #24]
 8003ba6:	1a9f      	sublt	r7, r3, r2
 8003ba8:	bfac      	ite	ge
 8003baa:	9b08      	ldrge	r3, [sp, #32]
 8003bac:	2300      	movlt	r3, #0
 8003bae:	e73f      	b.n	8003a30 <_dtoa_r+0x748>
 8003bb0:	3fe00000 	.word	0x3fe00000
 8003bb4:	40240000 	.word	0x40240000
 8003bb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003bba:	9f06      	ldr	r7, [sp, #24]
 8003bbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003bbe:	e742      	b.n	8003a46 <_dtoa_r+0x75e>
 8003bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bc2:	e76b      	b.n	8003a9c <_dtoa_r+0x7b4>
 8003bc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	dc19      	bgt.n	8003bfe <_dtoa_r+0x916>
 8003bca:	9b04      	ldr	r3, [sp, #16]
 8003bcc:	b9bb      	cbnz	r3, 8003bfe <_dtoa_r+0x916>
 8003bce:	9b05      	ldr	r3, [sp, #20]
 8003bd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd4:	b99b      	cbnz	r3, 8003bfe <_dtoa_r+0x916>
 8003bd6:	9b05      	ldr	r3, [sp, #20]
 8003bd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bdc:	0d1b      	lsrs	r3, r3, #20
 8003bde:	051b      	lsls	r3, r3, #20
 8003be0:	b183      	cbz	r3, 8003c04 <_dtoa_r+0x91c>
 8003be2:	f04f 0801 	mov.w	r8, #1
 8003be6:	9b06      	ldr	r3, [sp, #24]
 8003be8:	3301      	adds	r3, #1
 8003bea:	9306      	str	r3, [sp, #24]
 8003bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bee:	3301      	adds	r3, #1
 8003bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f47f af6a 	bne.w	8003ace <_dtoa_r+0x7e6>
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	e76f      	b.n	8003ade <_dtoa_r+0x7f6>
 8003bfe:	f04f 0800 	mov.w	r8, #0
 8003c02:	e7f6      	b.n	8003bf2 <_dtoa_r+0x90a>
 8003c04:	4698      	mov	r8, r3
 8003c06:	e7f4      	b.n	8003bf2 <_dtoa_r+0x90a>
 8003c08:	f43f af7d 	beq.w	8003b06 <_dtoa_r+0x81e>
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	301c      	adds	r0, #28
 8003c10:	e772      	b.n	8003af8 <_dtoa_r+0x810>
 8003c12:	9b08      	ldr	r3, [sp, #32]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	dc36      	bgt.n	8003c86 <_dtoa_r+0x99e>
 8003c18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	dd33      	ble.n	8003c86 <_dtoa_r+0x99e>
 8003c1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c22:	f1b9 0f00 	cmp.w	r9, #0
 8003c26:	d10d      	bne.n	8003c44 <_dtoa_r+0x95c>
 8003c28:	4621      	mov	r1, r4
 8003c2a:	464b      	mov	r3, r9
 8003c2c:	2205      	movs	r2, #5
 8003c2e:	4628      	mov	r0, r5
 8003c30:	f000 facc 	bl	80041cc <__multadd>
 8003c34:	4601      	mov	r1, r0
 8003c36:	4604      	mov	r4, r0
 8003c38:	4658      	mov	r0, fp
 8003c3a:	f000 fce3 	bl	8004604 <__mcmp>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	f73f adb8 	bgt.w	80037b4 <_dtoa_r+0x4cc>
 8003c44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003c46:	9f03      	ldr	r7, [sp, #12]
 8003c48:	ea6f 0a03 	mvn.w	sl, r3
 8003c4c:	f04f 0800 	mov.w	r8, #0
 8003c50:	4621      	mov	r1, r4
 8003c52:	4628      	mov	r0, r5
 8003c54:	f000 fa98 	bl	8004188 <_Bfree>
 8003c58:	2e00      	cmp	r6, #0
 8003c5a:	f43f aea7 	beq.w	80039ac <_dtoa_r+0x6c4>
 8003c5e:	f1b8 0f00 	cmp.w	r8, #0
 8003c62:	d005      	beq.n	8003c70 <_dtoa_r+0x988>
 8003c64:	45b0      	cmp	r8, r6
 8003c66:	d003      	beq.n	8003c70 <_dtoa_r+0x988>
 8003c68:	4641      	mov	r1, r8
 8003c6a:	4628      	mov	r0, r5
 8003c6c:	f000 fa8c 	bl	8004188 <_Bfree>
 8003c70:	4631      	mov	r1, r6
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 fa88 	bl	8004188 <_Bfree>
 8003c78:	e698      	b.n	80039ac <_dtoa_r+0x6c4>
 8003c7a:	2400      	movs	r4, #0
 8003c7c:	4626      	mov	r6, r4
 8003c7e:	e7e1      	b.n	8003c44 <_dtoa_r+0x95c>
 8003c80:	46c2      	mov	sl, r8
 8003c82:	4626      	mov	r6, r4
 8003c84:	e596      	b.n	80037b4 <_dtoa_r+0x4cc>
 8003c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80fd 	beq.w	8003e8c <_dtoa_r+0xba4>
 8003c92:	2f00      	cmp	r7, #0
 8003c94:	dd05      	ble.n	8003ca2 <_dtoa_r+0x9ba>
 8003c96:	4631      	mov	r1, r6
 8003c98:	463a      	mov	r2, r7
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	f000 fc42 	bl	8004524 <__lshift>
 8003ca0:	4606      	mov	r6, r0
 8003ca2:	f1b8 0f00 	cmp.w	r8, #0
 8003ca6:	d05c      	beq.n	8003d62 <_dtoa_r+0xa7a>
 8003ca8:	4628      	mov	r0, r5
 8003caa:	6871      	ldr	r1, [r6, #4]
 8003cac:	f000 fa2c 	bl	8004108 <_Balloc>
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	b928      	cbnz	r0, 8003cc0 <_dtoa_r+0x9d8>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003cba:	4b7f      	ldr	r3, [pc, #508]	; (8003eb8 <_dtoa_r+0xbd0>)
 8003cbc:	f7ff bb28 	b.w	8003310 <_dtoa_r+0x28>
 8003cc0:	6932      	ldr	r2, [r6, #16]
 8003cc2:	f106 010c 	add.w	r1, r6, #12
 8003cc6:	3202      	adds	r2, #2
 8003cc8:	0092      	lsls	r2, r2, #2
 8003cca:	300c      	adds	r0, #12
 8003ccc:	f000 fa0e 	bl	80040ec <memcpy>
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	4639      	mov	r1, r7
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 fc25 	bl	8004524 <__lshift>
 8003cda:	46b0      	mov	r8, r6
 8003cdc:	4606      	mov	r6, r0
 8003cde:	9b03      	ldr	r3, [sp, #12]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	9308      	str	r3, [sp, #32]
 8003ce4:	9b03      	ldr	r3, [sp, #12]
 8003ce6:	444b      	add	r3, r9
 8003ce8:	930a      	str	r3, [sp, #40]	; 0x28
 8003cea:	9b04      	ldr	r3, [sp, #16]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8003cf2:	9b08      	ldr	r3, [sp, #32]
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	4658      	mov	r0, fp
 8003cfa:	9304      	str	r3, [sp, #16]
 8003cfc:	f7ff fa66 	bl	80031cc <quorem>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4641      	mov	r1, r8
 8003d04:	3330      	adds	r3, #48	; 0x30
 8003d06:	9006      	str	r0, [sp, #24]
 8003d08:	4658      	mov	r0, fp
 8003d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d0c:	f000 fc7a 	bl	8004604 <__mcmp>
 8003d10:	4632      	mov	r2, r6
 8003d12:	4681      	mov	r9, r0
 8003d14:	4621      	mov	r1, r4
 8003d16:	4628      	mov	r0, r5
 8003d18:	f000 fc90 	bl	800463c <__mdiff>
 8003d1c:	68c2      	ldr	r2, [r0, #12]
 8003d1e:	4607      	mov	r7, r0
 8003d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d22:	bb02      	cbnz	r2, 8003d66 <_dtoa_r+0xa7e>
 8003d24:	4601      	mov	r1, r0
 8003d26:	4658      	mov	r0, fp
 8003d28:	f000 fc6c 	bl	8004604 <__mcmp>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d30:	4639      	mov	r1, r7
 8003d32:	4628      	mov	r0, r5
 8003d34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8003d38:	f000 fa26 	bl	8004188 <_Bfree>
 8003d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d40:	9f08      	ldr	r7, [sp, #32]
 8003d42:	ea43 0102 	orr.w	r1, r3, r2
 8003d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d4c:	d10d      	bne.n	8003d6a <_dtoa_r+0xa82>
 8003d4e:	2b39      	cmp	r3, #57	; 0x39
 8003d50:	d029      	beq.n	8003da6 <_dtoa_r+0xabe>
 8003d52:	f1b9 0f00 	cmp.w	r9, #0
 8003d56:	dd01      	ble.n	8003d5c <_dtoa_r+0xa74>
 8003d58:	9b06      	ldr	r3, [sp, #24]
 8003d5a:	3331      	adds	r3, #49	; 0x31
 8003d5c:	9a04      	ldr	r2, [sp, #16]
 8003d5e:	7013      	strb	r3, [r2, #0]
 8003d60:	e776      	b.n	8003c50 <_dtoa_r+0x968>
 8003d62:	4630      	mov	r0, r6
 8003d64:	e7b9      	b.n	8003cda <_dtoa_r+0x9f2>
 8003d66:	2201      	movs	r2, #1
 8003d68:	e7e2      	b.n	8003d30 <_dtoa_r+0xa48>
 8003d6a:	f1b9 0f00 	cmp.w	r9, #0
 8003d6e:	db06      	blt.n	8003d7e <_dtoa_r+0xa96>
 8003d70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8003d72:	ea41 0909 	orr.w	r9, r1, r9
 8003d76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d78:	ea59 0101 	orrs.w	r1, r9, r1
 8003d7c:	d120      	bne.n	8003dc0 <_dtoa_r+0xad8>
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	ddec      	ble.n	8003d5c <_dtoa_r+0xa74>
 8003d82:	4659      	mov	r1, fp
 8003d84:	2201      	movs	r2, #1
 8003d86:	4628      	mov	r0, r5
 8003d88:	9308      	str	r3, [sp, #32]
 8003d8a:	f000 fbcb 	bl	8004524 <__lshift>
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4683      	mov	fp, r0
 8003d92:	f000 fc37 	bl	8004604 <__mcmp>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	9b08      	ldr	r3, [sp, #32]
 8003d9a:	dc02      	bgt.n	8003da2 <_dtoa_r+0xaba>
 8003d9c:	d1de      	bne.n	8003d5c <_dtoa_r+0xa74>
 8003d9e:	07da      	lsls	r2, r3, #31
 8003da0:	d5dc      	bpl.n	8003d5c <_dtoa_r+0xa74>
 8003da2:	2b39      	cmp	r3, #57	; 0x39
 8003da4:	d1d8      	bne.n	8003d58 <_dtoa_r+0xa70>
 8003da6:	2339      	movs	r3, #57	; 0x39
 8003da8:	9a04      	ldr	r2, [sp, #16]
 8003daa:	7013      	strb	r3, [r2, #0]
 8003dac:	463b      	mov	r3, r7
 8003dae:	461f      	mov	r7, r3
 8003db0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	2a39      	cmp	r2, #57	; 0x39
 8003db8:	d050      	beq.n	8003e5c <_dtoa_r+0xb74>
 8003dba:	3201      	adds	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e747      	b.n	8003c50 <_dtoa_r+0x968>
 8003dc0:	2a00      	cmp	r2, #0
 8003dc2:	dd03      	ble.n	8003dcc <_dtoa_r+0xae4>
 8003dc4:	2b39      	cmp	r3, #57	; 0x39
 8003dc6:	d0ee      	beq.n	8003da6 <_dtoa_r+0xabe>
 8003dc8:	3301      	adds	r3, #1
 8003dca:	e7c7      	b.n	8003d5c <_dtoa_r+0xa74>
 8003dcc:	9a08      	ldr	r2, [sp, #32]
 8003dce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003dd0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003dd4:	428a      	cmp	r2, r1
 8003dd6:	d02a      	beq.n	8003e2e <_dtoa_r+0xb46>
 8003dd8:	4659      	mov	r1, fp
 8003dda:	2300      	movs	r3, #0
 8003ddc:	220a      	movs	r2, #10
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 f9f4 	bl	80041cc <__multadd>
 8003de4:	45b0      	cmp	r8, r6
 8003de6:	4683      	mov	fp, r0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	f04f 020a 	mov.w	r2, #10
 8003df0:	4641      	mov	r1, r8
 8003df2:	4628      	mov	r0, r5
 8003df4:	d107      	bne.n	8003e06 <_dtoa_r+0xb1e>
 8003df6:	f000 f9e9 	bl	80041cc <__multadd>
 8003dfa:	4680      	mov	r8, r0
 8003dfc:	4606      	mov	r6, r0
 8003dfe:	9b08      	ldr	r3, [sp, #32]
 8003e00:	3301      	adds	r3, #1
 8003e02:	9308      	str	r3, [sp, #32]
 8003e04:	e775      	b.n	8003cf2 <_dtoa_r+0xa0a>
 8003e06:	f000 f9e1 	bl	80041cc <__multadd>
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4680      	mov	r8, r0
 8003e0e:	2300      	movs	r3, #0
 8003e10:	220a      	movs	r2, #10
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 f9da 	bl	80041cc <__multadd>
 8003e18:	4606      	mov	r6, r0
 8003e1a:	e7f0      	b.n	8003dfe <_dtoa_r+0xb16>
 8003e1c:	f1b9 0f00 	cmp.w	r9, #0
 8003e20:	bfcc      	ite	gt
 8003e22:	464f      	movgt	r7, r9
 8003e24:	2701      	movle	r7, #1
 8003e26:	f04f 0800 	mov.w	r8, #0
 8003e2a:	9a03      	ldr	r2, [sp, #12]
 8003e2c:	4417      	add	r7, r2
 8003e2e:	4659      	mov	r1, fp
 8003e30:	2201      	movs	r2, #1
 8003e32:	4628      	mov	r0, r5
 8003e34:	9308      	str	r3, [sp, #32]
 8003e36:	f000 fb75 	bl	8004524 <__lshift>
 8003e3a:	4621      	mov	r1, r4
 8003e3c:	4683      	mov	fp, r0
 8003e3e:	f000 fbe1 	bl	8004604 <__mcmp>
 8003e42:	2800      	cmp	r0, #0
 8003e44:	dcb2      	bgt.n	8003dac <_dtoa_r+0xac4>
 8003e46:	d102      	bne.n	8003e4e <_dtoa_r+0xb66>
 8003e48:	9b08      	ldr	r3, [sp, #32]
 8003e4a:	07db      	lsls	r3, r3, #31
 8003e4c:	d4ae      	bmi.n	8003dac <_dtoa_r+0xac4>
 8003e4e:	463b      	mov	r3, r7
 8003e50:	461f      	mov	r7, r3
 8003e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003e56:	2a30      	cmp	r2, #48	; 0x30
 8003e58:	d0fa      	beq.n	8003e50 <_dtoa_r+0xb68>
 8003e5a:	e6f9      	b.n	8003c50 <_dtoa_r+0x968>
 8003e5c:	9a03      	ldr	r2, [sp, #12]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d1a5      	bne.n	8003dae <_dtoa_r+0xac6>
 8003e62:	2331      	movs	r3, #49	; 0x31
 8003e64:	f10a 0a01 	add.w	sl, sl, #1
 8003e68:	e779      	b.n	8003d5e <_dtoa_r+0xa76>
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <_dtoa_r+0xbd4>)
 8003e6c:	f7ff baa8 	b.w	80033c0 <_dtoa_r+0xd8>
 8003e70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f47f aa81 	bne.w	800337a <_dtoa_r+0x92>
 8003e78:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <_dtoa_r+0xbd8>)
 8003e7a:	f7ff baa1 	b.w	80033c0 <_dtoa_r+0xd8>
 8003e7e:	f1b9 0f00 	cmp.w	r9, #0
 8003e82:	dc03      	bgt.n	8003e8c <_dtoa_r+0xba4>
 8003e84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	f73f aecb 	bgt.w	8003c22 <_dtoa_r+0x93a>
 8003e8c:	9f03      	ldr	r7, [sp, #12]
 8003e8e:	4621      	mov	r1, r4
 8003e90:	4658      	mov	r0, fp
 8003e92:	f7ff f99b 	bl	80031cc <quorem>
 8003e96:	9a03      	ldr	r2, [sp, #12]
 8003e98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003e9c:	f807 3b01 	strb.w	r3, [r7], #1
 8003ea0:	1aba      	subs	r2, r7, r2
 8003ea2:	4591      	cmp	r9, r2
 8003ea4:	ddba      	ble.n	8003e1c <_dtoa_r+0xb34>
 8003ea6:	4659      	mov	r1, fp
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	220a      	movs	r2, #10
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 f98d 	bl	80041cc <__multadd>
 8003eb2:	4683      	mov	fp, r0
 8003eb4:	e7eb      	b.n	8003e8e <_dtoa_r+0xba6>
 8003eb6:	bf00      	nop
 8003eb8:	0800542f 	.word	0x0800542f
 8003ebc:	0800538c 	.word	0x0800538c
 8003ec0:	080053b0 	.word	0x080053b0

08003ec4 <std>:
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	b510      	push	{r4, lr}
 8003ec8:	4604      	mov	r4, r0
 8003eca:	e9c0 3300 	strd	r3, r3, [r0]
 8003ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ed2:	6083      	str	r3, [r0, #8]
 8003ed4:	8181      	strh	r1, [r0, #12]
 8003ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ed8:	81c2      	strh	r2, [r0, #14]
 8003eda:	6183      	str	r3, [r0, #24]
 8003edc:	4619      	mov	r1, r3
 8003ede:	2208      	movs	r2, #8
 8003ee0:	305c      	adds	r0, #92	; 0x5c
 8003ee2:	f7fe fcf3 	bl	80028cc <memset>
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <std+0x38>)
 8003ee8:	6224      	str	r4, [r4, #32]
 8003eea:	6263      	str	r3, [r4, #36]	; 0x24
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <std+0x3c>)
 8003eee:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <std+0x40>)
 8003ef2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <std+0x44>)
 8003ef6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	bf00      	nop
 8003efc:	08004cbd 	.word	0x08004cbd
 8003f00:	08004cdf 	.word	0x08004cdf
 8003f04:	08004d17 	.word	0x08004d17
 8003f08:	08004d3b 	.word	0x08004d3b

08003f0c <_cleanup_r>:
 8003f0c:	4901      	ldr	r1, [pc, #4]	; (8003f14 <_cleanup_r+0x8>)
 8003f0e:	f000 b8af 	b.w	8004070 <_fwalk_reent>
 8003f12:	bf00      	nop
 8003f14:	08005049 	.word	0x08005049

08003f18 <__sfmoreglue>:
 8003f18:	2268      	movs	r2, #104	; 0x68
 8003f1a:	b570      	push	{r4, r5, r6, lr}
 8003f1c:	1e4d      	subs	r5, r1, #1
 8003f1e:	4355      	muls	r5, r2
 8003f20:	460e      	mov	r6, r1
 8003f22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f26:	f000 fced 	bl	8004904 <_malloc_r>
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	b140      	cbz	r0, 8003f40 <__sfmoreglue+0x28>
 8003f2e:	2100      	movs	r1, #0
 8003f30:	e9c0 1600 	strd	r1, r6, [r0]
 8003f34:	300c      	adds	r0, #12
 8003f36:	60a0      	str	r0, [r4, #8]
 8003f38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f3c:	f7fe fcc6 	bl	80028cc <memset>
 8003f40:	4620      	mov	r0, r4
 8003f42:	bd70      	pop	{r4, r5, r6, pc}

08003f44 <__sfp_lock_acquire>:
 8003f44:	4801      	ldr	r0, [pc, #4]	; (8003f4c <__sfp_lock_acquire+0x8>)
 8003f46:	f000 b8b8 	b.w	80040ba <__retarget_lock_acquire_recursive>
 8003f4a:	bf00      	nop
 8003f4c:	20000299 	.word	0x20000299

08003f50 <__sfp_lock_release>:
 8003f50:	4801      	ldr	r0, [pc, #4]	; (8003f58 <__sfp_lock_release+0x8>)
 8003f52:	f000 b8b3 	b.w	80040bc <__retarget_lock_release_recursive>
 8003f56:	bf00      	nop
 8003f58:	20000299 	.word	0x20000299

08003f5c <__sinit_lock_acquire>:
 8003f5c:	4801      	ldr	r0, [pc, #4]	; (8003f64 <__sinit_lock_acquire+0x8>)
 8003f5e:	f000 b8ac 	b.w	80040ba <__retarget_lock_acquire_recursive>
 8003f62:	bf00      	nop
 8003f64:	2000029a 	.word	0x2000029a

08003f68 <__sinit_lock_release>:
 8003f68:	4801      	ldr	r0, [pc, #4]	; (8003f70 <__sinit_lock_release+0x8>)
 8003f6a:	f000 b8a7 	b.w	80040bc <__retarget_lock_release_recursive>
 8003f6e:	bf00      	nop
 8003f70:	2000029a 	.word	0x2000029a

08003f74 <__sinit>:
 8003f74:	b510      	push	{r4, lr}
 8003f76:	4604      	mov	r4, r0
 8003f78:	f7ff fff0 	bl	8003f5c <__sinit_lock_acquire>
 8003f7c:	69a3      	ldr	r3, [r4, #24]
 8003f7e:	b11b      	cbz	r3, 8003f88 <__sinit+0x14>
 8003f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f84:	f7ff bff0 	b.w	8003f68 <__sinit_lock_release>
 8003f88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f8c:	6523      	str	r3, [r4, #80]	; 0x50
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <__sinit+0x68>)
 8003f90:	4a13      	ldr	r2, [pc, #76]	; (8003fe0 <__sinit+0x6c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f96:	42a3      	cmp	r3, r4
 8003f98:	bf08      	it	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	bf08      	it	eq
 8003fa0:	61a3      	streq	r3, [r4, #24]
 8003fa2:	f000 f81f 	bl	8003fe4 <__sfp>
 8003fa6:	6060      	str	r0, [r4, #4]
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 f81b 	bl	8003fe4 <__sfp>
 8003fae:	60a0      	str	r0, [r4, #8]
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	f000 f817 	bl	8003fe4 <__sfp>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2104      	movs	r1, #4
 8003fba:	60e0      	str	r0, [r4, #12]
 8003fbc:	6860      	ldr	r0, [r4, #4]
 8003fbe:	f7ff ff81 	bl	8003ec4 <std>
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	2109      	movs	r1, #9
 8003fc6:	68a0      	ldr	r0, [r4, #8]
 8003fc8:	f7ff ff7c 	bl	8003ec4 <std>
 8003fcc:	2202      	movs	r2, #2
 8003fce:	2112      	movs	r1, #18
 8003fd0:	68e0      	ldr	r0, [r4, #12]
 8003fd2:	f7ff ff77 	bl	8003ec4 <std>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61a3      	str	r3, [r4, #24]
 8003fda:	e7d1      	b.n	8003f80 <__sinit+0xc>
 8003fdc:	08005378 	.word	0x08005378
 8003fe0:	08003f0d 	.word	0x08003f0d

08003fe4 <__sfp>:
 8003fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe6:	4607      	mov	r7, r0
 8003fe8:	f7ff ffac 	bl	8003f44 <__sfp_lock_acquire>
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <__sfp+0x84>)
 8003fee:	681e      	ldr	r6, [r3, #0]
 8003ff0:	69b3      	ldr	r3, [r6, #24]
 8003ff2:	b913      	cbnz	r3, 8003ffa <__sfp+0x16>
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f7ff ffbd 	bl	8003f74 <__sinit>
 8003ffa:	3648      	adds	r6, #72	; 0x48
 8003ffc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004000:	3b01      	subs	r3, #1
 8004002:	d503      	bpl.n	800400c <__sfp+0x28>
 8004004:	6833      	ldr	r3, [r6, #0]
 8004006:	b30b      	cbz	r3, 800404c <__sfp+0x68>
 8004008:	6836      	ldr	r6, [r6, #0]
 800400a:	e7f7      	b.n	8003ffc <__sfp+0x18>
 800400c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004010:	b9d5      	cbnz	r5, 8004048 <__sfp+0x64>
 8004012:	4b16      	ldr	r3, [pc, #88]	; (800406c <__sfp+0x88>)
 8004014:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004018:	60e3      	str	r3, [r4, #12]
 800401a:	6665      	str	r5, [r4, #100]	; 0x64
 800401c:	f000 f84c 	bl	80040b8 <__retarget_lock_init_recursive>
 8004020:	f7ff ff96 	bl	8003f50 <__sfp_lock_release>
 8004024:	2208      	movs	r2, #8
 8004026:	4629      	mov	r1, r5
 8004028:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800402c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004030:	6025      	str	r5, [r4, #0]
 8004032:	61a5      	str	r5, [r4, #24]
 8004034:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004038:	f7fe fc48 	bl	80028cc <memset>
 800403c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004040:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004044:	4620      	mov	r0, r4
 8004046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004048:	3468      	adds	r4, #104	; 0x68
 800404a:	e7d9      	b.n	8004000 <__sfp+0x1c>
 800404c:	2104      	movs	r1, #4
 800404e:	4638      	mov	r0, r7
 8004050:	f7ff ff62 	bl	8003f18 <__sfmoreglue>
 8004054:	4604      	mov	r4, r0
 8004056:	6030      	str	r0, [r6, #0]
 8004058:	2800      	cmp	r0, #0
 800405a:	d1d5      	bne.n	8004008 <__sfp+0x24>
 800405c:	f7ff ff78 	bl	8003f50 <__sfp_lock_release>
 8004060:	230c      	movs	r3, #12
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	e7ee      	b.n	8004044 <__sfp+0x60>
 8004066:	bf00      	nop
 8004068:	08005378 	.word	0x08005378
 800406c:	ffff0001 	.word	0xffff0001

08004070 <_fwalk_reent>:
 8004070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004074:	4606      	mov	r6, r0
 8004076:	4688      	mov	r8, r1
 8004078:	2700      	movs	r7, #0
 800407a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800407e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004082:	f1b9 0901 	subs.w	r9, r9, #1
 8004086:	d505      	bpl.n	8004094 <_fwalk_reent+0x24>
 8004088:	6824      	ldr	r4, [r4, #0]
 800408a:	2c00      	cmp	r4, #0
 800408c:	d1f7      	bne.n	800407e <_fwalk_reent+0xe>
 800408e:	4638      	mov	r0, r7
 8004090:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004094:	89ab      	ldrh	r3, [r5, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d907      	bls.n	80040aa <_fwalk_reent+0x3a>
 800409a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800409e:	3301      	adds	r3, #1
 80040a0:	d003      	beq.n	80040aa <_fwalk_reent+0x3a>
 80040a2:	4629      	mov	r1, r5
 80040a4:	4630      	mov	r0, r6
 80040a6:	47c0      	blx	r8
 80040a8:	4307      	orrs	r7, r0
 80040aa:	3568      	adds	r5, #104	; 0x68
 80040ac:	e7e9      	b.n	8004082 <_fwalk_reent+0x12>
	...

080040b0 <_localeconv_r>:
 80040b0:	4800      	ldr	r0, [pc, #0]	; (80040b4 <_localeconv_r+0x4>)
 80040b2:	4770      	bx	lr
 80040b4:	20000160 	.word	0x20000160

080040b8 <__retarget_lock_init_recursive>:
 80040b8:	4770      	bx	lr

080040ba <__retarget_lock_acquire_recursive>:
 80040ba:	4770      	bx	lr

080040bc <__retarget_lock_release_recursive>:
 80040bc:	4770      	bx	lr
	...

080040c0 <malloc>:
 80040c0:	4b02      	ldr	r3, [pc, #8]	; (80040cc <malloc+0xc>)
 80040c2:	4601      	mov	r1, r0
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	f000 bc1d 	b.w	8004904 <_malloc_r>
 80040ca:	bf00      	nop
 80040cc:	2000000c 	.word	0x2000000c

080040d0 <memchr>:
 80040d0:	4603      	mov	r3, r0
 80040d2:	b510      	push	{r4, lr}
 80040d4:	b2c9      	uxtb	r1, r1
 80040d6:	4402      	add	r2, r0
 80040d8:	4293      	cmp	r3, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	d101      	bne.n	80040e2 <memchr+0x12>
 80040de:	2000      	movs	r0, #0
 80040e0:	e003      	b.n	80040ea <memchr+0x1a>
 80040e2:	7804      	ldrb	r4, [r0, #0]
 80040e4:	3301      	adds	r3, #1
 80040e6:	428c      	cmp	r4, r1
 80040e8:	d1f6      	bne.n	80040d8 <memchr+0x8>
 80040ea:	bd10      	pop	{r4, pc}

080040ec <memcpy>:
 80040ec:	440a      	add	r2, r1
 80040ee:	4291      	cmp	r1, r2
 80040f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80040f4:	d100      	bne.n	80040f8 <memcpy+0xc>
 80040f6:	4770      	bx	lr
 80040f8:	b510      	push	{r4, lr}
 80040fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040fe:	4291      	cmp	r1, r2
 8004100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004104:	d1f9      	bne.n	80040fa <memcpy+0xe>
 8004106:	bd10      	pop	{r4, pc}

08004108 <_Balloc>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800410c:	4604      	mov	r4, r0
 800410e:	460d      	mov	r5, r1
 8004110:	b976      	cbnz	r6, 8004130 <_Balloc+0x28>
 8004112:	2010      	movs	r0, #16
 8004114:	f7ff ffd4 	bl	80040c0 <malloc>
 8004118:	4602      	mov	r2, r0
 800411a:	6260      	str	r0, [r4, #36]	; 0x24
 800411c:	b920      	cbnz	r0, 8004128 <_Balloc+0x20>
 800411e:	2166      	movs	r1, #102	; 0x66
 8004120:	4b17      	ldr	r3, [pc, #92]	; (8004180 <_Balloc+0x78>)
 8004122:	4818      	ldr	r0, [pc, #96]	; (8004184 <_Balloc+0x7c>)
 8004124:	f000 fee0 	bl	8004ee8 <__assert_func>
 8004128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800412c:	6006      	str	r6, [r0, #0]
 800412e:	60c6      	str	r6, [r0, #12]
 8004130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004132:	68f3      	ldr	r3, [r6, #12]
 8004134:	b183      	cbz	r3, 8004158 <_Balloc+0x50>
 8004136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800413e:	b9b8      	cbnz	r0, 8004170 <_Balloc+0x68>
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f605 	lsl.w	r6, r1, r5
 8004146:	1d72      	adds	r2, r6, #5
 8004148:	4620      	mov	r0, r4
 800414a:	0092      	lsls	r2, r2, #2
 800414c:	f000 fb5e 	bl	800480c <_calloc_r>
 8004150:	b160      	cbz	r0, 800416c <_Balloc+0x64>
 8004152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004156:	e00e      	b.n	8004176 <_Balloc+0x6e>
 8004158:	2221      	movs	r2, #33	; 0x21
 800415a:	2104      	movs	r1, #4
 800415c:	4620      	mov	r0, r4
 800415e:	f000 fb55 	bl	800480c <_calloc_r>
 8004162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004164:	60f0      	str	r0, [r6, #12]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e4      	bne.n	8004136 <_Balloc+0x2e>
 800416c:	2000      	movs	r0, #0
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	6802      	ldr	r2, [r0, #0]
 8004172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004176:	2300      	movs	r3, #0
 8004178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800417c:	e7f7      	b.n	800416e <_Balloc+0x66>
 800417e:	bf00      	nop
 8004180:	080053bd 	.word	0x080053bd
 8004184:	080054a0 	.word	0x080054a0

08004188 <_Bfree>:
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800418c:	4605      	mov	r5, r0
 800418e:	460c      	mov	r4, r1
 8004190:	b976      	cbnz	r6, 80041b0 <_Bfree+0x28>
 8004192:	2010      	movs	r0, #16
 8004194:	f7ff ff94 	bl	80040c0 <malloc>
 8004198:	4602      	mov	r2, r0
 800419a:	6268      	str	r0, [r5, #36]	; 0x24
 800419c:	b920      	cbnz	r0, 80041a8 <_Bfree+0x20>
 800419e:	218a      	movs	r1, #138	; 0x8a
 80041a0:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <_Bfree+0x3c>)
 80041a2:	4809      	ldr	r0, [pc, #36]	; (80041c8 <_Bfree+0x40>)
 80041a4:	f000 fea0 	bl	8004ee8 <__assert_func>
 80041a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80041ac:	6006      	str	r6, [r0, #0]
 80041ae:	60c6      	str	r6, [r0, #12]
 80041b0:	b13c      	cbz	r4, 80041c2 <_Bfree+0x3a>
 80041b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80041b4:	6862      	ldr	r2, [r4, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041bc:	6021      	str	r1, [r4, #0]
 80041be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80041c2:	bd70      	pop	{r4, r5, r6, pc}
 80041c4:	080053bd 	.word	0x080053bd
 80041c8:	080054a0 	.word	0x080054a0

080041cc <__multadd>:
 80041cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d0:	4607      	mov	r7, r0
 80041d2:	460c      	mov	r4, r1
 80041d4:	461e      	mov	r6, r3
 80041d6:	2000      	movs	r0, #0
 80041d8:	690d      	ldr	r5, [r1, #16]
 80041da:	f101 0c14 	add.w	ip, r1, #20
 80041de:	f8dc 3000 	ldr.w	r3, [ip]
 80041e2:	3001      	adds	r0, #1
 80041e4:	b299      	uxth	r1, r3
 80041e6:	fb02 6101 	mla	r1, r2, r1, r6
 80041ea:	0c1e      	lsrs	r6, r3, #16
 80041ec:	0c0b      	lsrs	r3, r1, #16
 80041ee:	fb02 3306 	mla	r3, r2, r6, r3
 80041f2:	b289      	uxth	r1, r1
 80041f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80041f8:	4285      	cmp	r5, r0
 80041fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80041fe:	f84c 1b04 	str.w	r1, [ip], #4
 8004202:	dcec      	bgt.n	80041de <__multadd+0x12>
 8004204:	b30e      	cbz	r6, 800424a <__multadd+0x7e>
 8004206:	68a3      	ldr	r3, [r4, #8]
 8004208:	42ab      	cmp	r3, r5
 800420a:	dc19      	bgt.n	8004240 <__multadd+0x74>
 800420c:	6861      	ldr	r1, [r4, #4]
 800420e:	4638      	mov	r0, r7
 8004210:	3101      	adds	r1, #1
 8004212:	f7ff ff79 	bl	8004108 <_Balloc>
 8004216:	4680      	mov	r8, r0
 8004218:	b928      	cbnz	r0, 8004226 <__multadd+0x5a>
 800421a:	4602      	mov	r2, r0
 800421c:	21b5      	movs	r1, #181	; 0xb5
 800421e:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <__multadd+0x84>)
 8004220:	480c      	ldr	r0, [pc, #48]	; (8004254 <__multadd+0x88>)
 8004222:	f000 fe61 	bl	8004ee8 <__assert_func>
 8004226:	6922      	ldr	r2, [r4, #16]
 8004228:	f104 010c 	add.w	r1, r4, #12
 800422c:	3202      	adds	r2, #2
 800422e:	0092      	lsls	r2, r2, #2
 8004230:	300c      	adds	r0, #12
 8004232:	f7ff ff5b 	bl	80040ec <memcpy>
 8004236:	4621      	mov	r1, r4
 8004238:	4638      	mov	r0, r7
 800423a:	f7ff ffa5 	bl	8004188 <_Bfree>
 800423e:	4644      	mov	r4, r8
 8004240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004244:	3501      	adds	r5, #1
 8004246:	615e      	str	r6, [r3, #20]
 8004248:	6125      	str	r5, [r4, #16]
 800424a:	4620      	mov	r0, r4
 800424c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004250:	0800542f 	.word	0x0800542f
 8004254:	080054a0 	.word	0x080054a0

08004258 <__hi0bits>:
 8004258:	0c02      	lsrs	r2, r0, #16
 800425a:	0412      	lsls	r2, r2, #16
 800425c:	4603      	mov	r3, r0
 800425e:	b9ca      	cbnz	r2, 8004294 <__hi0bits+0x3c>
 8004260:	0403      	lsls	r3, r0, #16
 8004262:	2010      	movs	r0, #16
 8004264:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004268:	bf04      	itt	eq
 800426a:	021b      	lsleq	r3, r3, #8
 800426c:	3008      	addeq	r0, #8
 800426e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004272:	bf04      	itt	eq
 8004274:	011b      	lsleq	r3, r3, #4
 8004276:	3004      	addeq	r0, #4
 8004278:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800427c:	bf04      	itt	eq
 800427e:	009b      	lsleq	r3, r3, #2
 8004280:	3002      	addeq	r0, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	db05      	blt.n	8004292 <__hi0bits+0x3a>
 8004286:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800428a:	f100 0001 	add.w	r0, r0, #1
 800428e:	bf08      	it	eq
 8004290:	2020      	moveq	r0, #32
 8004292:	4770      	bx	lr
 8004294:	2000      	movs	r0, #0
 8004296:	e7e5      	b.n	8004264 <__hi0bits+0xc>

08004298 <__lo0bits>:
 8004298:	6803      	ldr	r3, [r0, #0]
 800429a:	4602      	mov	r2, r0
 800429c:	f013 0007 	ands.w	r0, r3, #7
 80042a0:	d00b      	beq.n	80042ba <__lo0bits+0x22>
 80042a2:	07d9      	lsls	r1, r3, #31
 80042a4:	d421      	bmi.n	80042ea <__lo0bits+0x52>
 80042a6:	0798      	lsls	r0, r3, #30
 80042a8:	bf49      	itett	mi
 80042aa:	085b      	lsrmi	r3, r3, #1
 80042ac:	089b      	lsrpl	r3, r3, #2
 80042ae:	2001      	movmi	r0, #1
 80042b0:	6013      	strmi	r3, [r2, #0]
 80042b2:	bf5c      	itt	pl
 80042b4:	2002      	movpl	r0, #2
 80042b6:	6013      	strpl	r3, [r2, #0]
 80042b8:	4770      	bx	lr
 80042ba:	b299      	uxth	r1, r3
 80042bc:	b909      	cbnz	r1, 80042c2 <__lo0bits+0x2a>
 80042be:	2010      	movs	r0, #16
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	b2d9      	uxtb	r1, r3
 80042c4:	b909      	cbnz	r1, 80042ca <__lo0bits+0x32>
 80042c6:	3008      	adds	r0, #8
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	0719      	lsls	r1, r3, #28
 80042cc:	bf04      	itt	eq
 80042ce:	091b      	lsreq	r3, r3, #4
 80042d0:	3004      	addeq	r0, #4
 80042d2:	0799      	lsls	r1, r3, #30
 80042d4:	bf04      	itt	eq
 80042d6:	089b      	lsreq	r3, r3, #2
 80042d8:	3002      	addeq	r0, #2
 80042da:	07d9      	lsls	r1, r3, #31
 80042dc:	d403      	bmi.n	80042e6 <__lo0bits+0x4e>
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	f100 0001 	add.w	r0, r0, #1
 80042e4:	d003      	beq.n	80042ee <__lo0bits+0x56>
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4770      	bx	lr
 80042ea:	2000      	movs	r0, #0
 80042ec:	4770      	bx	lr
 80042ee:	2020      	movs	r0, #32
 80042f0:	4770      	bx	lr
	...

080042f4 <__i2b>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	460c      	mov	r4, r1
 80042f8:	2101      	movs	r1, #1
 80042fa:	f7ff ff05 	bl	8004108 <_Balloc>
 80042fe:	4602      	mov	r2, r0
 8004300:	b928      	cbnz	r0, 800430e <__i2b+0x1a>
 8004302:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <__i2b+0x24>)
 8004308:	4804      	ldr	r0, [pc, #16]	; (800431c <__i2b+0x28>)
 800430a:	f000 fded 	bl	8004ee8 <__assert_func>
 800430e:	2301      	movs	r3, #1
 8004310:	6144      	str	r4, [r0, #20]
 8004312:	6103      	str	r3, [r0, #16]
 8004314:	bd10      	pop	{r4, pc}
 8004316:	bf00      	nop
 8004318:	0800542f 	.word	0x0800542f
 800431c:	080054a0 	.word	0x080054a0

08004320 <__multiply>:
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	4691      	mov	r9, r2
 8004326:	690a      	ldr	r2, [r1, #16]
 8004328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800432c:	460c      	mov	r4, r1
 800432e:	429a      	cmp	r2, r3
 8004330:	bfbe      	ittt	lt
 8004332:	460b      	movlt	r3, r1
 8004334:	464c      	movlt	r4, r9
 8004336:	4699      	movlt	r9, r3
 8004338:	6927      	ldr	r7, [r4, #16]
 800433a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800433e:	68a3      	ldr	r3, [r4, #8]
 8004340:	6861      	ldr	r1, [r4, #4]
 8004342:	eb07 060a 	add.w	r6, r7, sl
 8004346:	42b3      	cmp	r3, r6
 8004348:	b085      	sub	sp, #20
 800434a:	bfb8      	it	lt
 800434c:	3101      	addlt	r1, #1
 800434e:	f7ff fedb 	bl	8004108 <_Balloc>
 8004352:	b930      	cbnz	r0, 8004362 <__multiply+0x42>
 8004354:	4602      	mov	r2, r0
 8004356:	f240 115d 	movw	r1, #349	; 0x15d
 800435a:	4b43      	ldr	r3, [pc, #268]	; (8004468 <__multiply+0x148>)
 800435c:	4843      	ldr	r0, [pc, #268]	; (800446c <__multiply+0x14c>)
 800435e:	f000 fdc3 	bl	8004ee8 <__assert_func>
 8004362:	f100 0514 	add.w	r5, r0, #20
 8004366:	462b      	mov	r3, r5
 8004368:	2200      	movs	r2, #0
 800436a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800436e:	4543      	cmp	r3, r8
 8004370:	d321      	bcc.n	80043b6 <__multiply+0x96>
 8004372:	f104 0314 	add.w	r3, r4, #20
 8004376:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800437a:	f109 0314 	add.w	r3, r9, #20
 800437e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004382:	9202      	str	r2, [sp, #8]
 8004384:	1b3a      	subs	r2, r7, r4
 8004386:	3a15      	subs	r2, #21
 8004388:	f022 0203 	bic.w	r2, r2, #3
 800438c:	3204      	adds	r2, #4
 800438e:	f104 0115 	add.w	r1, r4, #21
 8004392:	428f      	cmp	r7, r1
 8004394:	bf38      	it	cc
 8004396:	2204      	movcc	r2, #4
 8004398:	9201      	str	r2, [sp, #4]
 800439a:	9a02      	ldr	r2, [sp, #8]
 800439c:	9303      	str	r3, [sp, #12]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d80c      	bhi.n	80043bc <__multiply+0x9c>
 80043a2:	2e00      	cmp	r6, #0
 80043a4:	dd03      	ble.n	80043ae <__multiply+0x8e>
 80043a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d059      	beq.n	8004462 <__multiply+0x142>
 80043ae:	6106      	str	r6, [r0, #16]
 80043b0:	b005      	add	sp, #20
 80043b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b6:	f843 2b04 	str.w	r2, [r3], #4
 80043ba:	e7d8      	b.n	800436e <__multiply+0x4e>
 80043bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80043c0:	f1ba 0f00 	cmp.w	sl, #0
 80043c4:	d023      	beq.n	800440e <__multiply+0xee>
 80043c6:	46a9      	mov	r9, r5
 80043c8:	f04f 0c00 	mov.w	ip, #0
 80043cc:	f104 0e14 	add.w	lr, r4, #20
 80043d0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80043d4:	f8d9 1000 	ldr.w	r1, [r9]
 80043d8:	fa1f fb82 	uxth.w	fp, r2
 80043dc:	b289      	uxth	r1, r1
 80043de:	fb0a 110b 	mla	r1, sl, fp, r1
 80043e2:	4461      	add	r1, ip
 80043e4:	f8d9 c000 	ldr.w	ip, [r9]
 80043e8:	0c12      	lsrs	r2, r2, #16
 80043ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80043ee:	fb0a c202 	mla	r2, sl, r2, ip
 80043f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80043f6:	b289      	uxth	r1, r1
 80043f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80043fc:	4577      	cmp	r7, lr
 80043fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004402:	f849 1b04 	str.w	r1, [r9], #4
 8004406:	d8e3      	bhi.n	80043d0 <__multiply+0xb0>
 8004408:	9a01      	ldr	r2, [sp, #4]
 800440a:	f845 c002 	str.w	ip, [r5, r2]
 800440e:	9a03      	ldr	r2, [sp, #12]
 8004410:	3304      	adds	r3, #4
 8004412:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004416:	f1b9 0f00 	cmp.w	r9, #0
 800441a:	d020      	beq.n	800445e <__multiply+0x13e>
 800441c:	46ae      	mov	lr, r5
 800441e:	f04f 0a00 	mov.w	sl, #0
 8004422:	6829      	ldr	r1, [r5, #0]
 8004424:	f104 0c14 	add.w	ip, r4, #20
 8004428:	f8bc b000 	ldrh.w	fp, [ip]
 800442c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004430:	b289      	uxth	r1, r1
 8004432:	fb09 220b 	mla	r2, r9, fp, r2
 8004436:	4492      	add	sl, r2
 8004438:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800443c:	f84e 1b04 	str.w	r1, [lr], #4
 8004440:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004444:	f8be 1000 	ldrh.w	r1, [lr]
 8004448:	0c12      	lsrs	r2, r2, #16
 800444a:	fb09 1102 	mla	r1, r9, r2, r1
 800444e:	4567      	cmp	r7, ip
 8004450:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004454:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004458:	d8e6      	bhi.n	8004428 <__multiply+0x108>
 800445a:	9a01      	ldr	r2, [sp, #4]
 800445c:	50a9      	str	r1, [r5, r2]
 800445e:	3504      	adds	r5, #4
 8004460:	e79b      	b.n	800439a <__multiply+0x7a>
 8004462:	3e01      	subs	r6, #1
 8004464:	e79d      	b.n	80043a2 <__multiply+0x82>
 8004466:	bf00      	nop
 8004468:	0800542f 	.word	0x0800542f
 800446c:	080054a0 	.word	0x080054a0

08004470 <__pow5mult>:
 8004470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004474:	4615      	mov	r5, r2
 8004476:	f012 0203 	ands.w	r2, r2, #3
 800447a:	4606      	mov	r6, r0
 800447c:	460f      	mov	r7, r1
 800447e:	d007      	beq.n	8004490 <__pow5mult+0x20>
 8004480:	4c25      	ldr	r4, [pc, #148]	; (8004518 <__pow5mult+0xa8>)
 8004482:	3a01      	subs	r2, #1
 8004484:	2300      	movs	r3, #0
 8004486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800448a:	f7ff fe9f 	bl	80041cc <__multadd>
 800448e:	4607      	mov	r7, r0
 8004490:	10ad      	asrs	r5, r5, #2
 8004492:	d03d      	beq.n	8004510 <__pow5mult+0xa0>
 8004494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004496:	b97c      	cbnz	r4, 80044b8 <__pow5mult+0x48>
 8004498:	2010      	movs	r0, #16
 800449a:	f7ff fe11 	bl	80040c0 <malloc>
 800449e:	4602      	mov	r2, r0
 80044a0:	6270      	str	r0, [r6, #36]	; 0x24
 80044a2:	b928      	cbnz	r0, 80044b0 <__pow5mult+0x40>
 80044a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80044a8:	4b1c      	ldr	r3, [pc, #112]	; (800451c <__pow5mult+0xac>)
 80044aa:	481d      	ldr	r0, [pc, #116]	; (8004520 <__pow5mult+0xb0>)
 80044ac:	f000 fd1c 	bl	8004ee8 <__assert_func>
 80044b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80044b4:	6004      	str	r4, [r0, #0]
 80044b6:	60c4      	str	r4, [r0, #12]
 80044b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80044bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80044c0:	b94c      	cbnz	r4, 80044d6 <__pow5mult+0x66>
 80044c2:	f240 2171 	movw	r1, #625	; 0x271
 80044c6:	4630      	mov	r0, r6
 80044c8:	f7ff ff14 	bl	80042f4 <__i2b>
 80044cc:	2300      	movs	r3, #0
 80044ce:	4604      	mov	r4, r0
 80044d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80044d4:	6003      	str	r3, [r0, #0]
 80044d6:	f04f 0900 	mov.w	r9, #0
 80044da:	07eb      	lsls	r3, r5, #31
 80044dc:	d50a      	bpl.n	80044f4 <__pow5mult+0x84>
 80044de:	4639      	mov	r1, r7
 80044e0:	4622      	mov	r2, r4
 80044e2:	4630      	mov	r0, r6
 80044e4:	f7ff ff1c 	bl	8004320 <__multiply>
 80044e8:	4680      	mov	r8, r0
 80044ea:	4639      	mov	r1, r7
 80044ec:	4630      	mov	r0, r6
 80044ee:	f7ff fe4b 	bl	8004188 <_Bfree>
 80044f2:	4647      	mov	r7, r8
 80044f4:	106d      	asrs	r5, r5, #1
 80044f6:	d00b      	beq.n	8004510 <__pow5mult+0xa0>
 80044f8:	6820      	ldr	r0, [r4, #0]
 80044fa:	b938      	cbnz	r0, 800450c <__pow5mult+0x9c>
 80044fc:	4622      	mov	r2, r4
 80044fe:	4621      	mov	r1, r4
 8004500:	4630      	mov	r0, r6
 8004502:	f7ff ff0d 	bl	8004320 <__multiply>
 8004506:	6020      	str	r0, [r4, #0]
 8004508:	f8c0 9000 	str.w	r9, [r0]
 800450c:	4604      	mov	r4, r0
 800450e:	e7e4      	b.n	80044da <__pow5mult+0x6a>
 8004510:	4638      	mov	r0, r7
 8004512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004516:	bf00      	nop
 8004518:	080055f0 	.word	0x080055f0
 800451c:	080053bd 	.word	0x080053bd
 8004520:	080054a0 	.word	0x080054a0

08004524 <__lshift>:
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	460c      	mov	r4, r1
 800452a:	4607      	mov	r7, r0
 800452c:	4691      	mov	r9, r2
 800452e:	6923      	ldr	r3, [r4, #16]
 8004530:	6849      	ldr	r1, [r1, #4]
 8004532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004536:	68a3      	ldr	r3, [r4, #8]
 8004538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800453c:	f108 0601 	add.w	r6, r8, #1
 8004540:	42b3      	cmp	r3, r6
 8004542:	db0b      	blt.n	800455c <__lshift+0x38>
 8004544:	4638      	mov	r0, r7
 8004546:	f7ff fddf 	bl	8004108 <_Balloc>
 800454a:	4605      	mov	r5, r0
 800454c:	b948      	cbnz	r0, 8004562 <__lshift+0x3e>
 800454e:	4602      	mov	r2, r0
 8004550:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004554:	4b29      	ldr	r3, [pc, #164]	; (80045fc <__lshift+0xd8>)
 8004556:	482a      	ldr	r0, [pc, #168]	; (8004600 <__lshift+0xdc>)
 8004558:	f000 fcc6 	bl	8004ee8 <__assert_func>
 800455c:	3101      	adds	r1, #1
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	e7ee      	b.n	8004540 <__lshift+0x1c>
 8004562:	2300      	movs	r3, #0
 8004564:	f100 0114 	add.w	r1, r0, #20
 8004568:	f100 0210 	add.w	r2, r0, #16
 800456c:	4618      	mov	r0, r3
 800456e:	4553      	cmp	r3, sl
 8004570:	db37      	blt.n	80045e2 <__lshift+0xbe>
 8004572:	6920      	ldr	r0, [r4, #16]
 8004574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004578:	f104 0314 	add.w	r3, r4, #20
 800457c:	f019 091f 	ands.w	r9, r9, #31
 8004580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004584:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004588:	d02f      	beq.n	80045ea <__lshift+0xc6>
 800458a:	468a      	mov	sl, r1
 800458c:	f04f 0c00 	mov.w	ip, #0
 8004590:	f1c9 0e20 	rsb	lr, r9, #32
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	fa02 f209 	lsl.w	r2, r2, r9
 800459a:	ea42 020c 	orr.w	r2, r2, ip
 800459e:	f84a 2b04 	str.w	r2, [sl], #4
 80045a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80045a6:	4298      	cmp	r0, r3
 80045a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80045ac:	d8f2      	bhi.n	8004594 <__lshift+0x70>
 80045ae:	1b03      	subs	r3, r0, r4
 80045b0:	3b15      	subs	r3, #21
 80045b2:	f023 0303 	bic.w	r3, r3, #3
 80045b6:	3304      	adds	r3, #4
 80045b8:	f104 0215 	add.w	r2, r4, #21
 80045bc:	4290      	cmp	r0, r2
 80045be:	bf38      	it	cc
 80045c0:	2304      	movcc	r3, #4
 80045c2:	f841 c003 	str.w	ip, [r1, r3]
 80045c6:	f1bc 0f00 	cmp.w	ip, #0
 80045ca:	d001      	beq.n	80045d0 <__lshift+0xac>
 80045cc:	f108 0602 	add.w	r6, r8, #2
 80045d0:	3e01      	subs	r6, #1
 80045d2:	4638      	mov	r0, r7
 80045d4:	4621      	mov	r1, r4
 80045d6:	612e      	str	r6, [r5, #16]
 80045d8:	f7ff fdd6 	bl	8004188 <_Bfree>
 80045dc:	4628      	mov	r0, r5
 80045de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80045e6:	3301      	adds	r3, #1
 80045e8:	e7c1      	b.n	800456e <__lshift+0x4a>
 80045ea:	3904      	subs	r1, #4
 80045ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80045f0:	4298      	cmp	r0, r3
 80045f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80045f6:	d8f9      	bhi.n	80045ec <__lshift+0xc8>
 80045f8:	e7ea      	b.n	80045d0 <__lshift+0xac>
 80045fa:	bf00      	nop
 80045fc:	0800542f 	.word	0x0800542f
 8004600:	080054a0 	.word	0x080054a0

08004604 <__mcmp>:
 8004604:	4603      	mov	r3, r0
 8004606:	690a      	ldr	r2, [r1, #16]
 8004608:	6900      	ldr	r0, [r0, #16]
 800460a:	b530      	push	{r4, r5, lr}
 800460c:	1a80      	subs	r0, r0, r2
 800460e:	d10d      	bne.n	800462c <__mcmp+0x28>
 8004610:	3314      	adds	r3, #20
 8004612:	3114      	adds	r1, #20
 8004614:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004618:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800461c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004620:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004624:	4295      	cmp	r5, r2
 8004626:	d002      	beq.n	800462e <__mcmp+0x2a>
 8004628:	d304      	bcc.n	8004634 <__mcmp+0x30>
 800462a:	2001      	movs	r0, #1
 800462c:	bd30      	pop	{r4, r5, pc}
 800462e:	42a3      	cmp	r3, r4
 8004630:	d3f4      	bcc.n	800461c <__mcmp+0x18>
 8004632:	e7fb      	b.n	800462c <__mcmp+0x28>
 8004634:	f04f 30ff 	mov.w	r0, #4294967295
 8004638:	e7f8      	b.n	800462c <__mcmp+0x28>
	...

0800463c <__mdiff>:
 800463c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004640:	460d      	mov	r5, r1
 8004642:	4607      	mov	r7, r0
 8004644:	4611      	mov	r1, r2
 8004646:	4628      	mov	r0, r5
 8004648:	4614      	mov	r4, r2
 800464a:	f7ff ffdb 	bl	8004604 <__mcmp>
 800464e:	1e06      	subs	r6, r0, #0
 8004650:	d111      	bne.n	8004676 <__mdiff+0x3a>
 8004652:	4631      	mov	r1, r6
 8004654:	4638      	mov	r0, r7
 8004656:	f7ff fd57 	bl	8004108 <_Balloc>
 800465a:	4602      	mov	r2, r0
 800465c:	b928      	cbnz	r0, 800466a <__mdiff+0x2e>
 800465e:	f240 2132 	movw	r1, #562	; 0x232
 8004662:	4b3a      	ldr	r3, [pc, #232]	; (800474c <__mdiff+0x110>)
 8004664:	483a      	ldr	r0, [pc, #232]	; (8004750 <__mdiff+0x114>)
 8004666:	f000 fc3f 	bl	8004ee8 <__assert_func>
 800466a:	2301      	movs	r3, #1
 800466c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004670:	4610      	mov	r0, r2
 8004672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004676:	bfa4      	itt	ge
 8004678:	4623      	movge	r3, r4
 800467a:	462c      	movge	r4, r5
 800467c:	4638      	mov	r0, r7
 800467e:	6861      	ldr	r1, [r4, #4]
 8004680:	bfa6      	itte	ge
 8004682:	461d      	movge	r5, r3
 8004684:	2600      	movge	r6, #0
 8004686:	2601      	movlt	r6, #1
 8004688:	f7ff fd3e 	bl	8004108 <_Balloc>
 800468c:	4602      	mov	r2, r0
 800468e:	b918      	cbnz	r0, 8004698 <__mdiff+0x5c>
 8004690:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004694:	4b2d      	ldr	r3, [pc, #180]	; (800474c <__mdiff+0x110>)
 8004696:	e7e5      	b.n	8004664 <__mdiff+0x28>
 8004698:	f102 0814 	add.w	r8, r2, #20
 800469c:	46c2      	mov	sl, r8
 800469e:	f04f 0c00 	mov.w	ip, #0
 80046a2:	6927      	ldr	r7, [r4, #16]
 80046a4:	60c6      	str	r6, [r0, #12]
 80046a6:	692e      	ldr	r6, [r5, #16]
 80046a8:	f104 0014 	add.w	r0, r4, #20
 80046ac:	f105 0914 	add.w	r9, r5, #20
 80046b0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80046b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80046b8:	3410      	adds	r4, #16
 80046ba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80046be:	f859 3b04 	ldr.w	r3, [r9], #4
 80046c2:	fa1f f18b 	uxth.w	r1, fp
 80046c6:	448c      	add	ip, r1
 80046c8:	b299      	uxth	r1, r3
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	ebac 0101 	sub.w	r1, ip, r1
 80046d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80046d4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80046d8:	b289      	uxth	r1, r1
 80046da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80046de:	454e      	cmp	r6, r9
 80046e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80046e4:	f84a 3b04 	str.w	r3, [sl], #4
 80046e8:	d8e7      	bhi.n	80046ba <__mdiff+0x7e>
 80046ea:	1b73      	subs	r3, r6, r5
 80046ec:	3b15      	subs	r3, #21
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	3515      	adds	r5, #21
 80046f4:	3304      	adds	r3, #4
 80046f6:	42ae      	cmp	r6, r5
 80046f8:	bf38      	it	cc
 80046fa:	2304      	movcc	r3, #4
 80046fc:	4418      	add	r0, r3
 80046fe:	4443      	add	r3, r8
 8004700:	461e      	mov	r6, r3
 8004702:	4605      	mov	r5, r0
 8004704:	4575      	cmp	r5, lr
 8004706:	d30e      	bcc.n	8004726 <__mdiff+0xea>
 8004708:	f10e 0103 	add.w	r1, lr, #3
 800470c:	1a09      	subs	r1, r1, r0
 800470e:	f021 0103 	bic.w	r1, r1, #3
 8004712:	3803      	subs	r0, #3
 8004714:	4586      	cmp	lr, r0
 8004716:	bf38      	it	cc
 8004718:	2100      	movcc	r1, #0
 800471a:	4419      	add	r1, r3
 800471c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004720:	b18b      	cbz	r3, 8004746 <__mdiff+0x10a>
 8004722:	6117      	str	r7, [r2, #16]
 8004724:	e7a4      	b.n	8004670 <__mdiff+0x34>
 8004726:	f855 8b04 	ldr.w	r8, [r5], #4
 800472a:	fa1f f188 	uxth.w	r1, r8
 800472e:	4461      	add	r1, ip
 8004730:	140c      	asrs	r4, r1, #16
 8004732:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004736:	b289      	uxth	r1, r1
 8004738:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800473c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004740:	f846 1b04 	str.w	r1, [r6], #4
 8004744:	e7de      	b.n	8004704 <__mdiff+0xc8>
 8004746:	3f01      	subs	r7, #1
 8004748:	e7e8      	b.n	800471c <__mdiff+0xe0>
 800474a:	bf00      	nop
 800474c:	0800542f 	.word	0x0800542f
 8004750:	080054a0 	.word	0x080054a0

08004754 <__d2b>:
 8004754:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004758:	2101      	movs	r1, #1
 800475a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800475e:	4690      	mov	r8, r2
 8004760:	461d      	mov	r5, r3
 8004762:	f7ff fcd1 	bl	8004108 <_Balloc>
 8004766:	4604      	mov	r4, r0
 8004768:	b930      	cbnz	r0, 8004778 <__d2b+0x24>
 800476a:	4602      	mov	r2, r0
 800476c:	f240 310a 	movw	r1, #778	; 0x30a
 8004770:	4b24      	ldr	r3, [pc, #144]	; (8004804 <__d2b+0xb0>)
 8004772:	4825      	ldr	r0, [pc, #148]	; (8004808 <__d2b+0xb4>)
 8004774:	f000 fbb8 	bl	8004ee8 <__assert_func>
 8004778:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800477c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004780:	bb2d      	cbnz	r5, 80047ce <__d2b+0x7a>
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	f1b8 0300 	subs.w	r3, r8, #0
 8004788:	d026      	beq.n	80047d8 <__d2b+0x84>
 800478a:	4668      	mov	r0, sp
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	f7ff fd83 	bl	8004298 <__lo0bits>
 8004792:	9900      	ldr	r1, [sp, #0]
 8004794:	b1f0      	cbz	r0, 80047d4 <__d2b+0x80>
 8004796:	9a01      	ldr	r2, [sp, #4]
 8004798:	f1c0 0320 	rsb	r3, r0, #32
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	430b      	orrs	r3, r1
 80047a2:	40c2      	lsrs	r2, r0
 80047a4:	6163      	str	r3, [r4, #20]
 80047a6:	9201      	str	r2, [sp, #4]
 80047a8:	9b01      	ldr	r3, [sp, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bf14      	ite	ne
 80047ae:	2102      	movne	r1, #2
 80047b0:	2101      	moveq	r1, #1
 80047b2:	61a3      	str	r3, [r4, #24]
 80047b4:	6121      	str	r1, [r4, #16]
 80047b6:	b1c5      	cbz	r5, 80047ea <__d2b+0x96>
 80047b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80047bc:	4405      	add	r5, r0
 80047be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80047c2:	603d      	str	r5, [r7, #0]
 80047c4:	6030      	str	r0, [r6, #0]
 80047c6:	4620      	mov	r0, r4
 80047c8:	b002      	add	sp, #8
 80047ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d2:	e7d6      	b.n	8004782 <__d2b+0x2e>
 80047d4:	6161      	str	r1, [r4, #20]
 80047d6:	e7e7      	b.n	80047a8 <__d2b+0x54>
 80047d8:	a801      	add	r0, sp, #4
 80047da:	f7ff fd5d 	bl	8004298 <__lo0bits>
 80047de:	2101      	movs	r1, #1
 80047e0:	9b01      	ldr	r3, [sp, #4]
 80047e2:	6121      	str	r1, [r4, #16]
 80047e4:	6163      	str	r3, [r4, #20]
 80047e6:	3020      	adds	r0, #32
 80047e8:	e7e5      	b.n	80047b6 <__d2b+0x62>
 80047ea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80047ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80047f2:	6038      	str	r0, [r7, #0]
 80047f4:	6918      	ldr	r0, [r3, #16]
 80047f6:	f7ff fd2f 	bl	8004258 <__hi0bits>
 80047fa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80047fe:	6031      	str	r1, [r6, #0]
 8004800:	e7e1      	b.n	80047c6 <__d2b+0x72>
 8004802:	bf00      	nop
 8004804:	0800542f 	.word	0x0800542f
 8004808:	080054a0 	.word	0x080054a0

0800480c <_calloc_r>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	fba1 5402 	umull	r5, r4, r1, r2
 8004812:	b934      	cbnz	r4, 8004822 <_calloc_r+0x16>
 8004814:	4629      	mov	r1, r5
 8004816:	f000 f875 	bl	8004904 <_malloc_r>
 800481a:	4606      	mov	r6, r0
 800481c:	b928      	cbnz	r0, 800482a <_calloc_r+0x1e>
 800481e:	4630      	mov	r0, r6
 8004820:	bd70      	pop	{r4, r5, r6, pc}
 8004822:	220c      	movs	r2, #12
 8004824:	2600      	movs	r6, #0
 8004826:	6002      	str	r2, [r0, #0]
 8004828:	e7f9      	b.n	800481e <_calloc_r+0x12>
 800482a:	462a      	mov	r2, r5
 800482c:	4621      	mov	r1, r4
 800482e:	f7fe f84d 	bl	80028cc <memset>
 8004832:	e7f4      	b.n	800481e <_calloc_r+0x12>

08004834 <_free_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4605      	mov	r5, r0
 8004838:	2900      	cmp	r1, #0
 800483a:	d040      	beq.n	80048be <_free_r+0x8a>
 800483c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004840:	1f0c      	subs	r4, r1, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	bfb8      	it	lt
 8004846:	18e4      	addlt	r4, r4, r3
 8004848:	f000 fcd6 	bl	80051f8 <__malloc_lock>
 800484c:	4a1c      	ldr	r2, [pc, #112]	; (80048c0 <_free_r+0x8c>)
 800484e:	6813      	ldr	r3, [r2, #0]
 8004850:	b933      	cbnz	r3, 8004860 <_free_r+0x2c>
 8004852:	6063      	str	r3, [r4, #4]
 8004854:	6014      	str	r4, [r2, #0]
 8004856:	4628      	mov	r0, r5
 8004858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800485c:	f000 bcd2 	b.w	8005204 <__malloc_unlock>
 8004860:	42a3      	cmp	r3, r4
 8004862:	d908      	bls.n	8004876 <_free_r+0x42>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	1821      	adds	r1, r4, r0
 8004868:	428b      	cmp	r3, r1
 800486a:	bf01      	itttt	eq
 800486c:	6819      	ldreq	r1, [r3, #0]
 800486e:	685b      	ldreq	r3, [r3, #4]
 8004870:	1809      	addeq	r1, r1, r0
 8004872:	6021      	streq	r1, [r4, #0]
 8004874:	e7ed      	b.n	8004852 <_free_r+0x1e>
 8004876:	461a      	mov	r2, r3
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	b10b      	cbz	r3, 8004880 <_free_r+0x4c>
 800487c:	42a3      	cmp	r3, r4
 800487e:	d9fa      	bls.n	8004876 <_free_r+0x42>
 8004880:	6811      	ldr	r1, [r2, #0]
 8004882:	1850      	adds	r0, r2, r1
 8004884:	42a0      	cmp	r0, r4
 8004886:	d10b      	bne.n	80048a0 <_free_r+0x6c>
 8004888:	6820      	ldr	r0, [r4, #0]
 800488a:	4401      	add	r1, r0
 800488c:	1850      	adds	r0, r2, r1
 800488e:	4283      	cmp	r3, r0
 8004890:	6011      	str	r1, [r2, #0]
 8004892:	d1e0      	bne.n	8004856 <_free_r+0x22>
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4401      	add	r1, r0
 800489a:	6011      	str	r1, [r2, #0]
 800489c:	6053      	str	r3, [r2, #4]
 800489e:	e7da      	b.n	8004856 <_free_r+0x22>
 80048a0:	d902      	bls.n	80048a8 <_free_r+0x74>
 80048a2:	230c      	movs	r3, #12
 80048a4:	602b      	str	r3, [r5, #0]
 80048a6:	e7d6      	b.n	8004856 <_free_r+0x22>
 80048a8:	6820      	ldr	r0, [r4, #0]
 80048aa:	1821      	adds	r1, r4, r0
 80048ac:	428b      	cmp	r3, r1
 80048ae:	bf01      	itttt	eq
 80048b0:	6819      	ldreq	r1, [r3, #0]
 80048b2:	685b      	ldreq	r3, [r3, #4]
 80048b4:	1809      	addeq	r1, r1, r0
 80048b6:	6021      	streq	r1, [r4, #0]
 80048b8:	6063      	str	r3, [r4, #4]
 80048ba:	6054      	str	r4, [r2, #4]
 80048bc:	e7cb      	b.n	8004856 <_free_r+0x22>
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	2000029c 	.word	0x2000029c

080048c4 <sbrk_aligned>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	4e0e      	ldr	r6, [pc, #56]	; (8004900 <sbrk_aligned+0x3c>)
 80048c8:	460c      	mov	r4, r1
 80048ca:	6831      	ldr	r1, [r6, #0]
 80048cc:	4605      	mov	r5, r0
 80048ce:	b911      	cbnz	r1, 80048d6 <sbrk_aligned+0x12>
 80048d0:	f000 f9e4 	bl	8004c9c <_sbrk_r>
 80048d4:	6030      	str	r0, [r6, #0]
 80048d6:	4621      	mov	r1, r4
 80048d8:	4628      	mov	r0, r5
 80048da:	f000 f9df 	bl	8004c9c <_sbrk_r>
 80048de:	1c43      	adds	r3, r0, #1
 80048e0:	d00a      	beq.n	80048f8 <sbrk_aligned+0x34>
 80048e2:	1cc4      	adds	r4, r0, #3
 80048e4:	f024 0403 	bic.w	r4, r4, #3
 80048e8:	42a0      	cmp	r0, r4
 80048ea:	d007      	beq.n	80048fc <sbrk_aligned+0x38>
 80048ec:	1a21      	subs	r1, r4, r0
 80048ee:	4628      	mov	r0, r5
 80048f0:	f000 f9d4 	bl	8004c9c <_sbrk_r>
 80048f4:	3001      	adds	r0, #1
 80048f6:	d101      	bne.n	80048fc <sbrk_aligned+0x38>
 80048f8:	f04f 34ff 	mov.w	r4, #4294967295
 80048fc:	4620      	mov	r0, r4
 80048fe:	bd70      	pop	{r4, r5, r6, pc}
 8004900:	200002a0 	.word	0x200002a0

08004904 <_malloc_r>:
 8004904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004908:	1ccd      	adds	r5, r1, #3
 800490a:	f025 0503 	bic.w	r5, r5, #3
 800490e:	3508      	adds	r5, #8
 8004910:	2d0c      	cmp	r5, #12
 8004912:	bf38      	it	cc
 8004914:	250c      	movcc	r5, #12
 8004916:	2d00      	cmp	r5, #0
 8004918:	4607      	mov	r7, r0
 800491a:	db01      	blt.n	8004920 <_malloc_r+0x1c>
 800491c:	42a9      	cmp	r1, r5
 800491e:	d905      	bls.n	800492c <_malloc_r+0x28>
 8004920:	230c      	movs	r3, #12
 8004922:	2600      	movs	r6, #0
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	4630      	mov	r0, r6
 8004928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800492c:	4e2e      	ldr	r6, [pc, #184]	; (80049e8 <_malloc_r+0xe4>)
 800492e:	f000 fc63 	bl	80051f8 <__malloc_lock>
 8004932:	6833      	ldr	r3, [r6, #0]
 8004934:	461c      	mov	r4, r3
 8004936:	bb34      	cbnz	r4, 8004986 <_malloc_r+0x82>
 8004938:	4629      	mov	r1, r5
 800493a:	4638      	mov	r0, r7
 800493c:	f7ff ffc2 	bl	80048c4 <sbrk_aligned>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	4604      	mov	r4, r0
 8004944:	d14d      	bne.n	80049e2 <_malloc_r+0xde>
 8004946:	6834      	ldr	r4, [r6, #0]
 8004948:	4626      	mov	r6, r4
 800494a:	2e00      	cmp	r6, #0
 800494c:	d140      	bne.n	80049d0 <_malloc_r+0xcc>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	4631      	mov	r1, r6
 8004952:	4638      	mov	r0, r7
 8004954:	eb04 0803 	add.w	r8, r4, r3
 8004958:	f000 f9a0 	bl	8004c9c <_sbrk_r>
 800495c:	4580      	cmp	r8, r0
 800495e:	d13a      	bne.n	80049d6 <_malloc_r+0xd2>
 8004960:	6821      	ldr	r1, [r4, #0]
 8004962:	3503      	adds	r5, #3
 8004964:	1a6d      	subs	r5, r5, r1
 8004966:	f025 0503 	bic.w	r5, r5, #3
 800496a:	3508      	adds	r5, #8
 800496c:	2d0c      	cmp	r5, #12
 800496e:	bf38      	it	cc
 8004970:	250c      	movcc	r5, #12
 8004972:	4638      	mov	r0, r7
 8004974:	4629      	mov	r1, r5
 8004976:	f7ff ffa5 	bl	80048c4 <sbrk_aligned>
 800497a:	3001      	adds	r0, #1
 800497c:	d02b      	beq.n	80049d6 <_malloc_r+0xd2>
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	442b      	add	r3, r5
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	e00e      	b.n	80049a4 <_malloc_r+0xa0>
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	1b52      	subs	r2, r2, r5
 800498a:	d41e      	bmi.n	80049ca <_malloc_r+0xc6>
 800498c:	2a0b      	cmp	r2, #11
 800498e:	d916      	bls.n	80049be <_malloc_r+0xba>
 8004990:	1961      	adds	r1, r4, r5
 8004992:	42a3      	cmp	r3, r4
 8004994:	6025      	str	r5, [r4, #0]
 8004996:	bf18      	it	ne
 8004998:	6059      	strne	r1, [r3, #4]
 800499a:	6863      	ldr	r3, [r4, #4]
 800499c:	bf08      	it	eq
 800499e:	6031      	streq	r1, [r6, #0]
 80049a0:	5162      	str	r2, [r4, r5]
 80049a2:	604b      	str	r3, [r1, #4]
 80049a4:	4638      	mov	r0, r7
 80049a6:	f104 060b 	add.w	r6, r4, #11
 80049aa:	f000 fc2b 	bl	8005204 <__malloc_unlock>
 80049ae:	f026 0607 	bic.w	r6, r6, #7
 80049b2:	1d23      	adds	r3, r4, #4
 80049b4:	1af2      	subs	r2, r6, r3
 80049b6:	d0b6      	beq.n	8004926 <_malloc_r+0x22>
 80049b8:	1b9b      	subs	r3, r3, r6
 80049ba:	50a3      	str	r3, [r4, r2]
 80049bc:	e7b3      	b.n	8004926 <_malloc_r+0x22>
 80049be:	6862      	ldr	r2, [r4, #4]
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	bf0c      	ite	eq
 80049c4:	6032      	streq	r2, [r6, #0]
 80049c6:	605a      	strne	r2, [r3, #4]
 80049c8:	e7ec      	b.n	80049a4 <_malloc_r+0xa0>
 80049ca:	4623      	mov	r3, r4
 80049cc:	6864      	ldr	r4, [r4, #4]
 80049ce:	e7b2      	b.n	8004936 <_malloc_r+0x32>
 80049d0:	4634      	mov	r4, r6
 80049d2:	6876      	ldr	r6, [r6, #4]
 80049d4:	e7b9      	b.n	800494a <_malloc_r+0x46>
 80049d6:	230c      	movs	r3, #12
 80049d8:	4638      	mov	r0, r7
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	f000 fc12 	bl	8005204 <__malloc_unlock>
 80049e0:	e7a1      	b.n	8004926 <_malloc_r+0x22>
 80049e2:	6025      	str	r5, [r4, #0]
 80049e4:	e7de      	b.n	80049a4 <_malloc_r+0xa0>
 80049e6:	bf00      	nop
 80049e8:	2000029c 	.word	0x2000029c

080049ec <__sfputc_r>:
 80049ec:	6893      	ldr	r3, [r2, #8]
 80049ee:	b410      	push	{r4}
 80049f0:	3b01      	subs	r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	6093      	str	r3, [r2, #8]
 80049f6:	da07      	bge.n	8004a08 <__sfputc_r+0x1c>
 80049f8:	6994      	ldr	r4, [r2, #24]
 80049fa:	42a3      	cmp	r3, r4
 80049fc:	db01      	blt.n	8004a02 <__sfputc_r+0x16>
 80049fe:	290a      	cmp	r1, #10
 8004a00:	d102      	bne.n	8004a08 <__sfputc_r+0x1c>
 8004a02:	bc10      	pop	{r4}
 8004a04:	f000 b99e 	b.w	8004d44 <__swbuf_r>
 8004a08:	6813      	ldr	r3, [r2, #0]
 8004a0a:	1c58      	adds	r0, r3, #1
 8004a0c:	6010      	str	r0, [r2, #0]
 8004a0e:	7019      	strb	r1, [r3, #0]
 8004a10:	4608      	mov	r0, r1
 8004a12:	bc10      	pop	{r4}
 8004a14:	4770      	bx	lr

08004a16 <__sfputs_r>:
 8004a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a18:	4606      	mov	r6, r0
 8004a1a:	460f      	mov	r7, r1
 8004a1c:	4614      	mov	r4, r2
 8004a1e:	18d5      	adds	r5, r2, r3
 8004a20:	42ac      	cmp	r4, r5
 8004a22:	d101      	bne.n	8004a28 <__sfputs_r+0x12>
 8004a24:	2000      	movs	r0, #0
 8004a26:	e007      	b.n	8004a38 <__sfputs_r+0x22>
 8004a28:	463a      	mov	r2, r7
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a30:	f7ff ffdc 	bl	80049ec <__sfputc_r>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d1f3      	bne.n	8004a20 <__sfputs_r+0xa>
 8004a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a3c <_vfiprintf_r>:
 8004a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a40:	460d      	mov	r5, r1
 8004a42:	4614      	mov	r4, r2
 8004a44:	4698      	mov	r8, r3
 8004a46:	4606      	mov	r6, r0
 8004a48:	b09d      	sub	sp, #116	; 0x74
 8004a4a:	b118      	cbz	r0, 8004a54 <_vfiprintf_r+0x18>
 8004a4c:	6983      	ldr	r3, [r0, #24]
 8004a4e:	b90b      	cbnz	r3, 8004a54 <_vfiprintf_r+0x18>
 8004a50:	f7ff fa90 	bl	8003f74 <__sinit>
 8004a54:	4b89      	ldr	r3, [pc, #548]	; (8004c7c <_vfiprintf_r+0x240>)
 8004a56:	429d      	cmp	r5, r3
 8004a58:	d11b      	bne.n	8004a92 <_vfiprintf_r+0x56>
 8004a5a:	6875      	ldr	r5, [r6, #4]
 8004a5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a5e:	07d9      	lsls	r1, r3, #31
 8004a60:	d405      	bmi.n	8004a6e <_vfiprintf_r+0x32>
 8004a62:	89ab      	ldrh	r3, [r5, #12]
 8004a64:	059a      	lsls	r2, r3, #22
 8004a66:	d402      	bmi.n	8004a6e <_vfiprintf_r+0x32>
 8004a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a6a:	f7ff fb26 	bl	80040ba <__retarget_lock_acquire_recursive>
 8004a6e:	89ab      	ldrh	r3, [r5, #12]
 8004a70:	071b      	lsls	r3, r3, #28
 8004a72:	d501      	bpl.n	8004a78 <_vfiprintf_r+0x3c>
 8004a74:	692b      	ldr	r3, [r5, #16]
 8004a76:	b9eb      	cbnz	r3, 8004ab4 <_vfiprintf_r+0x78>
 8004a78:	4629      	mov	r1, r5
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	f000 f9c6 	bl	8004e0c <__swsetup_r>
 8004a80:	b1c0      	cbz	r0, 8004ab4 <_vfiprintf_r+0x78>
 8004a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a84:	07dc      	lsls	r4, r3, #31
 8004a86:	d50e      	bpl.n	8004aa6 <_vfiprintf_r+0x6a>
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	b01d      	add	sp, #116	; 0x74
 8004a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a92:	4b7b      	ldr	r3, [pc, #492]	; (8004c80 <_vfiprintf_r+0x244>)
 8004a94:	429d      	cmp	r5, r3
 8004a96:	d101      	bne.n	8004a9c <_vfiprintf_r+0x60>
 8004a98:	68b5      	ldr	r5, [r6, #8]
 8004a9a:	e7df      	b.n	8004a5c <_vfiprintf_r+0x20>
 8004a9c:	4b79      	ldr	r3, [pc, #484]	; (8004c84 <_vfiprintf_r+0x248>)
 8004a9e:	429d      	cmp	r5, r3
 8004aa0:	bf08      	it	eq
 8004aa2:	68f5      	ldreq	r5, [r6, #12]
 8004aa4:	e7da      	b.n	8004a5c <_vfiprintf_r+0x20>
 8004aa6:	89ab      	ldrh	r3, [r5, #12]
 8004aa8:	0598      	lsls	r0, r3, #22
 8004aaa:	d4ed      	bmi.n	8004a88 <_vfiprintf_r+0x4c>
 8004aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aae:	f7ff fb05 	bl	80040bc <__retarget_lock_release_recursive>
 8004ab2:	e7e9      	b.n	8004a88 <_vfiprintf_r+0x4c>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab8:	2320      	movs	r3, #32
 8004aba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004abe:	2330      	movs	r3, #48	; 0x30
 8004ac0:	f04f 0901 	mov.w	r9, #1
 8004ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ac8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004c88 <_vfiprintf_r+0x24c>
 8004acc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ad0:	4623      	mov	r3, r4
 8004ad2:	469a      	mov	sl, r3
 8004ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ad8:	b10a      	cbz	r2, 8004ade <_vfiprintf_r+0xa2>
 8004ada:	2a25      	cmp	r2, #37	; 0x25
 8004adc:	d1f9      	bne.n	8004ad2 <_vfiprintf_r+0x96>
 8004ade:	ebba 0b04 	subs.w	fp, sl, r4
 8004ae2:	d00b      	beq.n	8004afc <_vfiprintf_r+0xc0>
 8004ae4:	465b      	mov	r3, fp
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff ff93 	bl	8004a16 <__sfputs_r>
 8004af0:	3001      	adds	r0, #1
 8004af2:	f000 80aa 	beq.w	8004c4a <_vfiprintf_r+0x20e>
 8004af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af8:	445a      	add	r2, fp
 8004afa:	9209      	str	r2, [sp, #36]	; 0x24
 8004afc:	f89a 3000 	ldrb.w	r3, [sl]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a2 	beq.w	8004c4a <_vfiprintf_r+0x20e>
 8004b06:	2300      	movs	r3, #0
 8004b08:	f04f 32ff 	mov.w	r2, #4294967295
 8004b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b10:	f10a 0a01 	add.w	sl, sl, #1
 8004b14:	9304      	str	r3, [sp, #16]
 8004b16:	9307      	str	r3, [sp, #28]
 8004b18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b1c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b1e:	4654      	mov	r4, sl
 8004b20:	2205      	movs	r2, #5
 8004b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b26:	4858      	ldr	r0, [pc, #352]	; (8004c88 <_vfiprintf_r+0x24c>)
 8004b28:	f7ff fad2 	bl	80040d0 <memchr>
 8004b2c:	9a04      	ldr	r2, [sp, #16]
 8004b2e:	b9d8      	cbnz	r0, 8004b68 <_vfiprintf_r+0x12c>
 8004b30:	06d1      	lsls	r1, r2, #27
 8004b32:	bf44      	itt	mi
 8004b34:	2320      	movmi	r3, #32
 8004b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b3a:	0713      	lsls	r3, r2, #28
 8004b3c:	bf44      	itt	mi
 8004b3e:	232b      	movmi	r3, #43	; 0x2b
 8004b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b44:	f89a 3000 	ldrb.w	r3, [sl]
 8004b48:	2b2a      	cmp	r3, #42	; 0x2a
 8004b4a:	d015      	beq.n	8004b78 <_vfiprintf_r+0x13c>
 8004b4c:	4654      	mov	r4, sl
 8004b4e:	2000      	movs	r0, #0
 8004b50:	f04f 0c0a 	mov.w	ip, #10
 8004b54:	9a07      	ldr	r2, [sp, #28]
 8004b56:	4621      	mov	r1, r4
 8004b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b5c:	3b30      	subs	r3, #48	; 0x30
 8004b5e:	2b09      	cmp	r3, #9
 8004b60:	d94e      	bls.n	8004c00 <_vfiprintf_r+0x1c4>
 8004b62:	b1b0      	cbz	r0, 8004b92 <_vfiprintf_r+0x156>
 8004b64:	9207      	str	r2, [sp, #28]
 8004b66:	e014      	b.n	8004b92 <_vfiprintf_r+0x156>
 8004b68:	eba0 0308 	sub.w	r3, r0, r8
 8004b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b70:	4313      	orrs	r3, r2
 8004b72:	46a2      	mov	sl, r4
 8004b74:	9304      	str	r3, [sp, #16]
 8004b76:	e7d2      	b.n	8004b1e <_vfiprintf_r+0xe2>
 8004b78:	9b03      	ldr	r3, [sp, #12]
 8004b7a:	1d19      	adds	r1, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	9103      	str	r1, [sp, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	bfbb      	ittet	lt
 8004b84:	425b      	neglt	r3, r3
 8004b86:	f042 0202 	orrlt.w	r2, r2, #2
 8004b8a:	9307      	strge	r3, [sp, #28]
 8004b8c:	9307      	strlt	r3, [sp, #28]
 8004b8e:	bfb8      	it	lt
 8004b90:	9204      	strlt	r2, [sp, #16]
 8004b92:	7823      	ldrb	r3, [r4, #0]
 8004b94:	2b2e      	cmp	r3, #46	; 0x2e
 8004b96:	d10c      	bne.n	8004bb2 <_vfiprintf_r+0x176>
 8004b98:	7863      	ldrb	r3, [r4, #1]
 8004b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b9c:	d135      	bne.n	8004c0a <_vfiprintf_r+0x1ce>
 8004b9e:	9b03      	ldr	r3, [sp, #12]
 8004ba0:	3402      	adds	r4, #2
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	9203      	str	r2, [sp, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	bfb8      	it	lt
 8004bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8004bb0:	9305      	str	r3, [sp, #20]
 8004bb2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004c8c <_vfiprintf_r+0x250>
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	4650      	mov	r0, sl
 8004bba:	7821      	ldrb	r1, [r4, #0]
 8004bbc:	f7ff fa88 	bl	80040d0 <memchr>
 8004bc0:	b140      	cbz	r0, 8004bd4 <_vfiprintf_r+0x198>
 8004bc2:	2340      	movs	r3, #64	; 0x40
 8004bc4:	eba0 000a 	sub.w	r0, r0, sl
 8004bc8:	fa03 f000 	lsl.w	r0, r3, r0
 8004bcc:	9b04      	ldr	r3, [sp, #16]
 8004bce:	3401      	adds	r4, #1
 8004bd0:	4303      	orrs	r3, r0
 8004bd2:	9304      	str	r3, [sp, #16]
 8004bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bd8:	2206      	movs	r2, #6
 8004bda:	482d      	ldr	r0, [pc, #180]	; (8004c90 <_vfiprintf_r+0x254>)
 8004bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004be0:	f7ff fa76 	bl	80040d0 <memchr>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d03f      	beq.n	8004c68 <_vfiprintf_r+0x22c>
 8004be8:	4b2a      	ldr	r3, [pc, #168]	; (8004c94 <_vfiprintf_r+0x258>)
 8004bea:	bb1b      	cbnz	r3, 8004c34 <_vfiprintf_r+0x1f8>
 8004bec:	9b03      	ldr	r3, [sp, #12]
 8004bee:	3307      	adds	r3, #7
 8004bf0:	f023 0307 	bic.w	r3, r3, #7
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	9303      	str	r3, [sp, #12]
 8004bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bfa:	443b      	add	r3, r7
 8004bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8004bfe:	e767      	b.n	8004ad0 <_vfiprintf_r+0x94>
 8004c00:	460c      	mov	r4, r1
 8004c02:	2001      	movs	r0, #1
 8004c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c08:	e7a5      	b.n	8004b56 <_vfiprintf_r+0x11a>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f04f 0c0a 	mov.w	ip, #10
 8004c10:	4619      	mov	r1, r3
 8004c12:	3401      	adds	r4, #1
 8004c14:	9305      	str	r3, [sp, #20]
 8004c16:	4620      	mov	r0, r4
 8004c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c1c:	3a30      	subs	r2, #48	; 0x30
 8004c1e:	2a09      	cmp	r2, #9
 8004c20:	d903      	bls.n	8004c2a <_vfiprintf_r+0x1ee>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0c5      	beq.n	8004bb2 <_vfiprintf_r+0x176>
 8004c26:	9105      	str	r1, [sp, #20]
 8004c28:	e7c3      	b.n	8004bb2 <_vfiprintf_r+0x176>
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c32:	e7f0      	b.n	8004c16 <_vfiprintf_r+0x1da>
 8004c34:	ab03      	add	r3, sp, #12
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	462a      	mov	r2, r5
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	4b16      	ldr	r3, [pc, #88]	; (8004c98 <_vfiprintf_r+0x25c>)
 8004c3e:	a904      	add	r1, sp, #16
 8004c40:	f7fd feea 	bl	8002a18 <_printf_float>
 8004c44:	4607      	mov	r7, r0
 8004c46:	1c78      	adds	r0, r7, #1
 8004c48:	d1d6      	bne.n	8004bf8 <_vfiprintf_r+0x1bc>
 8004c4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c4c:	07d9      	lsls	r1, r3, #31
 8004c4e:	d405      	bmi.n	8004c5c <_vfiprintf_r+0x220>
 8004c50:	89ab      	ldrh	r3, [r5, #12]
 8004c52:	059a      	lsls	r2, r3, #22
 8004c54:	d402      	bmi.n	8004c5c <_vfiprintf_r+0x220>
 8004c56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c58:	f7ff fa30 	bl	80040bc <__retarget_lock_release_recursive>
 8004c5c:	89ab      	ldrh	r3, [r5, #12]
 8004c5e:	065b      	lsls	r3, r3, #25
 8004c60:	f53f af12 	bmi.w	8004a88 <_vfiprintf_r+0x4c>
 8004c64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c66:	e711      	b.n	8004a8c <_vfiprintf_r+0x50>
 8004c68:	ab03      	add	r3, sp, #12
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	462a      	mov	r2, r5
 8004c6e:	4630      	mov	r0, r6
 8004c70:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <_vfiprintf_r+0x25c>)
 8004c72:	a904      	add	r1, sp, #16
 8004c74:	f7fe f96c 	bl	8002f50 <_printf_i>
 8004c78:	e7e4      	b.n	8004c44 <_vfiprintf_r+0x208>
 8004c7a:	bf00      	nop
 8004c7c:	08005460 	.word	0x08005460
 8004c80:	08005480 	.word	0x08005480
 8004c84:	08005440 	.word	0x08005440
 8004c88:	080055fc 	.word	0x080055fc
 8004c8c:	08005602 	.word	0x08005602
 8004c90:	08005606 	.word	0x08005606
 8004c94:	08002a19 	.word	0x08002a19
 8004c98:	08004a17 	.word	0x08004a17

08004c9c <_sbrk_r>:
 8004c9c:	b538      	push	{r3, r4, r5, lr}
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	4d05      	ldr	r5, [pc, #20]	; (8004cb8 <_sbrk_r+0x1c>)
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	602b      	str	r3, [r5, #0]
 8004ca8:	f7fc fa02 	bl	80010b0 <_sbrk>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_sbrk_r+0x1a>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_sbrk_r+0x1a>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	200002a4 	.word	0x200002a4

08004cbc <__sread>:
 8004cbc:	b510      	push	{r4, lr}
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc4:	f000 faa4 	bl	8005210 <_read_r>
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	bfab      	itete	ge
 8004ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cce:	89a3      	ldrhlt	r3, [r4, #12]
 8004cd0:	181b      	addge	r3, r3, r0
 8004cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cd6:	bfac      	ite	ge
 8004cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cda:	81a3      	strhlt	r3, [r4, #12]
 8004cdc:	bd10      	pop	{r4, pc}

08004cde <__swrite>:
 8004cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce2:	461f      	mov	r7, r3
 8004ce4:	898b      	ldrh	r3, [r1, #12]
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	05db      	lsls	r3, r3, #23
 8004cea:	460c      	mov	r4, r1
 8004cec:	4616      	mov	r6, r2
 8004cee:	d505      	bpl.n	8004cfc <__swrite+0x1e>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf8:	f000 f9f4 	bl	80050e4 <_lseek_r>
 8004cfc:	89a3      	ldrh	r3, [r4, #12]
 8004cfe:	4632      	mov	r2, r6
 8004d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d04:	81a3      	strh	r3, [r4, #12]
 8004d06:	4628      	mov	r0, r5
 8004d08:	463b      	mov	r3, r7
 8004d0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d12:	f000 b869 	b.w	8004de8 <_write_r>

08004d16 <__sseek>:
 8004d16:	b510      	push	{r4, lr}
 8004d18:	460c      	mov	r4, r1
 8004d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1e:	f000 f9e1 	bl	80050e4 <_lseek_r>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	89a3      	ldrh	r3, [r4, #12]
 8004d26:	bf15      	itete	ne
 8004d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d32:	81a3      	strheq	r3, [r4, #12]
 8004d34:	bf18      	it	ne
 8004d36:	81a3      	strhne	r3, [r4, #12]
 8004d38:	bd10      	pop	{r4, pc}

08004d3a <__sclose>:
 8004d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d3e:	f000 b8f1 	b.w	8004f24 <_close_r>
	...

08004d44 <__swbuf_r>:
 8004d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d46:	460e      	mov	r6, r1
 8004d48:	4614      	mov	r4, r2
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	b118      	cbz	r0, 8004d56 <__swbuf_r+0x12>
 8004d4e:	6983      	ldr	r3, [r0, #24]
 8004d50:	b90b      	cbnz	r3, 8004d56 <__swbuf_r+0x12>
 8004d52:	f7ff f90f 	bl	8003f74 <__sinit>
 8004d56:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <__swbuf_r+0x98>)
 8004d58:	429c      	cmp	r4, r3
 8004d5a:	d12b      	bne.n	8004db4 <__swbuf_r+0x70>
 8004d5c:	686c      	ldr	r4, [r5, #4]
 8004d5e:	69a3      	ldr	r3, [r4, #24]
 8004d60:	60a3      	str	r3, [r4, #8]
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	071a      	lsls	r2, r3, #28
 8004d66:	d52f      	bpl.n	8004dc8 <__swbuf_r+0x84>
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	b36b      	cbz	r3, 8004dc8 <__swbuf_r+0x84>
 8004d6c:	6923      	ldr	r3, [r4, #16]
 8004d6e:	6820      	ldr	r0, [r4, #0]
 8004d70:	b2f6      	uxtb	r6, r6
 8004d72:	1ac0      	subs	r0, r0, r3
 8004d74:	6963      	ldr	r3, [r4, #20]
 8004d76:	4637      	mov	r7, r6
 8004d78:	4283      	cmp	r3, r0
 8004d7a:	dc04      	bgt.n	8004d86 <__swbuf_r+0x42>
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f000 f962 	bl	8005048 <_fflush_r>
 8004d84:	bb30      	cbnz	r0, 8004dd4 <__swbuf_r+0x90>
 8004d86:	68a3      	ldr	r3, [r4, #8]
 8004d88:	3001      	adds	r0, #1
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	60a3      	str	r3, [r4, #8]
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	6022      	str	r2, [r4, #0]
 8004d94:	701e      	strb	r6, [r3, #0]
 8004d96:	6963      	ldr	r3, [r4, #20]
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	d004      	beq.n	8004da6 <__swbuf_r+0x62>
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	07db      	lsls	r3, r3, #31
 8004da0:	d506      	bpl.n	8004db0 <__swbuf_r+0x6c>
 8004da2:	2e0a      	cmp	r6, #10
 8004da4:	d104      	bne.n	8004db0 <__swbuf_r+0x6c>
 8004da6:	4621      	mov	r1, r4
 8004da8:	4628      	mov	r0, r5
 8004daa:	f000 f94d 	bl	8005048 <_fflush_r>
 8004dae:	b988      	cbnz	r0, 8004dd4 <__swbuf_r+0x90>
 8004db0:	4638      	mov	r0, r7
 8004db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db4:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <__swbuf_r+0x9c>)
 8004db6:	429c      	cmp	r4, r3
 8004db8:	d101      	bne.n	8004dbe <__swbuf_r+0x7a>
 8004dba:	68ac      	ldr	r4, [r5, #8]
 8004dbc:	e7cf      	b.n	8004d5e <__swbuf_r+0x1a>
 8004dbe:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <__swbuf_r+0xa0>)
 8004dc0:	429c      	cmp	r4, r3
 8004dc2:	bf08      	it	eq
 8004dc4:	68ec      	ldreq	r4, [r5, #12]
 8004dc6:	e7ca      	b.n	8004d5e <__swbuf_r+0x1a>
 8004dc8:	4621      	mov	r1, r4
 8004dca:	4628      	mov	r0, r5
 8004dcc:	f000 f81e 	bl	8004e0c <__swsetup_r>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d0cb      	beq.n	8004d6c <__swbuf_r+0x28>
 8004dd4:	f04f 37ff 	mov.w	r7, #4294967295
 8004dd8:	e7ea      	b.n	8004db0 <__swbuf_r+0x6c>
 8004dda:	bf00      	nop
 8004ddc:	08005460 	.word	0x08005460
 8004de0:	08005480 	.word	0x08005480
 8004de4:	08005440 	.word	0x08005440

08004de8 <_write_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	2200      	movs	r2, #0
 8004df2:	4d05      	ldr	r5, [pc, #20]	; (8004e08 <_write_r+0x20>)
 8004df4:	602a      	str	r2, [r5, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f7fc f90d 	bl	8001016 <_write>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d102      	bne.n	8004e06 <_write_r+0x1e>
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	b103      	cbz	r3, 8004e06 <_write_r+0x1e>
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	200002a4 	.word	0x200002a4

08004e0c <__swsetup_r>:
 8004e0c:	4b32      	ldr	r3, [pc, #200]	; (8004ed8 <__swsetup_r+0xcc>)
 8004e0e:	b570      	push	{r4, r5, r6, lr}
 8004e10:	681d      	ldr	r5, [r3, #0]
 8004e12:	4606      	mov	r6, r0
 8004e14:	460c      	mov	r4, r1
 8004e16:	b125      	cbz	r5, 8004e22 <__swsetup_r+0x16>
 8004e18:	69ab      	ldr	r3, [r5, #24]
 8004e1a:	b913      	cbnz	r3, 8004e22 <__swsetup_r+0x16>
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f7ff f8a9 	bl	8003f74 <__sinit>
 8004e22:	4b2e      	ldr	r3, [pc, #184]	; (8004edc <__swsetup_r+0xd0>)
 8004e24:	429c      	cmp	r4, r3
 8004e26:	d10f      	bne.n	8004e48 <__swsetup_r+0x3c>
 8004e28:	686c      	ldr	r4, [r5, #4]
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e30:	0719      	lsls	r1, r3, #28
 8004e32:	d42c      	bmi.n	8004e8e <__swsetup_r+0x82>
 8004e34:	06dd      	lsls	r5, r3, #27
 8004e36:	d411      	bmi.n	8004e5c <__swsetup_r+0x50>
 8004e38:	2309      	movs	r3, #9
 8004e3a:	6033      	str	r3, [r6, #0]
 8004e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295
 8004e44:	81a3      	strh	r3, [r4, #12]
 8004e46:	e03e      	b.n	8004ec6 <__swsetup_r+0xba>
 8004e48:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <__swsetup_r+0xd4>)
 8004e4a:	429c      	cmp	r4, r3
 8004e4c:	d101      	bne.n	8004e52 <__swsetup_r+0x46>
 8004e4e:	68ac      	ldr	r4, [r5, #8]
 8004e50:	e7eb      	b.n	8004e2a <__swsetup_r+0x1e>
 8004e52:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <__swsetup_r+0xd8>)
 8004e54:	429c      	cmp	r4, r3
 8004e56:	bf08      	it	eq
 8004e58:	68ec      	ldreq	r4, [r5, #12]
 8004e5a:	e7e6      	b.n	8004e2a <__swsetup_r+0x1e>
 8004e5c:	0758      	lsls	r0, r3, #29
 8004e5e:	d512      	bpl.n	8004e86 <__swsetup_r+0x7a>
 8004e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e62:	b141      	cbz	r1, 8004e76 <__swsetup_r+0x6a>
 8004e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e68:	4299      	cmp	r1, r3
 8004e6a:	d002      	beq.n	8004e72 <__swsetup_r+0x66>
 8004e6c:	4630      	mov	r0, r6
 8004e6e:	f7ff fce1 	bl	8004834 <_free_r>
 8004e72:	2300      	movs	r3, #0
 8004e74:	6363      	str	r3, [r4, #52]	; 0x34
 8004e76:	89a3      	ldrh	r3, [r4, #12]
 8004e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e7c:	81a3      	strh	r3, [r4, #12]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	6063      	str	r3, [r4, #4]
 8004e82:	6923      	ldr	r3, [r4, #16]
 8004e84:	6023      	str	r3, [r4, #0]
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	f043 0308 	orr.w	r3, r3, #8
 8004e8c:	81a3      	strh	r3, [r4, #12]
 8004e8e:	6923      	ldr	r3, [r4, #16]
 8004e90:	b94b      	cbnz	r3, 8004ea6 <__swsetup_r+0x9a>
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9c:	d003      	beq.n	8004ea6 <__swsetup_r+0x9a>
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f000 f957 	bl	8005154 <__smakebuf_r>
 8004ea6:	89a0      	ldrh	r0, [r4, #12]
 8004ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004eac:	f010 0301 	ands.w	r3, r0, #1
 8004eb0:	d00a      	beq.n	8004ec8 <__swsetup_r+0xbc>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60a3      	str	r3, [r4, #8]
 8004eb6:	6963      	ldr	r3, [r4, #20]
 8004eb8:	425b      	negs	r3, r3
 8004eba:	61a3      	str	r3, [r4, #24]
 8004ebc:	6923      	ldr	r3, [r4, #16]
 8004ebe:	b943      	cbnz	r3, 8004ed2 <__swsetup_r+0xc6>
 8004ec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ec4:	d1ba      	bne.n	8004e3c <__swsetup_r+0x30>
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	0781      	lsls	r1, r0, #30
 8004eca:	bf58      	it	pl
 8004ecc:	6963      	ldrpl	r3, [r4, #20]
 8004ece:	60a3      	str	r3, [r4, #8]
 8004ed0:	e7f4      	b.n	8004ebc <__swsetup_r+0xb0>
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	e7f7      	b.n	8004ec6 <__swsetup_r+0xba>
 8004ed6:	bf00      	nop
 8004ed8:	2000000c 	.word	0x2000000c
 8004edc:	08005460 	.word	0x08005460
 8004ee0:	08005480 	.word	0x08005480
 8004ee4:	08005440 	.word	0x08005440

08004ee8 <__assert_func>:
 8004ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004eea:	4614      	mov	r4, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <__assert_func+0x2c>)
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68d8      	ldr	r0, [r3, #12]
 8004ef6:	b14c      	cbz	r4, 8004f0c <__assert_func+0x24>
 8004ef8:	4b07      	ldr	r3, [pc, #28]	; (8004f18 <__assert_func+0x30>)
 8004efa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004efe:	9100      	str	r1, [sp, #0]
 8004f00:	462b      	mov	r3, r5
 8004f02:	4906      	ldr	r1, [pc, #24]	; (8004f1c <__assert_func+0x34>)
 8004f04:	f000 f8dc 	bl	80050c0 <fiprintf>
 8004f08:	f000 f9a1 	bl	800524e <abort>
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <__assert_func+0x38>)
 8004f0e:	461c      	mov	r4, r3
 8004f10:	e7f3      	b.n	8004efa <__assert_func+0x12>
 8004f12:	bf00      	nop
 8004f14:	2000000c 	.word	0x2000000c
 8004f18:	0800560d 	.word	0x0800560d
 8004f1c:	0800561a 	.word	0x0800561a
 8004f20:	08005648 	.word	0x08005648

08004f24 <_close_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	2300      	movs	r3, #0
 8004f28:	4d05      	ldr	r5, [pc, #20]	; (8004f40 <_close_r+0x1c>)
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	602b      	str	r3, [r5, #0]
 8004f30:	f7fc f88d 	bl	800104e <_close>
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	d102      	bne.n	8004f3e <_close_r+0x1a>
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	b103      	cbz	r3, 8004f3e <_close_r+0x1a>
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
 8004f40:	200002a4 	.word	0x200002a4

08004f44 <__sflush_r>:
 8004f44:	898a      	ldrh	r2, [r1, #12]
 8004f46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f48:	4605      	mov	r5, r0
 8004f4a:	0710      	lsls	r0, r2, #28
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	d457      	bmi.n	8005000 <__sflush_r+0xbc>
 8004f50:	684b      	ldr	r3, [r1, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	dc04      	bgt.n	8004f60 <__sflush_r+0x1c>
 8004f56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	dc01      	bgt.n	8004f60 <__sflush_r+0x1c>
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	d0fa      	beq.n	8004f5c <__sflush_r+0x18>
 8004f66:	2300      	movs	r3, #0
 8004f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f6c:	682f      	ldr	r7, [r5, #0]
 8004f6e:	602b      	str	r3, [r5, #0]
 8004f70:	d032      	beq.n	8004fd8 <__sflush_r+0x94>
 8004f72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f74:	89a3      	ldrh	r3, [r4, #12]
 8004f76:	075a      	lsls	r2, r3, #29
 8004f78:	d505      	bpl.n	8004f86 <__sflush_r+0x42>
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	1ac0      	subs	r0, r0, r3
 8004f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f80:	b10b      	cbz	r3, 8004f86 <__sflush_r+0x42>
 8004f82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f84:	1ac0      	subs	r0, r0, r3
 8004f86:	2300      	movs	r3, #0
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f8c:	4628      	mov	r0, r5
 8004f8e:	6a21      	ldr	r1, [r4, #32]
 8004f90:	47b0      	blx	r6
 8004f92:	1c43      	adds	r3, r0, #1
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	d106      	bne.n	8004fa6 <__sflush_r+0x62>
 8004f98:	6829      	ldr	r1, [r5, #0]
 8004f9a:	291d      	cmp	r1, #29
 8004f9c:	d82c      	bhi.n	8004ff8 <__sflush_r+0xb4>
 8004f9e:	4a29      	ldr	r2, [pc, #164]	; (8005044 <__sflush_r+0x100>)
 8004fa0:	40ca      	lsrs	r2, r1
 8004fa2:	07d6      	lsls	r6, r2, #31
 8004fa4:	d528      	bpl.n	8004ff8 <__sflush_r+0xb4>
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	6062      	str	r2, [r4, #4]
 8004faa:	6922      	ldr	r2, [r4, #16]
 8004fac:	04d9      	lsls	r1, r3, #19
 8004fae:	6022      	str	r2, [r4, #0]
 8004fb0:	d504      	bpl.n	8004fbc <__sflush_r+0x78>
 8004fb2:	1c42      	adds	r2, r0, #1
 8004fb4:	d101      	bne.n	8004fba <__sflush_r+0x76>
 8004fb6:	682b      	ldr	r3, [r5, #0]
 8004fb8:	b903      	cbnz	r3, 8004fbc <__sflush_r+0x78>
 8004fba:	6560      	str	r0, [r4, #84]	; 0x54
 8004fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fbe:	602f      	str	r7, [r5, #0]
 8004fc0:	2900      	cmp	r1, #0
 8004fc2:	d0cb      	beq.n	8004f5c <__sflush_r+0x18>
 8004fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fc8:	4299      	cmp	r1, r3
 8004fca:	d002      	beq.n	8004fd2 <__sflush_r+0x8e>
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f7ff fc31 	bl	8004834 <_free_r>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	6360      	str	r0, [r4, #52]	; 0x34
 8004fd6:	e7c2      	b.n	8004f5e <__sflush_r+0x1a>
 8004fd8:	6a21      	ldr	r1, [r4, #32]
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b0      	blx	r6
 8004fe0:	1c41      	adds	r1, r0, #1
 8004fe2:	d1c7      	bne.n	8004f74 <__sflush_r+0x30>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0c4      	beq.n	8004f74 <__sflush_r+0x30>
 8004fea:	2b1d      	cmp	r3, #29
 8004fec:	d001      	beq.n	8004ff2 <__sflush_r+0xae>
 8004fee:	2b16      	cmp	r3, #22
 8004ff0:	d101      	bne.n	8004ff6 <__sflush_r+0xb2>
 8004ff2:	602f      	str	r7, [r5, #0]
 8004ff4:	e7b2      	b.n	8004f5c <__sflush_r+0x18>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	e7ae      	b.n	8004f5e <__sflush_r+0x1a>
 8005000:	690f      	ldr	r7, [r1, #16]
 8005002:	2f00      	cmp	r7, #0
 8005004:	d0aa      	beq.n	8004f5c <__sflush_r+0x18>
 8005006:	0793      	lsls	r3, r2, #30
 8005008:	bf18      	it	ne
 800500a:	2300      	movne	r3, #0
 800500c:	680e      	ldr	r6, [r1, #0]
 800500e:	bf08      	it	eq
 8005010:	694b      	ldreq	r3, [r1, #20]
 8005012:	1bf6      	subs	r6, r6, r7
 8005014:	600f      	str	r7, [r1, #0]
 8005016:	608b      	str	r3, [r1, #8]
 8005018:	2e00      	cmp	r6, #0
 800501a:	dd9f      	ble.n	8004f5c <__sflush_r+0x18>
 800501c:	4633      	mov	r3, r6
 800501e:	463a      	mov	r2, r7
 8005020:	4628      	mov	r0, r5
 8005022:	6a21      	ldr	r1, [r4, #32]
 8005024:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005028:	47e0      	blx	ip
 800502a:	2800      	cmp	r0, #0
 800502c:	dc06      	bgt.n	800503c <__sflush_r+0xf8>
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	f04f 30ff 	mov.w	r0, #4294967295
 8005034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005038:	81a3      	strh	r3, [r4, #12]
 800503a:	e790      	b.n	8004f5e <__sflush_r+0x1a>
 800503c:	4407      	add	r7, r0
 800503e:	1a36      	subs	r6, r6, r0
 8005040:	e7ea      	b.n	8005018 <__sflush_r+0xd4>
 8005042:	bf00      	nop
 8005044:	20400001 	.word	0x20400001

08005048 <_fflush_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	690b      	ldr	r3, [r1, #16]
 800504c:	4605      	mov	r5, r0
 800504e:	460c      	mov	r4, r1
 8005050:	b913      	cbnz	r3, 8005058 <_fflush_r+0x10>
 8005052:	2500      	movs	r5, #0
 8005054:	4628      	mov	r0, r5
 8005056:	bd38      	pop	{r3, r4, r5, pc}
 8005058:	b118      	cbz	r0, 8005062 <_fflush_r+0x1a>
 800505a:	6983      	ldr	r3, [r0, #24]
 800505c:	b90b      	cbnz	r3, 8005062 <_fflush_r+0x1a>
 800505e:	f7fe ff89 	bl	8003f74 <__sinit>
 8005062:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <_fflush_r+0x6c>)
 8005064:	429c      	cmp	r4, r3
 8005066:	d11b      	bne.n	80050a0 <_fflush_r+0x58>
 8005068:	686c      	ldr	r4, [r5, #4]
 800506a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0ef      	beq.n	8005052 <_fflush_r+0xa>
 8005072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005074:	07d0      	lsls	r0, r2, #31
 8005076:	d404      	bmi.n	8005082 <_fflush_r+0x3a>
 8005078:	0599      	lsls	r1, r3, #22
 800507a:	d402      	bmi.n	8005082 <_fflush_r+0x3a>
 800507c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800507e:	f7ff f81c 	bl	80040ba <__retarget_lock_acquire_recursive>
 8005082:	4628      	mov	r0, r5
 8005084:	4621      	mov	r1, r4
 8005086:	f7ff ff5d 	bl	8004f44 <__sflush_r>
 800508a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800508c:	4605      	mov	r5, r0
 800508e:	07da      	lsls	r2, r3, #31
 8005090:	d4e0      	bmi.n	8005054 <_fflush_r+0xc>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	059b      	lsls	r3, r3, #22
 8005096:	d4dd      	bmi.n	8005054 <_fflush_r+0xc>
 8005098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800509a:	f7ff f80f 	bl	80040bc <__retarget_lock_release_recursive>
 800509e:	e7d9      	b.n	8005054 <_fflush_r+0xc>
 80050a0:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <_fflush_r+0x70>)
 80050a2:	429c      	cmp	r4, r3
 80050a4:	d101      	bne.n	80050aa <_fflush_r+0x62>
 80050a6:	68ac      	ldr	r4, [r5, #8]
 80050a8:	e7df      	b.n	800506a <_fflush_r+0x22>
 80050aa:	4b04      	ldr	r3, [pc, #16]	; (80050bc <_fflush_r+0x74>)
 80050ac:	429c      	cmp	r4, r3
 80050ae:	bf08      	it	eq
 80050b0:	68ec      	ldreq	r4, [r5, #12]
 80050b2:	e7da      	b.n	800506a <_fflush_r+0x22>
 80050b4:	08005460 	.word	0x08005460
 80050b8:	08005480 	.word	0x08005480
 80050bc:	08005440 	.word	0x08005440

080050c0 <fiprintf>:
 80050c0:	b40e      	push	{r1, r2, r3}
 80050c2:	b503      	push	{r0, r1, lr}
 80050c4:	4601      	mov	r1, r0
 80050c6:	ab03      	add	r3, sp, #12
 80050c8:	4805      	ldr	r0, [pc, #20]	; (80050e0 <fiprintf+0x20>)
 80050ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80050ce:	6800      	ldr	r0, [r0, #0]
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	f7ff fcb3 	bl	8004a3c <_vfiprintf_r>
 80050d6:	b002      	add	sp, #8
 80050d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050dc:	b003      	add	sp, #12
 80050de:	4770      	bx	lr
 80050e0:	2000000c 	.word	0x2000000c

080050e4 <_lseek_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4604      	mov	r4, r0
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	2200      	movs	r2, #0
 80050ee:	4d05      	ldr	r5, [pc, #20]	; (8005104 <_lseek_r+0x20>)
 80050f0:	602a      	str	r2, [r5, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	f7fb ffcf 	bl	8001096 <_lseek>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_lseek_r+0x1e>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_lseek_r+0x1e>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	200002a4 	.word	0x200002a4

08005108 <__swhatbuf_r>:
 8005108:	b570      	push	{r4, r5, r6, lr}
 800510a:	460e      	mov	r6, r1
 800510c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005110:	4614      	mov	r4, r2
 8005112:	2900      	cmp	r1, #0
 8005114:	461d      	mov	r5, r3
 8005116:	b096      	sub	sp, #88	; 0x58
 8005118:	da08      	bge.n	800512c <__swhatbuf_r+0x24>
 800511a:	2200      	movs	r2, #0
 800511c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005120:	602a      	str	r2, [r5, #0]
 8005122:	061a      	lsls	r2, r3, #24
 8005124:	d410      	bmi.n	8005148 <__swhatbuf_r+0x40>
 8005126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800512a:	e00e      	b.n	800514a <__swhatbuf_r+0x42>
 800512c:	466a      	mov	r2, sp
 800512e:	f000 f895 	bl	800525c <_fstat_r>
 8005132:	2800      	cmp	r0, #0
 8005134:	dbf1      	blt.n	800511a <__swhatbuf_r+0x12>
 8005136:	9a01      	ldr	r2, [sp, #4]
 8005138:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800513c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005140:	425a      	negs	r2, r3
 8005142:	415a      	adcs	r2, r3
 8005144:	602a      	str	r2, [r5, #0]
 8005146:	e7ee      	b.n	8005126 <__swhatbuf_r+0x1e>
 8005148:	2340      	movs	r3, #64	; 0x40
 800514a:	2000      	movs	r0, #0
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	b016      	add	sp, #88	; 0x58
 8005150:	bd70      	pop	{r4, r5, r6, pc}
	...

08005154 <__smakebuf_r>:
 8005154:	898b      	ldrh	r3, [r1, #12]
 8005156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005158:	079d      	lsls	r5, r3, #30
 800515a:	4606      	mov	r6, r0
 800515c:	460c      	mov	r4, r1
 800515e:	d507      	bpl.n	8005170 <__smakebuf_r+0x1c>
 8005160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	6123      	str	r3, [r4, #16]
 8005168:	2301      	movs	r3, #1
 800516a:	6163      	str	r3, [r4, #20]
 800516c:	b002      	add	sp, #8
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	466a      	mov	r2, sp
 8005172:	ab01      	add	r3, sp, #4
 8005174:	f7ff ffc8 	bl	8005108 <__swhatbuf_r>
 8005178:	9900      	ldr	r1, [sp, #0]
 800517a:	4605      	mov	r5, r0
 800517c:	4630      	mov	r0, r6
 800517e:	f7ff fbc1 	bl	8004904 <_malloc_r>
 8005182:	b948      	cbnz	r0, 8005198 <__smakebuf_r+0x44>
 8005184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005188:	059a      	lsls	r2, r3, #22
 800518a:	d4ef      	bmi.n	800516c <__smakebuf_r+0x18>
 800518c:	f023 0303 	bic.w	r3, r3, #3
 8005190:	f043 0302 	orr.w	r3, r3, #2
 8005194:	81a3      	strh	r3, [r4, #12]
 8005196:	e7e3      	b.n	8005160 <__smakebuf_r+0xc>
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <__smakebuf_r+0x7c>)
 800519a:	62b3      	str	r3, [r6, #40]	; 0x28
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	6020      	str	r0, [r4, #0]
 80051a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a4:	81a3      	strh	r3, [r4, #12]
 80051a6:	9b00      	ldr	r3, [sp, #0]
 80051a8:	6120      	str	r0, [r4, #16]
 80051aa:	6163      	str	r3, [r4, #20]
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	b15b      	cbz	r3, 80051c8 <__smakebuf_r+0x74>
 80051b0:	4630      	mov	r0, r6
 80051b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051b6:	f000 f863 	bl	8005280 <_isatty_r>
 80051ba:	b128      	cbz	r0, 80051c8 <__smakebuf_r+0x74>
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	f023 0303 	bic.w	r3, r3, #3
 80051c2:	f043 0301 	orr.w	r3, r3, #1
 80051c6:	81a3      	strh	r3, [r4, #12]
 80051c8:	89a0      	ldrh	r0, [r4, #12]
 80051ca:	4305      	orrs	r5, r0
 80051cc:	81a5      	strh	r5, [r4, #12]
 80051ce:	e7cd      	b.n	800516c <__smakebuf_r+0x18>
 80051d0:	08003f0d 	.word	0x08003f0d

080051d4 <__ascii_mbtowc>:
 80051d4:	b082      	sub	sp, #8
 80051d6:	b901      	cbnz	r1, 80051da <__ascii_mbtowc+0x6>
 80051d8:	a901      	add	r1, sp, #4
 80051da:	b142      	cbz	r2, 80051ee <__ascii_mbtowc+0x1a>
 80051dc:	b14b      	cbz	r3, 80051f2 <__ascii_mbtowc+0x1e>
 80051de:	7813      	ldrb	r3, [r2, #0]
 80051e0:	600b      	str	r3, [r1, #0]
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	1e10      	subs	r0, r2, #0
 80051e6:	bf18      	it	ne
 80051e8:	2001      	movne	r0, #1
 80051ea:	b002      	add	sp, #8
 80051ec:	4770      	bx	lr
 80051ee:	4610      	mov	r0, r2
 80051f0:	e7fb      	b.n	80051ea <__ascii_mbtowc+0x16>
 80051f2:	f06f 0001 	mvn.w	r0, #1
 80051f6:	e7f8      	b.n	80051ea <__ascii_mbtowc+0x16>

080051f8 <__malloc_lock>:
 80051f8:	4801      	ldr	r0, [pc, #4]	; (8005200 <__malloc_lock+0x8>)
 80051fa:	f7fe bf5e 	b.w	80040ba <__retarget_lock_acquire_recursive>
 80051fe:	bf00      	nop
 8005200:	20000298 	.word	0x20000298

08005204 <__malloc_unlock>:
 8005204:	4801      	ldr	r0, [pc, #4]	; (800520c <__malloc_unlock+0x8>)
 8005206:	f7fe bf59 	b.w	80040bc <__retarget_lock_release_recursive>
 800520a:	bf00      	nop
 800520c:	20000298 	.word	0x20000298

08005210 <_read_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	2200      	movs	r2, #0
 800521a:	4d05      	ldr	r5, [pc, #20]	; (8005230 <_read_r+0x20>)
 800521c:	602a      	str	r2, [r5, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	f7fb fedc 	bl	8000fdc <_read>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_read_r+0x1e>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_read_r+0x1e>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	200002a4 	.word	0x200002a4

08005234 <__ascii_wctomb>:
 8005234:	4603      	mov	r3, r0
 8005236:	4608      	mov	r0, r1
 8005238:	b141      	cbz	r1, 800524c <__ascii_wctomb+0x18>
 800523a:	2aff      	cmp	r2, #255	; 0xff
 800523c:	d904      	bls.n	8005248 <__ascii_wctomb+0x14>
 800523e:	228a      	movs	r2, #138	; 0x8a
 8005240:	f04f 30ff 	mov.w	r0, #4294967295
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	4770      	bx	lr
 8005248:	2001      	movs	r0, #1
 800524a:	700a      	strb	r2, [r1, #0]
 800524c:	4770      	bx	lr

0800524e <abort>:
 800524e:	2006      	movs	r0, #6
 8005250:	b508      	push	{r3, lr}
 8005252:	f000 f84d 	bl	80052f0 <raise>
 8005256:	2001      	movs	r0, #1
 8005258:	f7fb feb6 	bl	8000fc8 <_exit>

0800525c <_fstat_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	2300      	movs	r3, #0
 8005260:	4d06      	ldr	r5, [pc, #24]	; (800527c <_fstat_r+0x20>)
 8005262:	4604      	mov	r4, r0
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	602b      	str	r3, [r5, #0]
 800526a:	f7fb fefb 	bl	8001064 <_fstat>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	d102      	bne.n	8005278 <_fstat_r+0x1c>
 8005272:	682b      	ldr	r3, [r5, #0]
 8005274:	b103      	cbz	r3, 8005278 <_fstat_r+0x1c>
 8005276:	6023      	str	r3, [r4, #0]
 8005278:	bd38      	pop	{r3, r4, r5, pc}
 800527a:	bf00      	nop
 800527c:	200002a4 	.word	0x200002a4

08005280 <_isatty_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	2300      	movs	r3, #0
 8005284:	4d05      	ldr	r5, [pc, #20]	; (800529c <_isatty_r+0x1c>)
 8005286:	4604      	mov	r4, r0
 8005288:	4608      	mov	r0, r1
 800528a:	602b      	str	r3, [r5, #0]
 800528c:	f7fb fef9 	bl	8001082 <_isatty>
 8005290:	1c43      	adds	r3, r0, #1
 8005292:	d102      	bne.n	800529a <_isatty_r+0x1a>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	b103      	cbz	r3, 800529a <_isatty_r+0x1a>
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	bd38      	pop	{r3, r4, r5, pc}
 800529c:	200002a4 	.word	0x200002a4

080052a0 <_raise_r>:
 80052a0:	291f      	cmp	r1, #31
 80052a2:	b538      	push	{r3, r4, r5, lr}
 80052a4:	4604      	mov	r4, r0
 80052a6:	460d      	mov	r5, r1
 80052a8:	d904      	bls.n	80052b4 <_raise_r+0x14>
 80052aa:	2316      	movs	r3, #22
 80052ac:	6003      	str	r3, [r0, #0]
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80052b6:	b112      	cbz	r2, 80052be <_raise_r+0x1e>
 80052b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80052bc:	b94b      	cbnz	r3, 80052d2 <_raise_r+0x32>
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 f830 	bl	8005324 <_getpid_r>
 80052c4:	462a      	mov	r2, r5
 80052c6:	4601      	mov	r1, r0
 80052c8:	4620      	mov	r0, r4
 80052ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ce:	f000 b817 	b.w	8005300 <_kill_r>
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d00a      	beq.n	80052ec <_raise_r+0x4c>
 80052d6:	1c59      	adds	r1, r3, #1
 80052d8:	d103      	bne.n	80052e2 <_raise_r+0x42>
 80052da:	2316      	movs	r3, #22
 80052dc:	6003      	str	r3, [r0, #0]
 80052de:	2001      	movs	r0, #1
 80052e0:	e7e7      	b.n	80052b2 <_raise_r+0x12>
 80052e2:	2400      	movs	r4, #0
 80052e4:	4628      	mov	r0, r5
 80052e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80052ea:	4798      	blx	r3
 80052ec:	2000      	movs	r0, #0
 80052ee:	e7e0      	b.n	80052b2 <_raise_r+0x12>

080052f0 <raise>:
 80052f0:	4b02      	ldr	r3, [pc, #8]	; (80052fc <raise+0xc>)
 80052f2:	4601      	mov	r1, r0
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	f7ff bfd3 	b.w	80052a0 <_raise_r>
 80052fa:	bf00      	nop
 80052fc:	2000000c 	.word	0x2000000c

08005300 <_kill_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	2300      	movs	r3, #0
 8005304:	4d06      	ldr	r5, [pc, #24]	; (8005320 <_kill_r+0x20>)
 8005306:	4604      	mov	r4, r0
 8005308:	4608      	mov	r0, r1
 800530a:	4611      	mov	r1, r2
 800530c:	602b      	str	r3, [r5, #0]
 800530e:	f7fb fe4b 	bl	8000fa8 <_kill>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	d102      	bne.n	800531c <_kill_r+0x1c>
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	b103      	cbz	r3, 800531c <_kill_r+0x1c>
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	bd38      	pop	{r3, r4, r5, pc}
 800531e:	bf00      	nop
 8005320:	200002a4 	.word	0x200002a4

08005324 <_getpid_r>:
 8005324:	f7fb be39 	b.w	8000f9a <_getpid>

08005328 <_init>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	bf00      	nop
 800532c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532e:	bc08      	pop	{r3}
 8005330:	469e      	mov	lr, r3
 8005332:	4770      	bx	lr

08005334 <_fini>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr
