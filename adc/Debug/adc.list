
adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003604  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003710  08003710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080037f8  080037f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037f8  080037f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037f8  080037f8  000137f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  08003870  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003870  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000785d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b22  00000000  00000000  000278f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00029418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  00029ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f3  00000000  00000000  0002a470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096e6  00000000  00000000  00042763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008875b  00000000  00000000  0004be49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d45a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002910  00000000  00000000  000d45f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080036f8 	.word	0x080036f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080036f8 	.word	0x080036f8

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f002 f99a 	bl	8002496 <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000100 	.word	0x20000100

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000174:	f000 fb66 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000178:	f000 f824 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017c:	f000 f910 	bl	80003a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000180:	f000 f8f0 	bl	8000364 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000184:	f000 f8c4 	bl	8000310 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000188:	f000 f874 	bl	8000274 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("adc test\n\r");
 800018c:	4809      	ldr	r0, [pc, #36]	; (80001b4 <main+0x44>)
 800018e:	f002 fb1f 	bl	80027d0 <iprintf>
  HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 8000192:	2202      	movs	r2, #2
 8000194:	4908      	ldr	r1, [pc, #32]	; (80001b8 <main+0x48>)
 8000196:	4809      	ldr	r0, [pc, #36]	; (80001bc <main+0x4c>)
 8000198:	f000 fcb2 	bl	8000b00 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("ADC X : %ld, ADC Y : %ld\n\r", adc_value[0], adc_value[1]);
 800019c:	4b06      	ldr	r3, [pc, #24]	; (80001b8 <main+0x48>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a05      	ldr	r2, [pc, #20]	; (80001b8 <main+0x48>)
 80001a2:	6852      	ldr	r2, [r2, #4]
 80001a4:	4619      	mov	r1, r3
 80001a6:	4806      	ldr	r0, [pc, #24]	; (80001c0 <main+0x50>)
 80001a8:	f002 fb12 	bl	80027d0 <iprintf>
	  HAL_Delay(100);
 80001ac:	2064      	movs	r0, #100	; 0x64
 80001ae:	f000 fbab 	bl	8000908 <HAL_Delay>
	  printf("ADC X : %ld, ADC Y : %ld\n\r", adc_value[0], adc_value[1]);
 80001b2:	e7f3      	b.n	800019c <main+0x2c>
 80001b4:	08003710 	.word	0x08003710
 80001b8:	20000144 	.word	0x20000144
 80001bc:	2000008c 	.word	0x2000008c
 80001c0:	0800371c 	.word	0x0800371c

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b094      	sub	sp, #80	; 0x50
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f002 faf4 	bl	80027c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001f4:	2302      	movs	r3, #2
 80001f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f8:	2301      	movs	r3, #1
 80001fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001fc:	2310      	movs	r3, #16
 80001fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000200:	2302      	movs	r3, #2
 8000202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000204:	2300      	movs	r3, #0
 8000206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000208:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800020c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fc22 	bl	8001a5c <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800021e:	f000 f92d 	bl	800047c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2302      	movs	r3, #2
 8000228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800022e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000232:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fe8e 	bl	8001f60 <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800024a:	f000 f917 	bl	800047c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800024e:	2302      	movs	r3, #2
 8000250:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000252:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000256:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f002 f818 	bl	8002290 <HAL_RCCEx_PeriphCLKConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000266:	f000 f909 	bl	800047c <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3750      	adds	r7, #80	; 0x50
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000284:	4b20      	ldr	r3, [pc, #128]	; (8000308 <MX_ADC1_Init+0x94>)
 8000286:	4a21      	ldr	r2, [pc, #132]	; (800030c <MX_ADC1_Init+0x98>)
 8000288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800028a:	4b1f      	ldr	r3, [pc, #124]	; (8000308 <MX_ADC1_Init+0x94>)
 800028c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000290:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <MX_ADC1_Init+0x94>)
 8000294:	2201      	movs	r2, #1
 8000296:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000298:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <MX_ADC1_Init+0x94>)
 800029a:	2200      	movs	r2, #0
 800029c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800029e:	4b1a      	ldr	r3, [pc, #104]	; (8000308 <MX_ADC1_Init+0x94>)
 80002a0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a6:	4b18      	ldr	r3, [pc, #96]	; (8000308 <MX_ADC1_Init+0x94>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MX_ADC1_Init+0x94>)
 80002ae:	2202      	movs	r2, #2
 80002b0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b2:	4815      	ldr	r0, [pc, #84]	; (8000308 <MX_ADC1_Init+0x94>)
 80002b4:	f000 fb4c 	bl	8000950 <HAL_ADC_Init>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002be:	f000 f8dd 	bl	800047c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002c2:	2306      	movs	r3, #6
 80002c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002ca:	2307      	movs	r3, #7
 80002cc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4619      	mov	r1, r3
 80002d2:	480d      	ldr	r0, [pc, #52]	; (8000308 <MX_ADC1_Init+0x94>)
 80002d4:	f000 fd0e 	bl	8000cf4 <HAL_ADC_ConfigChannel>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002de:	f000 f8cd 	bl	800047c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002e2:	2307      	movs	r3, #7
 80002e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	4806      	ldr	r0, [pc, #24]	; (8000308 <MX_ADC1_Init+0x94>)
 80002f0:	f000 fd00 	bl	8000cf4 <HAL_ADC_ConfigChannel>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002fa:	f000 f8bf 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	2000008c 	.word	0x2000008c
 800030c:	40012400 	.word	0x40012400

08000310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000316:	4a12      	ldr	r2, [pc, #72]	; (8000360 <MX_USART2_UART_Init+0x50>)
 8000318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800031a:	4b10      	ldr	r3, [pc, #64]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800031c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000328:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800032e:	4b0b      	ldr	r3, [pc, #44]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000336:	220c      	movs	r2, #12
 8000338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <MX_USART2_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_USART2_UART_Init+0x4c>)
 8000348:	f002 f858 	bl	80023fc <HAL_UART_Init>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000352:	f000 f893 	bl	800047c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000100 	.word	0x20000100
 8000360:	40004400 	.word	0x40004400

08000364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800036a:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_DMA_Init+0x38>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	4a0b      	ldr	r2, [pc, #44]	; (800039c <MX_DMA_Init+0x38>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6153      	str	r3, [r2, #20]
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_DMA_Init+0x38>)
 8000378:	695b      	ldr	r3, [r3, #20]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	2100      	movs	r1, #0
 8000386:	200b      	movs	r0, #11
 8000388:	f000 ff85 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800038c:	200b      	movs	r0, #11
 800038e:	f000 ff9e 	bl	80012ce <HAL_NVIC_EnableIRQ>

}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	4b2d      	ldr	r3, [pc, #180]	; (800046c <MX_GPIO_Init+0xcc>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a2c      	ldr	r2, [pc, #176]	; (800046c <MX_GPIO_Init+0xcc>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b2a      	ldr	r3, [pc, #168]	; (800046c <MX_GPIO_Init+0xcc>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0310 	and.w	r3, r3, #16
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003cc:	4b27      	ldr	r3, [pc, #156]	; (800046c <MX_GPIO_Init+0xcc>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a26      	ldr	r2, [pc, #152]	; (800046c <MX_GPIO_Init+0xcc>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b24      	ldr	r3, [pc, #144]	; (800046c <MX_GPIO_Init+0xcc>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0320 	and.w	r3, r3, #32
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b21      	ldr	r3, [pc, #132]	; (800046c <MX_GPIO_Init+0xcc>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a20      	ldr	r2, [pc, #128]	; (800046c <MX_GPIO_Init+0xcc>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_GPIO_Init+0xcc>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0304 	and.w	r3, r3, #4
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_GPIO_Init+0xcc>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a1a      	ldr	r2, [pc, #104]	; (800046c <MX_GPIO_Init+0xcc>)
 8000402:	f043 0308 	orr.w	r3, r3, #8
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_GPIO_Init+0xcc>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0308 	and.w	r3, r3, #8
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2120      	movs	r1, #32
 8000418:	4815      	ldr	r0, [pc, #84]	; (8000470 <MX_GPIO_Init+0xd0>)
 800041a:	f001 fae5 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800041e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000424:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_GPIO_Init+0xd4>)
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	4811      	ldr	r0, [pc, #68]	; (8000478 <MX_GPIO_Init+0xd8>)
 8000434:	f001 f954 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000438:	2320      	movs	r3, #32
 800043a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	2301      	movs	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2302      	movs	r3, #2
 8000446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	4808      	ldr	r0, [pc, #32]	; (8000470 <MX_GPIO_Init+0xd0>)
 8000450:	f001 f946 	bl	80016e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2100      	movs	r1, #0
 8000458:	2028      	movs	r0, #40	; 0x28
 800045a:	f000 ff1c 	bl	8001296 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800045e:	2028      	movs	r0, #40	; 0x28
 8000460:	f000 ff35 	bl	80012ce <HAL_NVIC_EnableIRQ>

}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800
 8000474:	10110000 	.word	0x10110000
 8000478:	40011000 	.word	0x40011000

0800047c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000484:	e7fe      	b.n	8000484 <Error_Handler+0x8>
	...

08000488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <HAL_MspInit+0x5c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <HAL_MspInit+0x5c>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6193      	str	r3, [r2, #24]
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_MspInit+0x5c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x5c>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <HAL_MspInit+0x5c>)
 80004ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_MspInit+0x5c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <HAL_MspInit+0x60>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <HAL_MspInit+0x60>)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	bf00      	nop
 80004dc:	3714      	adds	r7, #20
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010000 	.word	0x40010000

080004ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a28      	ldr	r2, [pc, #160]	; (80005a8 <HAL_ADC_MspInit+0xbc>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d149      	bne.n	80005a0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800050c:	4b27      	ldr	r3, [pc, #156]	; (80005ac <HAL_ADC_MspInit+0xc0>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a26      	ldr	r2, [pc, #152]	; (80005ac <HAL_ADC_MspInit+0xc0>)
 8000512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <HAL_ADC_MspInit+0xc0>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b21      	ldr	r3, [pc, #132]	; (80005ac <HAL_ADC_MspInit+0xc0>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a20      	ldr	r2, [pc, #128]	; (80005ac <HAL_ADC_MspInit+0xc0>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <HAL_ADC_MspInit+0xc0>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800053c:	23c0      	movs	r3, #192	; 0xc0
 800053e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000540:	2303      	movs	r3, #3
 8000542:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	4819      	ldr	r0, [pc, #100]	; (80005b0 <HAL_ADC_MspInit+0xc4>)
 800054c:	f001 f8c8 	bl	80016e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 8000552:	4a19      	ldr	r2, [pc, #100]	; (80005b8 <HAL_ADC_MspInit+0xcc>)
 8000554:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000556:	4b17      	ldr	r3, [pc, #92]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 8000564:	2280      	movs	r2, #128	; 0x80
 8000566:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 800056a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800056e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 8000572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000576:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 800057a:	2220      	movs	r2, #32
 800057c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 8000580:	2200      	movs	r2, #0
 8000582:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000584:	480b      	ldr	r0, [pc, #44]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 8000586:	f000 febd 	bl	8001304 <HAL_DMA_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000590:	f7ff ff74 	bl	800047c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 8000598:	621a      	str	r2, [r3, #32]
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_ADC_MspInit+0xc8>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005a0:	bf00      	nop
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40012400 	.word	0x40012400
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010800 	.word	0x40010800
 80005b4:	200000bc 	.word	0x200000bc
 80005b8:	40020008 	.word	0x40020008

080005bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0310 	add.w	r3, r7, #16
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <HAL_UART_MspInit+0x70>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d123      	bne.n	8000624 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HAL_UART_MspInit+0x74>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	4a13      	ldr	r2, [pc, #76]	; (8000630 <HAL_UART_MspInit+0x74>)
 80005e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e6:	61d3      	str	r3, [r2, #28]
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <HAL_UART_MspInit+0x74>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_UART_MspInit+0x74>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <HAL_UART_MspInit+0x74>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <HAL_UART_MspInit+0x74>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800060c:	230c      	movs	r3, #12
 800060e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2302      	movs	r3, #2
 8000616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 0310 	add.w	r3, r7, #16
 800061c:	4619      	mov	r1, r3
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <HAL_UART_MspInit+0x78>)
 8000620:	f001 f85e 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40004400 	.word	0x40004400
 8000630:	40021000 	.word	0x40021000
 8000634:	40010800 	.word	0x40010800

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800063c:	e7fe      	b.n	800063c <NMI_Handler+0x4>

0800063e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <MemManage_Handler+0x4>

0800064a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler+0x4>

08000656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr

0800066e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067e:	f000 f927 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <DMA1_Channel1_IRQHandler+0x10>)
 800068e:	f000 fef3 	bl	8001478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000bc 	.word	0x200000bc

0800069c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006a4:	f001 f9b8 	bl	8001a18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	e00a      	b.n	80006d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006be:	f3af 8000 	nop.w
 80006c2:	4601      	mov	r1, r0
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	60ba      	str	r2, [r7, #8]
 80006ca:	b2ca      	uxtb	r2, r1
 80006cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbf0      	blt.n	80006be <_read+0x12>
	}

return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	b086      	sub	sp, #24
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	60f8      	str	r0, [r7, #12]
 80006ee:	60b9      	str	r1, [r7, #8]
 80006f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	e009      	b.n	800070c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	60ba      	str	r2, [r7, #8]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff fd23 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3301      	adds	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	429a      	cmp	r2, r3
 8000712:	dbf1      	blt.n	80006f8 <_write+0x12>
	}
	return len;
 8000714:	687b      	ldr	r3, [r7, #4]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <_close>:

int _close(int file)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
	return -1;
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000744:	605a      	str	r2, [r3, #4]
	return 0;
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <_isatty>:

int _isatty(int file)
{
 8000752:	b480      	push	{r7}
 8000754:	b083      	sub	sp, #12
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	return 1;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000766:	b480      	push	{r7}
 8000768:	b085      	sub	sp, #20
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
	return 0;
 8000772:	2300      	movs	r3, #0
}
 8000774:	4618      	mov	r0, r3
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
	...

08000780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <_sbrk+0x5c>)
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_sbrk+0x60>)
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <_sbrk+0x64>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <_sbrk+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b0:	f001 ffdc 	bl	800276c <__errno>
 80007b4:	4603      	mov	r3, r0
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	e009      	b.n	80007d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <_sbrk+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20005000 	.word	0x20005000
 80007e0:	00000400 	.word	0x00000400
 80007e4:	2000014c 	.word	0x2000014c
 80007e8:	20000168 	.word	0x20000168

080007ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800081e:	f7ff ffe5 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f001 ffa9 	bl	8002778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fca3 	bl	8000170 <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000834:	08003800 	.word	0x08003800
  ldr r2, =_sbss
 8000838:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800083c:	20000164 	.word	0x20000164

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_Init+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <HAL_Init+0x28>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 fd13 	bl	8001280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	2000      	movs	r0, #0
 800085c:	f000 f808 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fe12 	bl	8000488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_InitTick+0x54>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x58>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000886:	fbb3 f3f1 	udiv	r3, r3, r1
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fd2b 	bl	80012ea <HAL_SYSTICK_Config>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e00e      	b.n	80008bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d80a      	bhi.n	80008ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f000 fcf3 	bl	8001296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <HAL_InitTick+0x5c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x1c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x20>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a03      	ldr	r2, [pc, #12]	; (80008f0 <HAL_IncTick+0x20>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000150 	.word	0x20000150

080008f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return uwTick;
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <HAL_GetTick+0x10>)
 80008fa:	681b      	ldr	r3, [r3, #0]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	20000150 	.word	0x20000150

08000908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff fff0 	bl	80008f4 <HAL_GetTick>
 8000914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000920:	d005      	beq.n	800092e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_Delay+0x44>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092e:	bf00      	nop
 8000930:	f7ff ffe0 	bl	80008f4 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d8f7      	bhi.n	8000930 <HAL_Delay+0x28>
  {
  }
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000008 	.word	0x20000008

08000950 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e0be      	b.n	8000af0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097c:	2b00      	cmp	r3, #0
 800097e:	d109      	bne.n	8000994 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f7ff fdac 	bl	80004ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 faff 	bl	8000f98 <ADC_ConversionStop_Disable>
 800099a:	4603      	mov	r3, r0
 800099c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8099 	bne.w	8000ade <HAL_ADC_Init+0x18e>
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f040 8095 	bne.w	8000ade <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009bc:	f023 0302 	bic.w	r3, r3, #2
 80009c0:	f043 0202 	orr.w	r2, r3, #2
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	7b1b      	ldrb	r3, [r3, #12]
 80009d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	4313      	orrs	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009e8:	d003      	beq.n	80009f2 <HAL_ADC_Init+0xa2>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d102      	bne.n	80009f8 <HAL_ADC_Init+0xa8>
 80009f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f6:	e000      	b.n	80009fa <HAL_ADC_Init+0xaa>
 80009f8:	2300      	movs	r3, #0
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	7d1b      	ldrb	r3, [r3, #20]
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d119      	bne.n	8000a3c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7b1b      	ldrb	r3, [r3, #12]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d109      	bne.n	8000a24 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	035a      	lsls	r2, r3, #13
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	e00b      	b.n	8000a3c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	f043 0220 	orr.w	r2, r3, #32
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a34:	f043 0201 	orr.w	r2, r3, #1
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <HAL_ADC_Init+0x1a8>)
 8000a58:	4013      	ands	r3, r2
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	68b9      	ldr	r1, [r7, #8]
 8000a60:	430b      	orrs	r3, r1
 8000a62:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a6c:	d003      	beq.n	8000a76 <HAL_ADC_Init+0x126>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d104      	bne.n	8000a80 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	051b      	lsls	r3, r3, #20
 8000a7e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a86:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_ADC_Init+0x1ac>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d10b      	bne.n	8000abc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aae:	f023 0303 	bic.w	r3, r3, #3
 8000ab2:	f043 0201 	orr.w	r2, r3, #1
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aba:	e018      	b.n	8000aee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac0:	f023 0312 	bic.w	r3, r3, #18
 8000ac4:	f043 0210 	orr.w	r2, r3, #16
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad0:	f043 0201 	orr.w	r2, r3, #1
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000adc:	e007      	b.n	8000aee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae2:	f043 0210 	orr.w	r2, r3, #16
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	ffe1f7fd 	.word	0xffe1f7fd
 8000afc:	ff1f0efe 	.word	0xff1f0efe

08000b00 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a64      	ldr	r2, [pc, #400]	; (8000ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d004      	beq.n	8000b24 <HAL_ADC_Start_DMA+0x24>
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a63      	ldr	r2, [pc, #396]	; (8000cac <HAL_ADC_Start_DMA+0x1ac>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d106      	bne.n	8000b32 <HAL_ADC_Start_DMA+0x32>
 8000b24:	4b60      	ldr	r3, [pc, #384]	; (8000ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f040 80b3 	bne.w	8000c98 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d101      	bne.n	8000b40 <HAL_ADC_Start_DMA+0x40>
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	e0ae      	b.n	8000c9e <HAL_ADC_Start_DMA+0x19e>
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2201      	movs	r2, #1
 8000b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f000 f9cb 	bl	8000ee4 <ADC_Enable>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f040 809a 	bne.w	8000c8e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b62:	f023 0301 	bic.w	r3, r3, #1
 8000b66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a4e      	ldr	r2, [pc, #312]	; (8000cac <HAL_ADC_Start_DMA+0x1ac>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d105      	bne.n	8000b84 <HAL_ADC_Start_DMA+0x84>
 8000b78:	4b4b      	ldr	r3, [pc, #300]	; (8000ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d115      	bne.n	8000bb0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d026      	beq.n	8000bec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ba6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bae:	e01d      	b.n	8000bec <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a39      	ldr	r2, [pc, #228]	; (8000ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d004      	beq.n	8000bd0 <HAL_ADC_Start_DMA+0xd0>
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a38      	ldr	r2, [pc, #224]	; (8000cac <HAL_ADC_Start_DMA+0x1ac>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d10d      	bne.n	8000bec <HAL_ADC_Start_DMA+0xec>
 8000bd0:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <HAL_ADC_Start_DMA+0x1a8>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d007      	beq.n	8000bec <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000be4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	f023 0206 	bic.w	r2, r3, #6
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c04:	e002      	b.n	8000c0c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	4a25      	ldr	r2, [pc, #148]	; (8000cb0 <HAL_ADC_Start_DMA+0x1b0>)
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
 8000c20:	4a24      	ldr	r2, [pc, #144]	; (8000cb4 <HAL_ADC_Start_DMA+0x1b4>)
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	4a23      	ldr	r2, [pc, #140]	; (8000cb8 <HAL_ADC_Start_DMA+0x1b8>)
 8000c2a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f06f 0202 	mvn.w	r2, #2
 8000c34:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c44:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6a18      	ldr	r0, [r3, #32]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	334c      	adds	r3, #76	; 0x4c
 8000c50:	4619      	mov	r1, r3
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f000 fbaf 	bl	80013b8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c64:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c68:	d108      	bne.n	8000c7c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c78:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c7a:	e00f      	b.n	8000c9c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c8a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c8c:	e006      	b.n	8000c9c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000c96:	e001      	b.n	8000c9c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40012400 	.word	0x40012400
 8000cac:	40012800 	.word	0x40012800
 8000cb0:	0800101b 	.word	0x0800101b
 8000cb4:	08001097 	.word	0x08001097
 8000cb8:	080010b3 	.word	0x080010b3

08000cbc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
	...

08000cf4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d101      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x20>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e0dc      	b.n	8000ece <HAL_ADC_ConfigChannel+0x1da>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b06      	cmp	r3, #6
 8000d22:	d81c      	bhi.n	8000d5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	3b05      	subs	r3, #5
 8000d36:	221f      	movs	r2, #31
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	4019      	ands	r1, r3
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	6818      	ldr	r0, [r3, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3b05      	subs	r3, #5
 8000d50:	fa00 f203 	lsl.w	r2, r0, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d5c:	e03c      	b.n	8000dd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b0c      	cmp	r3, #12
 8000d64:	d81c      	bhi.n	8000da0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	3b23      	subs	r3, #35	; 0x23
 8000d78:	221f      	movs	r2, #31
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	4019      	ands	r1, r3
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	6818      	ldr	r0, [r3, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	3b23      	subs	r3, #35	; 0x23
 8000d92:	fa00 f203 	lsl.w	r2, r0, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d9e:	e01b      	b.n	8000dd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	3b41      	subs	r3, #65	; 0x41
 8000db2:	221f      	movs	r2, #31
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4019      	ands	r1, r3
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	3b41      	subs	r3, #65	; 0x41
 8000dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b09      	cmp	r3, #9
 8000dde:	d91c      	bls.n	8000e1a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68d9      	ldr	r1, [r3, #12]
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	3b1e      	subs	r3, #30
 8000df2:	2207      	movs	r2, #7
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4019      	ands	r1, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	6898      	ldr	r0, [r3, #8]
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4613      	mov	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4413      	add	r3, r2
 8000e0a:	3b1e      	subs	r3, #30
 8000e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	e019      	b.n	8000e4e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6919      	ldr	r1, [r3, #16]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	2207      	movs	r2, #7
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	4019      	ands	r1, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	6898      	ldr	r0, [r3, #8]
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	fa00 f203 	lsl.w	r2, r0, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b10      	cmp	r3, #16
 8000e54:	d003      	beq.n	8000e5e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e5a:	2b11      	cmp	r3, #17
 8000e5c:	d132      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d125      	bne.n	8000eb4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d126      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e84:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b10      	cmp	r3, #16
 8000e8c:	d11a      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_ADC_ConfigChannel+0x1e8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a13      	ldr	r2, [pc, #76]	; (8000ee0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e94:	fba2 2303 	umull	r2, r3, r2, r3
 8000e98:	0c9a      	lsrs	r2, r3, #18
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	4413      	add	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ea4:	e002      	b.n	8000eac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1f9      	bne.n	8000ea6 <HAL_ADC_ConfigChannel+0x1b2>
 8000eb2:	e007      	b.n	8000ec4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	f043 0220 	orr.w	r2, r3, #32
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	40012400 	.word	0x40012400
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	431bde83 	.word	0x431bde83

08000ee4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d040      	beq.n	8000f84 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f042 0201 	orr.w	r2, r2, #1
 8000f10:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <ADC_Enable+0xac>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <ADC_Enable+0xb0>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	0c9b      	lsrs	r3, r3, #18
 8000f1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f20:	e002      	b.n	8000f28 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f9      	bne.n	8000f22 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f2e:	f7ff fce1 	bl	80008f4 <HAL_GetTick>
 8000f32:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f34:	e01f      	b.n	8000f76 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f36:	f7ff fcdd 	bl	80008f4 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d918      	bls.n	8000f76 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d011      	beq.n	8000f76 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f56:	f043 0210 	orr.w	r2, r3, #16
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	f043 0201 	orr.w	r2, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e007      	b.n	8000f86 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d1d8      	bne.n	8000f36 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000000 	.word	0x20000000
 8000f94:	431bde83 	.word	0x431bde83

08000f98 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d12e      	bne.n	8001010 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0201 	bic.w	r2, r2, #1
 8000fc0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fc2:	f7ff fc97 	bl	80008f4 <HAL_GetTick>
 8000fc6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fc8:	e01b      	b.n	8001002 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fca:	f7ff fc93 	bl	80008f4 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d914      	bls.n	8001002 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d10d      	bne.n	8001002 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	f043 0210 	orr.w	r2, r3, #16
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	f043 0201 	orr.w	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e007      	b.n	8001012 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b01      	cmp	r3, #1
 800100e:	d0dc      	beq.n	8000fca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001026:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001030:	2b00      	cmp	r3, #0
 8001032:	d127      	bne.n	8001084 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001038:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800104a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800104e:	d115      	bne.n	800107c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001054:	2b00      	cmp	r3, #0
 8001056:	d111      	bne.n	800107c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d105      	bne.n	800107c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001074:	f043 0201 	orr.w	r2, r3, #1
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff fe1d 	bl	8000cbc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001082:	e004      	b.n	800108e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	4798      	blx	r3
}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff fe12 	bl	8000cce <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d0:	f043 0204 	orr.w	r2, r3, #4
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f7ff fe01 	bl	8000ce0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4906      	ldr	r1, [pc, #24]	; (8001180 <__NVIC_EnableIRQ+0x34>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	db0a      	blt.n	80011ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	490c      	ldr	r1, [pc, #48]	; (80011d0 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	0112      	lsls	r2, r2, #4
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	440b      	add	r3, r1
 80011a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ac:	e00a      	b.n	80011c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4908      	ldr	r1, [pc, #32]	; (80011d4 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	0112      	lsls	r2, r2, #4
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	440b      	add	r3, r1
 80011c2:	761a      	strb	r2, [r3, #24]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f1c3 0307 	rsb	r3, r3, #7
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	bf28      	it	cs
 80011f6:	2304      	movcs	r3, #4
 80011f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3304      	adds	r3, #4
 80011fe:	2b06      	cmp	r3, #6
 8001200:	d902      	bls.n	8001208 <NVIC_EncodePriority+0x30>
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3b03      	subs	r3, #3
 8001206:	e000      	b.n	800120a <NVIC_EncodePriority+0x32>
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	f04f 32ff 	mov.w	r2, #4294967295
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	401a      	ands	r2, r3
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001220:	f04f 31ff 	mov.w	r1, #4294967295
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	43d9      	mvns	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800124c:	d301      	bcc.n	8001252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2301      	movs	r3, #1
 8001250:	e00f      	b.n	8001272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <SysTick_Config+0x40>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3b01      	subs	r3, #1
 8001258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125a:	210f      	movs	r1, #15
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f7ff ff90 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <SysTick_Config+0x40>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126a:	4b04      	ldr	r3, [pc, #16]	; (800127c <SysTick_Config+0x40>)
 800126c:	2207      	movs	r2, #7
 800126e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff2d 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001296:	b580      	push	{r7, lr}
 8001298:	b086      	sub	sp, #24
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a8:	f7ff ff42 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	6978      	ldr	r0, [r7, #20]
 80012b4:	f7ff ff90 	bl	80011d8 <NVIC_EncodePriority>
 80012b8:	4602      	mov	r2, r0
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff5f 	bl	8001184 <__NVIC_SetPriority>
}
 80012c6:	bf00      	nop
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff35 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ffa2 	bl	800123c <SysTick_Config>
 80012f8:	4603      	mov	r3, r0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e043      	b.n	80013a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_DMA_Init+0xa8>)
 8001322:	4413      	add	r3, r2
 8001324:	4a22      	ldr	r2, [pc, #136]	; (80013b0 <HAL_DMA_Init+0xac>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	009a      	lsls	r2, r3, #2
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <HAL_DMA_Init+0xb0>)
 8001336:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2202      	movs	r2, #2
 800133c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800134e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001352:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800135c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4313      	orrs	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	bffdfff8 	.word	0xbffdfff8
 80013b0:	cccccccd 	.word	0xcccccccd
 80013b4:	40020000 	.word	0x40020000

080013b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
 80013c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d101      	bne.n	80013d8 <HAL_DMA_Start_IT+0x20>
 80013d4:	2302      	movs	r3, #2
 80013d6:	e04a      	b.n	800146e <HAL_DMA_Start_IT+0xb6>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d13a      	bne.n	8001460 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2202      	movs	r2, #2
 80013ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2200      	movs	r2, #0
 80013f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f938 	bl	8001684 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 020e 	orr.w	r2, r2, #14
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e00f      	b.n	800144e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0204 	bic.w	r2, r2, #4
 800143c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 020a 	orr.w	r2, r2, #10
 800144c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0201 	orr.w	r2, r2, #1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e005      	b.n	800146c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001468:	2302      	movs	r3, #2
 800146a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800146c:	7dfb      	ldrb	r3, [r7, #23]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	2204      	movs	r2, #4
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d04f      	beq.n	8001540 <HAL_DMA_IRQHandler+0xc8>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d04a      	beq.n	8001540 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0204 	bic.w	r2, r2, #4
 80014c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a66      	ldr	r2, [pc, #408]	; (8001668 <HAL_DMA_IRQHandler+0x1f0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d029      	beq.n	8001526 <HAL_DMA_IRQHandler+0xae>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a65      	ldr	r2, [pc, #404]	; (800166c <HAL_DMA_IRQHandler+0x1f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d022      	beq.n	8001522 <HAL_DMA_IRQHandler+0xaa>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a63      	ldr	r2, [pc, #396]	; (8001670 <HAL_DMA_IRQHandler+0x1f8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d01a      	beq.n	800151c <HAL_DMA_IRQHandler+0xa4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a62      	ldr	r2, [pc, #392]	; (8001674 <HAL_DMA_IRQHandler+0x1fc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d012      	beq.n	8001516 <HAL_DMA_IRQHandler+0x9e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a60      	ldr	r2, [pc, #384]	; (8001678 <HAL_DMA_IRQHandler+0x200>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d00a      	beq.n	8001510 <HAL_DMA_IRQHandler+0x98>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a5f      	ldr	r2, [pc, #380]	; (800167c <HAL_DMA_IRQHandler+0x204>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d102      	bne.n	800150a <HAL_DMA_IRQHandler+0x92>
 8001504:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001508:	e00e      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 800150a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800150e:	e00b      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001510:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001514:	e008      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800151a:	e005      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 800151c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001520:	e002      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001522:	2340      	movs	r3, #64	; 0x40
 8001524:	e000      	b.n	8001528 <HAL_DMA_IRQHandler+0xb0>
 8001526:	2304      	movs	r3, #4
 8001528:	4a55      	ldr	r2, [pc, #340]	; (8001680 <HAL_DMA_IRQHandler+0x208>)
 800152a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8094 	beq.w	800165e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800153e:	e08e      	b.n	800165e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	2202      	movs	r2, #2
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d056      	beq.n	80015fe <HAL_DMA_IRQHandler+0x186>
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d051      	beq.n	80015fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10b      	bne.n	8001580 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 020a 	bic.w	r2, r2, #10
 8001576:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a38      	ldr	r2, [pc, #224]	; (8001668 <HAL_DMA_IRQHandler+0x1f0>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d029      	beq.n	80015de <HAL_DMA_IRQHandler+0x166>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a37      	ldr	r2, [pc, #220]	; (800166c <HAL_DMA_IRQHandler+0x1f4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d022      	beq.n	80015da <HAL_DMA_IRQHandler+0x162>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a35      	ldr	r2, [pc, #212]	; (8001670 <HAL_DMA_IRQHandler+0x1f8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d01a      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x15c>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a34      	ldr	r2, [pc, #208]	; (8001674 <HAL_DMA_IRQHandler+0x1fc>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d012      	beq.n	80015ce <HAL_DMA_IRQHandler+0x156>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a32      	ldr	r2, [pc, #200]	; (8001678 <HAL_DMA_IRQHandler+0x200>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00a      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x150>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <HAL_DMA_IRQHandler+0x204>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d102      	bne.n	80015c2 <HAL_DMA_IRQHandler+0x14a>
 80015bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015c0:	e00e      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c6:	e00b      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015cc:	e008      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d2:	e005      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d8:	e002      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015da:	2320      	movs	r3, #32
 80015dc:	e000      	b.n	80015e0 <HAL_DMA_IRQHandler+0x168>
 80015de:	2302      	movs	r3, #2
 80015e0:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_DMA_IRQHandler+0x208>)
 80015e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d034      	beq.n	800165e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015fc:	e02f      	b.n	800165e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2208      	movs	r2, #8
 8001604:	409a      	lsls	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d028      	beq.n	8001660 <HAL_DMA_IRQHandler+0x1e8>
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d023      	beq.n	8001660 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 020e 	bic.w	r2, r2, #14
 8001626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2201      	movs	r2, #1
 8001642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	4798      	blx	r3
    }
  }
  return;
 800165e:	bf00      	nop
 8001660:	bf00      	nop
}
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020008 	.word	0x40020008
 800166c:	4002001c 	.word	0x4002001c
 8001670:	40020030 	.word	0x40020030
 8001674:	40020044 	.word	0x40020044
 8001678:	40020058 	.word	0x40020058
 800167c:	4002006c 	.word	0x4002006c
 8001680:	40020000 	.word	0x40020000

08001684 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b10      	cmp	r3, #16
 80016b0:	d108      	bne.n	80016c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016c2:	e007      	b.n	80016d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	60da      	str	r2, [r3, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	; 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e169      	b.n	80019c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f4:	2201      	movs	r2, #1
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8158 	bne.w	80019c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a9a      	ldr	r2, [pc, #616]	; (8001980 <HAL_GPIO_Init+0x2a0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d05e      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800171c:	4a98      	ldr	r2, [pc, #608]	; (8001980 <HAL_GPIO_Init+0x2a0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d875      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001722:	4a98      	ldr	r2, [pc, #608]	; (8001984 <HAL_GPIO_Init+0x2a4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d058      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001728:	4a96      	ldr	r2, [pc, #600]	; (8001984 <HAL_GPIO_Init+0x2a4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d86f      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800172e:	4a96      	ldr	r2, [pc, #600]	; (8001988 <HAL_GPIO_Init+0x2a8>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d052      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001734:	4a94      	ldr	r2, [pc, #592]	; (8001988 <HAL_GPIO_Init+0x2a8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d869      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800173a:	4a94      	ldr	r2, [pc, #592]	; (800198c <HAL_GPIO_Init+0x2ac>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04c      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001740:	4a92      	ldr	r2, [pc, #584]	; (800198c <HAL_GPIO_Init+0x2ac>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d863      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001746:	4a92      	ldr	r2, [pc, #584]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d046      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800174c:	4a90      	ldr	r2, [pc, #576]	; (8001990 <HAL_GPIO_Init+0x2b0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d85d      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d82a      	bhi.n	80017ac <HAL_GPIO_Init+0xcc>
 8001756:	2b12      	cmp	r3, #18
 8001758:	d859      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <HAL_GPIO_Init+0x80>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017db 	.word	0x080017db
 8001764:	080017b5 	.word	0x080017b5
 8001768:	080017c7 	.word	0x080017c7
 800176c:	08001809 	.word	0x08001809
 8001770:	0800180f 	.word	0x0800180f
 8001774:	0800180f 	.word	0x0800180f
 8001778:	0800180f 	.word	0x0800180f
 800177c:	0800180f 	.word	0x0800180f
 8001780:	0800180f 	.word	0x0800180f
 8001784:	0800180f 	.word	0x0800180f
 8001788:	0800180f 	.word	0x0800180f
 800178c:	0800180f 	.word	0x0800180f
 8001790:	0800180f 	.word	0x0800180f
 8001794:	0800180f 	.word	0x0800180f
 8001798:	0800180f 	.word	0x0800180f
 800179c:	0800180f 	.word	0x0800180f
 80017a0:	0800180f 	.word	0x0800180f
 80017a4:	080017bd 	.word	0x080017bd
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	4a79      	ldr	r2, [pc, #484]	; (8001994 <HAL_GPIO_Init+0x2b4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017b2:	e02c      	b.n	800180e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e029      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	3304      	adds	r3, #4
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e024      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	3308      	adds	r3, #8
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e01f      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	330c      	adds	r3, #12
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e01a      	b.n	8001810 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017e2:	2304      	movs	r3, #4
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e013      	b.n	8001810 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	611a      	str	r2, [r3, #16]
          break;
 80017fa:	e009      	b.n	8001810 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	615a      	str	r2, [r3, #20]
          break;
 8001806:	e003      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x130>
          break;
 800180e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2bff      	cmp	r3, #255	; 0xff
 8001814:	d801      	bhi.n	800181a <HAL_GPIO_Init+0x13a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	e001      	b.n	800181e <HAL_GPIO_Init+0x13e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	d802      	bhi.n	800182c <HAL_GPIO_Init+0x14c>
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x152>
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3b08      	subs	r3, #8
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	210f      	movs	r1, #15
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 80b1 	beq.w	80019c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001860:	4b4d      	ldr	r3, [pc, #308]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b4a      	ldr	r3, [pc, #296]	; (8001998 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001878:	4a48      	ldr	r2, [pc, #288]	; (800199c <HAL_GPIO_Init+0x2bc>)
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a40      	ldr	r2, [pc, #256]	; (80019a0 <HAL_GPIO_Init+0x2c0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d013      	beq.n	80018cc <HAL_GPIO_Init+0x1ec>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3f      	ldr	r2, [pc, #252]	; (80019a4 <HAL_GPIO_Init+0x2c4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d00d      	beq.n	80018c8 <HAL_GPIO_Init+0x1e8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3e      	ldr	r2, [pc, #248]	; (80019a8 <HAL_GPIO_Init+0x2c8>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d007      	beq.n	80018c4 <HAL_GPIO_Init+0x1e4>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a3d      	ldr	r2, [pc, #244]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018bc:	2303      	movs	r3, #3
 80018be:	e006      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e004      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_GPIO_Init+0x1ee>
 80018cc:	2300      	movs	r3, #0
 80018ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d0:	f002 0203 	and.w	r2, r2, #3
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	4093      	lsls	r3, r2
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018de:	492f      	ldr	r1, [pc, #188]	; (800199c <HAL_GPIO_Init+0x2bc>)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	492c      	ldr	r1, [pc, #176]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4928      	ldr	r1, [pc, #160]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4922      	ldr	r1, [pc, #136]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	491e      	ldr	r1, [pc, #120]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	4918      	ldr	r1, [pc, #96]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	4914      	ldr	r1, [pc, #80]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d021      	beq.n	80019b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
 800197c:	e021      	b.n	80019c2 <HAL_GPIO_Init+0x2e2>
 800197e:	bf00      	nop
 8001980:	10320000 	.word	0x10320000
 8001984:	10310000 	.word	0x10310000
 8001988:	10220000 	.word	0x10220000
 800198c:	10210000 	.word	0x10210000
 8001990:	10120000 	.word	0x10120000
 8001994:	10110000 	.word	0x10110000
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	40010800 	.word	0x40010800
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40011400 	.word	0x40011400
 80019b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4909      	ldr	r1, [pc, #36]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019be:	4013      	ands	r3, r2
 80019c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	3301      	adds	r3, #1
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f47f ae8e 	bne.w	80016f4 <HAL_GPIO_Init+0x14>
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	372c      	adds	r7, #44	; 0x2c
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	40010400 	.word	0x40010400

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a04:	e003      	b.n	8001a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	611a      	str	r2, [r3, #16]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a24:	695a      	ldr	r2, [r3, #20]
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d006      	beq.n	8001a3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a2e:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f806 	bl	8001a48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e272      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8087 	beq.w	8001b8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a7c:	4b92      	ldr	r3, [pc, #584]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d00c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a88:	4b8f      	ldr	r3, [pc, #572]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d112      	bne.n	8001aba <HAL_RCC_OscConfig+0x5e>
 8001a94:	4b8c      	ldr	r3, [pc, #560]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d10b      	bne.n	8001aba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa2:	4b89      	ldr	r3, [pc, #548]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d06c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x12c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d168      	bne.n	8001b88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e24c      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x76>
 8001ac4:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a7f      	ldr	r2, [pc, #508]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e02e      	b.n	8001b30 <HAL_RCC_OscConfig+0xd4>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x98>
 8001ada:	4b7b      	ldr	r3, [pc, #492]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a7a      	ldr	r2, [pc, #488]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b78      	ldr	r3, [pc, #480]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a77      	ldr	r2, [pc, #476]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01d      	b.n	8001b30 <HAL_RCC_OscConfig+0xd4>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0xbc>
 8001afe:	4b72      	ldr	r3, [pc, #456]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a71      	ldr	r2, [pc, #452]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a6e      	ldr	r2, [pc, #440]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0xd4>
 8001b18:	4b6b      	ldr	r3, [pc, #428]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a6a      	ldr	r2, [pc, #424]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a67      	ldr	r2, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7fe fedc 	bl	80008f4 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b40:	f7fe fed8 	bl	80008f4 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e200      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xe4>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7fe fec8 	bl	80008f4 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7fe fec4 	bl	80008f4 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1ec      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	4b53      	ldr	r3, [pc, #332]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x10c>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d063      	beq.n	8001c5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b96:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ba2:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d11c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x18c>
 8001bae:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d116      	bne.n	8001be8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	4b43      	ldr	r3, [pc, #268]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x176>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e1c0      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4939      	ldr	r1, [pc, #228]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	e03a      	b.n	8001c5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_RCC_OscConfig+0x270>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7fe fe7d 	bl	80008f4 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7fe fe79 	bl	80008f4 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1a1      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4927      	ldr	r1, [pc, #156]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c32:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_RCC_OscConfig+0x270>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7fe fe5c 	bl	80008f4 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c40:	f7fe fe58 	bl	80008f4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e180      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d03a      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d019      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c72:	4b17      	ldr	r3, [pc, #92]	; (8001cd0 <HAL_RCC_OscConfig+0x274>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c78:	f7fe fe3c 	bl	80008f4 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c80:	f7fe fe38 	bl	80008f4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e160      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	f000 fad8 	bl	8002254 <RCC_Delay>
 8001ca4:	e01c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <HAL_RCC_OscConfig+0x274>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cac:	f7fe fe22 	bl	80008f4 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb2:	e00f      	b.n	8001cd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb4:	f7fe fe1e 	bl	80008f4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d908      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e146      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	42420000 	.word	0x42420000
 8001cd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd4:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e9      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80a6 	beq.w	8001e3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf2:	4b8b      	ldr	r3, [pc, #556]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10d      	bne.n	8001d1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a87      	ldr	r2, [pc, #540]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b85      	ldr	r3, [pc, #532]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d16:	2301      	movs	r3, #1
 8001d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1a:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <HAL_RCC_OscConfig+0x4c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d26:	4b7f      	ldr	r3, [pc, #508]	; (8001f24 <HAL_RCC_OscConfig+0x4c8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7e      	ldr	r2, [pc, #504]	; (8001f24 <HAL_RCC_OscConfig+0x4c8>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d32:	f7fe fddf 	bl	80008f4 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3a:	f7fe fddb 	bl	80008f4 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	; 0x64
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e103      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b75      	ldr	r3, [pc, #468]	; (8001f24 <HAL_RCC_OscConfig+0x4c8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0f0      	beq.n	8001d3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d106      	bne.n	8001d6e <HAL_RCC_OscConfig+0x312>
 8001d60:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a6e      	ldr	r2, [pc, #440]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	e02d      	b.n	8001dca <HAL_RCC_OscConfig+0x36e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x334>
 8001d76:	4b6a      	ldr	r3, [pc, #424]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a69      	ldr	r2, [pc, #420]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	4b67      	ldr	r3, [pc, #412]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a66      	ldr	r2, [pc, #408]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	e01c      	b.n	8001dca <HAL_RCC_OscConfig+0x36e>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d10c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x356>
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a60      	ldr	r2, [pc, #384]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	4b5e      	ldr	r3, [pc, #376]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a5d      	ldr	r2, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	e00b      	b.n	8001dca <HAL_RCC_OscConfig+0x36e>
 8001db2:	4b5b      	ldr	r3, [pc, #364]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	4a5a      	ldr	r2, [pc, #360]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6213      	str	r3, [r2, #32]
 8001dbe:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
 8001dc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d015      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7fe fd8f 	bl	80008f4 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7fe fd8b 	bl	80008f4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0b1      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0ee      	beq.n	8001dda <HAL_RCC_OscConfig+0x37e>
 8001dfc:	e014      	b.n	8001e28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe fd79 	bl	80008f4 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	e00a      	b.n	8001e1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe fd75 	bl	80008f4 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e09b      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ee      	bne.n	8001e06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d105      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8087 	beq.w	8001f52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d061      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d146      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b33      	ldr	r3, [pc, #204]	; (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7fe fd49 	bl	80008f4 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe fd45 	bl	80008f4 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e06d      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8c:	d108      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e8e:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4921      	ldr	r1, [pc, #132]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a19      	ldr	r1, [r3, #32]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	491b      	ldr	r1, [pc, #108]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7fe fd19 	bl	80008f4 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7fe fd15 	bl	80008f4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e03d      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x46a>
 8001ee4:	e035      	b.n	8001f52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_RCC_OscConfig+0x4cc>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7fe fd02 	bl	80008f4 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef4:	f7fe fcfe 	bl	80008f4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e026      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x498>
 8001f12:	e01e      	b.n	8001f52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e019      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
 8001f28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x500>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000

08001f60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0d0      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d910      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b67      	ldr	r3, [pc, #412]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0207 	bic.w	r2, r3, #7
 8001f8a:	4965      	ldr	r1, [pc, #404]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b63      	ldr	r3, [pc, #396]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0b8      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d020      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	4a58      	ldr	r2, [pc, #352]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0308 	and.w	r3, r3, #8
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b50      	ldr	r3, [pc, #320]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	494d      	ldr	r1, [pc, #308]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d040      	beq.n	8002080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002006:	4b47      	ldr	r3, [pc, #284]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d115      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e07f      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e073      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06b      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203e:	4b39      	ldr	r3, [pc, #228]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f023 0203 	bic.w	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4936      	ldr	r1, [pc, #216]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	4313      	orrs	r3, r2
 800204e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002050:	f7fe fc50 	bl	80008f4 <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	e00a      	b.n	800206e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7fe fc4c 	bl	80008f4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e053      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f003 020c 	and.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	429a      	cmp	r2, r3
 800207e:	d1eb      	bne.n	8002058 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002080:	4b27      	ldr	r3, [pc, #156]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d210      	bcs.n	80020b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 0207 	bic.w	r2, r3, #7
 8002096:	4922      	ldr	r1, [pc, #136]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209e:	4b20      	ldr	r3, [pc, #128]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d001      	beq.n	80020b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e032      	b.n	8002116 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4916      	ldr	r1, [pc, #88]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	490e      	ldr	r1, [pc, #56]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020ee:	f000 f821 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020f2:	4602      	mov	r2, r0
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	490a      	ldr	r1, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8002100:	5ccb      	ldrb	r3, [r1, r3]
 8002102:	fa22 f303 	lsr.w	r3, r2, r3
 8002106:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x1cc>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1d0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fbae 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40022000 	.word	0x40022000
 8002124:	40021000 	.word	0x40021000
 8002128:	08003748 	.word	0x08003748
 800212c:	20000000 	.word	0x20000000
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b490      	push	{r4, r7}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800213c:	1d3c      	adds	r4, r7, #4
 800213e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002144:	f240 2301 	movw	r3, #513	; 0x201
 8002148:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	2300      	movs	r3, #0
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800215e:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b04      	cmp	r3, #4
 800216c:	d002      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0x40>
 800216e:	2b08      	cmp	r3, #8
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x46>
 8002172:	e02b      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002176:	623b      	str	r3, [r7, #32]
      break;
 8002178:	e02b      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	0c9b      	lsrs	r3, r3, #18
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3328      	adds	r3, #40	; 0x28
 8002184:	443b      	add	r3, r7
 8002186:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800218a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d012      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0c5b      	lsrs	r3, r3, #17
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	3328      	adds	r3, #40	; 0x28
 80021a2:	443b      	add	r3, r7
 80021a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	4a0e      	ldr	r2, [pc, #56]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ae:	fb03 f202 	mul.w	r2, r3, r2
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	e004      	b.n	80021c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c0:	fb02 f303 	mul.w	r3, r2, r3
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	623b      	str	r3, [r7, #32]
      break;
 80021ca:	e002      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ce:	623b      	str	r3, [r7, #32]
      break;
 80021d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d2:	6a3b      	ldr	r3, [r7, #32]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc90      	pop	{r4, r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	08003738 	.word	0x08003738
 80021e4:	40021000 	.word	0x40021000
 80021e8:	007a1200 	.word	0x007a1200
 80021ec:	003d0900 	.word	0x003d0900

080021f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f4:	4b02      	ldr	r3, [pc, #8]	; (8002200 <HAL_RCC_GetHCLKFreq+0x10>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	20000000 	.word	0x20000000

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002208:	f7ff fff2 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	08003758 	.word	0x08003758

0800222c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002230:	f7ff ffde 	bl	80021f0 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	0adb      	lsrs	r3, r3, #11
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08003758 	.word	0x08003758

08002254 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <RCC_Delay+0x34>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0a      	ldr	r2, [pc, #40]	; (800228c <RCC_Delay+0x38>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0a5b      	lsrs	r3, r3, #9
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002270:	bf00      	nop
  }
  while (Delay --);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	60fa      	str	r2, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f9      	bne.n	8002270 <RCC_Delay+0x1c>
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000000 	.word	0x20000000
 800228c:	10624dd3 	.word	0x10624dd3

08002290 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d07d      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b0:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10d      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022bc:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	4a4b      	ldr	r2, [pc, #300]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c6:	61d3      	str	r3, [r2, #28]
 80022c8:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d4:	2301      	movs	r3, #1
 80022d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d8:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d118      	bne.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e4:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a42      	ldr	r2, [pc, #264]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f0:	f7fe fb00 	bl	80008f4 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f6:	e008      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f8:	f7fe fafc 	bl	80008f4 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e06d      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230a:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d02e      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d027      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002334:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002344:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800234a:	4a29      	ldr	r2, [pc, #164]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d014      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235a:	f7fe facb 	bl	80008f4 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7fe fac7 	bl	80008f4 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e036      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ee      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002384:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4917      	ldr	r1, [pc, #92]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	4313      	orrs	r3, r2
 8002394:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	490b      	ldr	r1, [pc, #44]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d008      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
 80023f8:	42420440 	.word	0x42420440

080023fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e03f      	b.n	800248e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7fe f8ca 	bl	80005bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2224      	movs	r2, #36	; 0x24
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800243e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f905 	bl	8002650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691a      	ldr	r2, [r3, #16]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b08a      	sub	sp, #40	; 0x28
 800249a:	af02      	add	r7, sp, #8
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d17c      	bne.n	80025b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <HAL_UART_Transmit+0x2c>
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e075      	b.n	80025b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_UART_Transmit+0x3e>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e06e      	b.n	80025b2 <HAL_UART_Transmit+0x11c>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2221      	movs	r2, #33	; 0x21
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ea:	f7fe fa03 	bl	80008f4 <HAL_GetTick>
 80024ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	88fa      	ldrh	r2, [r7, #6]
 80024f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	88fa      	ldrh	r2, [r7, #6]
 80024fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002504:	d108      	bne.n	8002518 <HAL_UART_Transmit+0x82>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d104      	bne.n	8002518 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	e003      	b.n	8002520 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002528:	e02a      	b.n	8002580 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2200      	movs	r2, #0
 8002532:	2180      	movs	r1, #128	; 0x80
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 f840 	bl	80025ba <UART_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e036      	b.n	80025b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10b      	bne.n	8002562 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002558:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	3302      	adds	r3, #2
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	e007      	b.n	8002572 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	781a      	ldrb	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	3301      	adds	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1cf      	bne.n	800252a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2200      	movs	r2, #0
 8002592:	2140      	movs	r1, #64	; 0x40
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f810 	bl	80025ba <UART_WaitOnFlagUntilTimeout>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e006      	b.n	80025b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3720      	adds	r7, #32
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	4613      	mov	r3, r2
 80025c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ca:	e02c      	b.n	8002626 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d2:	d028      	beq.n	8002626 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d007      	beq.n	80025ea <UART_WaitOnFlagUntilTimeout+0x30>
 80025da:	f7fe f98b 	bl	80008f4 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d21d      	bcs.n	8002626 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e00f      	b.n	8002646 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4013      	ands	r3, r2
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	429a      	cmp	r2, r3
 8002634:	bf0c      	ite	eq
 8002636:	2301      	moveq	r3, #1
 8002638:	2300      	movne	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	429a      	cmp	r2, r3
 8002642:	d0c3      	beq.n	80025cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800268a:	f023 030c 	bic.w	r3, r3, #12
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	430b      	orrs	r3, r1
 8002696:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a2c      	ldr	r2, [pc, #176]	; (8002764 <UART_SetConfig+0x114>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d103      	bne.n	80026c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026b8:	f7ff fdb8 	bl	800222c <HAL_RCC_GetPCLK2Freq>
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	e002      	b.n	80026c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026c0:	f7ff fda0 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 80026c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009a      	lsls	r2, r3, #2
 80026d0:	441a      	add	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	4a22      	ldr	r2, [pc, #136]	; (8002768 <UART_SetConfig+0x118>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	0119      	lsls	r1, r3, #4
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	009a      	lsls	r2, r3, #2
 80026f0:	441a      	add	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <UART_SetConfig+0x118>)
 80026fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2064      	movs	r0, #100	; 0x64
 8002706:	fb00 f303 	mul.w	r3, r0, r3
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	3332      	adds	r3, #50	; 0x32
 8002710:	4a15      	ldr	r2, [pc, #84]	; (8002768 <UART_SetConfig+0x118>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800271c:	4419      	add	r1, r3
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	009a      	lsls	r2, r3, #2
 8002728:	441a      	add	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	fbb2 f2f3 	udiv	r2, r2, r3
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <UART_SetConfig+0x118>)
 8002736:	fba3 0302 	umull	r0, r3, r3, r2
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2064      	movs	r0, #100	; 0x64
 800273e:	fb00 f303 	mul.w	r3, r0, r3
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	3332      	adds	r3, #50	; 0x32
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <UART_SetConfig+0x118>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	f003 020f 	and.w	r2, r3, #15
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	440a      	add	r2, r1
 800275a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800275c:	bf00      	nop
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40013800 	.word	0x40013800
 8002768:	51eb851f 	.word	0x51eb851f

0800276c <__errno>:
 800276c:	4b01      	ldr	r3, [pc, #4]	; (8002774 <__errno+0x8>)
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	2000000c 	.word	0x2000000c

08002778 <__libc_init_array>:
 8002778:	b570      	push	{r4, r5, r6, lr}
 800277a:	2600      	movs	r6, #0
 800277c:	4d0c      	ldr	r5, [pc, #48]	; (80027b0 <__libc_init_array+0x38>)
 800277e:	4c0d      	ldr	r4, [pc, #52]	; (80027b4 <__libc_init_array+0x3c>)
 8002780:	1b64      	subs	r4, r4, r5
 8002782:	10a4      	asrs	r4, r4, #2
 8002784:	42a6      	cmp	r6, r4
 8002786:	d109      	bne.n	800279c <__libc_init_array+0x24>
 8002788:	f000 ffb6 	bl	80036f8 <_init>
 800278c:	2600      	movs	r6, #0
 800278e:	4d0a      	ldr	r5, [pc, #40]	; (80027b8 <__libc_init_array+0x40>)
 8002790:	4c0a      	ldr	r4, [pc, #40]	; (80027bc <__libc_init_array+0x44>)
 8002792:	1b64      	subs	r4, r4, r5
 8002794:	10a4      	asrs	r4, r4, #2
 8002796:	42a6      	cmp	r6, r4
 8002798:	d105      	bne.n	80027a6 <__libc_init_array+0x2e>
 800279a:	bd70      	pop	{r4, r5, r6, pc}
 800279c:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a0:	4798      	blx	r3
 80027a2:	3601      	adds	r6, #1
 80027a4:	e7ee      	b.n	8002784 <__libc_init_array+0xc>
 80027a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027aa:	4798      	blx	r3
 80027ac:	3601      	adds	r6, #1
 80027ae:	e7f2      	b.n	8002796 <__libc_init_array+0x1e>
 80027b0:	080037f8 	.word	0x080037f8
 80027b4:	080037f8 	.word	0x080037f8
 80027b8:	080037f8 	.word	0x080037f8
 80027bc:	080037fc 	.word	0x080037fc

080027c0 <memset>:
 80027c0:	4603      	mov	r3, r0
 80027c2:	4402      	add	r2, r0
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d100      	bne.n	80027ca <memset+0xa>
 80027c8:	4770      	bx	lr
 80027ca:	f803 1b01 	strb.w	r1, [r3], #1
 80027ce:	e7f9      	b.n	80027c4 <memset+0x4>

080027d0 <iprintf>:
 80027d0:	b40f      	push	{r0, r1, r2, r3}
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <iprintf+0x2c>)
 80027d4:	b513      	push	{r0, r1, r4, lr}
 80027d6:	681c      	ldr	r4, [r3, #0]
 80027d8:	b124      	cbz	r4, 80027e4 <iprintf+0x14>
 80027da:	69a3      	ldr	r3, [r4, #24]
 80027dc:	b913      	cbnz	r3, 80027e4 <iprintf+0x14>
 80027de:	4620      	mov	r0, r4
 80027e0:	f000 f866 	bl	80028b0 <__sinit>
 80027e4:	ab05      	add	r3, sp, #20
 80027e6:	4620      	mov	r0, r4
 80027e8:	9a04      	ldr	r2, [sp, #16]
 80027ea:	68a1      	ldr	r1, [r4, #8]
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	f000 f9bb 	bl	8002b68 <_vfiprintf_r>
 80027f2:	b002      	add	sp, #8
 80027f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027f8:	b004      	add	sp, #16
 80027fa:	4770      	bx	lr
 80027fc:	2000000c 	.word	0x2000000c

08002800 <std>:
 8002800:	2300      	movs	r3, #0
 8002802:	b510      	push	{r4, lr}
 8002804:	4604      	mov	r4, r0
 8002806:	e9c0 3300 	strd	r3, r3, [r0]
 800280a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800280e:	6083      	str	r3, [r0, #8]
 8002810:	8181      	strh	r1, [r0, #12]
 8002812:	6643      	str	r3, [r0, #100]	; 0x64
 8002814:	81c2      	strh	r2, [r0, #14]
 8002816:	6183      	str	r3, [r0, #24]
 8002818:	4619      	mov	r1, r3
 800281a:	2208      	movs	r2, #8
 800281c:	305c      	adds	r0, #92	; 0x5c
 800281e:	f7ff ffcf 	bl	80027c0 <memset>
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <std+0x38>)
 8002824:	6224      	str	r4, [r4, #32]
 8002826:	6263      	str	r3, [r4, #36]	; 0x24
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <std+0x3c>)
 800282a:	62a3      	str	r3, [r4, #40]	; 0x28
 800282c:	4b04      	ldr	r3, [pc, #16]	; (8002840 <std+0x40>)
 800282e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <std+0x44>)
 8002832:	6323      	str	r3, [r4, #48]	; 0x30
 8002834:	bd10      	pop	{r4, pc}
 8002836:	bf00      	nop
 8002838:	08003115 	.word	0x08003115
 800283c:	08003137 	.word	0x08003137
 8002840:	0800316f 	.word	0x0800316f
 8002844:	08003193 	.word	0x08003193

08002848 <_cleanup_r>:
 8002848:	4901      	ldr	r1, [pc, #4]	; (8002850 <_cleanup_r+0x8>)
 800284a:	f000 b8af 	b.w	80029ac <_fwalk_reent>
 800284e:	bf00      	nop
 8002850:	08003465 	.word	0x08003465

08002854 <__sfmoreglue>:
 8002854:	2268      	movs	r2, #104	; 0x68
 8002856:	b570      	push	{r4, r5, r6, lr}
 8002858:	1e4d      	subs	r5, r1, #1
 800285a:	4355      	muls	r5, r2
 800285c:	460e      	mov	r6, r1
 800285e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002862:	f000 f8e5 	bl	8002a30 <_malloc_r>
 8002866:	4604      	mov	r4, r0
 8002868:	b140      	cbz	r0, 800287c <__sfmoreglue+0x28>
 800286a:	2100      	movs	r1, #0
 800286c:	e9c0 1600 	strd	r1, r6, [r0]
 8002870:	300c      	adds	r0, #12
 8002872:	60a0      	str	r0, [r4, #8]
 8002874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002878:	f7ff ffa2 	bl	80027c0 <memset>
 800287c:	4620      	mov	r0, r4
 800287e:	bd70      	pop	{r4, r5, r6, pc}

08002880 <__sfp_lock_acquire>:
 8002880:	4801      	ldr	r0, [pc, #4]	; (8002888 <__sfp_lock_acquire+0x8>)
 8002882:	f000 b8b3 	b.w	80029ec <__retarget_lock_acquire_recursive>
 8002886:	bf00      	nop
 8002888:	20000155 	.word	0x20000155

0800288c <__sfp_lock_release>:
 800288c:	4801      	ldr	r0, [pc, #4]	; (8002894 <__sfp_lock_release+0x8>)
 800288e:	f000 b8ae 	b.w	80029ee <__retarget_lock_release_recursive>
 8002892:	bf00      	nop
 8002894:	20000155 	.word	0x20000155

08002898 <__sinit_lock_acquire>:
 8002898:	4801      	ldr	r0, [pc, #4]	; (80028a0 <__sinit_lock_acquire+0x8>)
 800289a:	f000 b8a7 	b.w	80029ec <__retarget_lock_acquire_recursive>
 800289e:	bf00      	nop
 80028a0:	20000156 	.word	0x20000156

080028a4 <__sinit_lock_release>:
 80028a4:	4801      	ldr	r0, [pc, #4]	; (80028ac <__sinit_lock_release+0x8>)
 80028a6:	f000 b8a2 	b.w	80029ee <__retarget_lock_release_recursive>
 80028aa:	bf00      	nop
 80028ac:	20000156 	.word	0x20000156

080028b0 <__sinit>:
 80028b0:	b510      	push	{r4, lr}
 80028b2:	4604      	mov	r4, r0
 80028b4:	f7ff fff0 	bl	8002898 <__sinit_lock_acquire>
 80028b8:	69a3      	ldr	r3, [r4, #24]
 80028ba:	b11b      	cbz	r3, 80028c4 <__sinit+0x14>
 80028bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028c0:	f7ff bff0 	b.w	80028a4 <__sinit_lock_release>
 80028c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80028c8:	6523      	str	r3, [r4, #80]	; 0x50
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <__sinit+0x68>)
 80028cc:	4a13      	ldr	r2, [pc, #76]	; (800291c <__sinit+0x6c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80028d2:	42a3      	cmp	r3, r4
 80028d4:	bf08      	it	eq
 80028d6:	2301      	moveq	r3, #1
 80028d8:	4620      	mov	r0, r4
 80028da:	bf08      	it	eq
 80028dc:	61a3      	streq	r3, [r4, #24]
 80028de:	f000 f81f 	bl	8002920 <__sfp>
 80028e2:	6060      	str	r0, [r4, #4]
 80028e4:	4620      	mov	r0, r4
 80028e6:	f000 f81b 	bl	8002920 <__sfp>
 80028ea:	60a0      	str	r0, [r4, #8]
 80028ec:	4620      	mov	r0, r4
 80028ee:	f000 f817 	bl	8002920 <__sfp>
 80028f2:	2200      	movs	r2, #0
 80028f4:	2104      	movs	r1, #4
 80028f6:	60e0      	str	r0, [r4, #12]
 80028f8:	6860      	ldr	r0, [r4, #4]
 80028fa:	f7ff ff81 	bl	8002800 <std>
 80028fe:	2201      	movs	r2, #1
 8002900:	2109      	movs	r1, #9
 8002902:	68a0      	ldr	r0, [r4, #8]
 8002904:	f7ff ff7c 	bl	8002800 <std>
 8002908:	2202      	movs	r2, #2
 800290a:	2112      	movs	r1, #18
 800290c:	68e0      	ldr	r0, [r4, #12]
 800290e:	f7ff ff77 	bl	8002800 <std>
 8002912:	2301      	movs	r3, #1
 8002914:	61a3      	str	r3, [r4, #24]
 8002916:	e7d1      	b.n	80028bc <__sinit+0xc>
 8002918:	08003760 	.word	0x08003760
 800291c:	08002849 	.word	0x08002849

08002920 <__sfp>:
 8002920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002922:	4607      	mov	r7, r0
 8002924:	f7ff ffac 	bl	8002880 <__sfp_lock_acquire>
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <__sfp+0x84>)
 800292a:	681e      	ldr	r6, [r3, #0]
 800292c:	69b3      	ldr	r3, [r6, #24]
 800292e:	b913      	cbnz	r3, 8002936 <__sfp+0x16>
 8002930:	4630      	mov	r0, r6
 8002932:	f7ff ffbd 	bl	80028b0 <__sinit>
 8002936:	3648      	adds	r6, #72	; 0x48
 8002938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800293c:	3b01      	subs	r3, #1
 800293e:	d503      	bpl.n	8002948 <__sfp+0x28>
 8002940:	6833      	ldr	r3, [r6, #0]
 8002942:	b30b      	cbz	r3, 8002988 <__sfp+0x68>
 8002944:	6836      	ldr	r6, [r6, #0]
 8002946:	e7f7      	b.n	8002938 <__sfp+0x18>
 8002948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800294c:	b9d5      	cbnz	r5, 8002984 <__sfp+0x64>
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <__sfp+0x88>)
 8002950:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002954:	60e3      	str	r3, [r4, #12]
 8002956:	6665      	str	r5, [r4, #100]	; 0x64
 8002958:	f000 f847 	bl	80029ea <__retarget_lock_init_recursive>
 800295c:	f7ff ff96 	bl	800288c <__sfp_lock_release>
 8002960:	2208      	movs	r2, #8
 8002962:	4629      	mov	r1, r5
 8002964:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002968:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800296c:	6025      	str	r5, [r4, #0]
 800296e:	61a5      	str	r5, [r4, #24]
 8002970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002974:	f7ff ff24 	bl	80027c0 <memset>
 8002978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800297c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002980:	4620      	mov	r0, r4
 8002982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002984:	3468      	adds	r4, #104	; 0x68
 8002986:	e7d9      	b.n	800293c <__sfp+0x1c>
 8002988:	2104      	movs	r1, #4
 800298a:	4638      	mov	r0, r7
 800298c:	f7ff ff62 	bl	8002854 <__sfmoreglue>
 8002990:	4604      	mov	r4, r0
 8002992:	6030      	str	r0, [r6, #0]
 8002994:	2800      	cmp	r0, #0
 8002996:	d1d5      	bne.n	8002944 <__sfp+0x24>
 8002998:	f7ff ff78 	bl	800288c <__sfp_lock_release>
 800299c:	230c      	movs	r3, #12
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	e7ee      	b.n	8002980 <__sfp+0x60>
 80029a2:	bf00      	nop
 80029a4:	08003760 	.word	0x08003760
 80029a8:	ffff0001 	.word	0xffff0001

080029ac <_fwalk_reent>:
 80029ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029b0:	4606      	mov	r6, r0
 80029b2:	4688      	mov	r8, r1
 80029b4:	2700      	movs	r7, #0
 80029b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80029ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029be:	f1b9 0901 	subs.w	r9, r9, #1
 80029c2:	d505      	bpl.n	80029d0 <_fwalk_reent+0x24>
 80029c4:	6824      	ldr	r4, [r4, #0]
 80029c6:	2c00      	cmp	r4, #0
 80029c8:	d1f7      	bne.n	80029ba <_fwalk_reent+0xe>
 80029ca:	4638      	mov	r0, r7
 80029cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029d0:	89ab      	ldrh	r3, [r5, #12]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d907      	bls.n	80029e6 <_fwalk_reent+0x3a>
 80029d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80029da:	3301      	adds	r3, #1
 80029dc:	d003      	beq.n	80029e6 <_fwalk_reent+0x3a>
 80029de:	4629      	mov	r1, r5
 80029e0:	4630      	mov	r0, r6
 80029e2:	47c0      	blx	r8
 80029e4:	4307      	orrs	r7, r0
 80029e6:	3568      	adds	r5, #104	; 0x68
 80029e8:	e7e9      	b.n	80029be <_fwalk_reent+0x12>

080029ea <__retarget_lock_init_recursive>:
 80029ea:	4770      	bx	lr

080029ec <__retarget_lock_acquire_recursive>:
 80029ec:	4770      	bx	lr

080029ee <__retarget_lock_release_recursive>:
 80029ee:	4770      	bx	lr

080029f0 <sbrk_aligned>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	4e0e      	ldr	r6, [pc, #56]	; (8002a2c <sbrk_aligned+0x3c>)
 80029f4:	460c      	mov	r4, r1
 80029f6:	6831      	ldr	r1, [r6, #0]
 80029f8:	4605      	mov	r5, r0
 80029fa:	b911      	cbnz	r1, 8002a02 <sbrk_aligned+0x12>
 80029fc:	f000 fb7a 	bl	80030f4 <_sbrk_r>
 8002a00:	6030      	str	r0, [r6, #0]
 8002a02:	4621      	mov	r1, r4
 8002a04:	4628      	mov	r0, r5
 8002a06:	f000 fb75 	bl	80030f4 <_sbrk_r>
 8002a0a:	1c43      	adds	r3, r0, #1
 8002a0c:	d00a      	beq.n	8002a24 <sbrk_aligned+0x34>
 8002a0e:	1cc4      	adds	r4, r0, #3
 8002a10:	f024 0403 	bic.w	r4, r4, #3
 8002a14:	42a0      	cmp	r0, r4
 8002a16:	d007      	beq.n	8002a28 <sbrk_aligned+0x38>
 8002a18:	1a21      	subs	r1, r4, r0
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f000 fb6a 	bl	80030f4 <_sbrk_r>
 8002a20:	3001      	adds	r0, #1
 8002a22:	d101      	bne.n	8002a28 <sbrk_aligned+0x38>
 8002a24:	f04f 34ff 	mov.w	r4, #4294967295
 8002a28:	4620      	mov	r0, r4
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	2000015c 	.word	0x2000015c

08002a30 <_malloc_r>:
 8002a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a34:	1ccd      	adds	r5, r1, #3
 8002a36:	f025 0503 	bic.w	r5, r5, #3
 8002a3a:	3508      	adds	r5, #8
 8002a3c:	2d0c      	cmp	r5, #12
 8002a3e:	bf38      	it	cc
 8002a40:	250c      	movcc	r5, #12
 8002a42:	2d00      	cmp	r5, #0
 8002a44:	4607      	mov	r7, r0
 8002a46:	db01      	blt.n	8002a4c <_malloc_r+0x1c>
 8002a48:	42a9      	cmp	r1, r5
 8002a4a:	d905      	bls.n	8002a58 <_malloc_r+0x28>
 8002a4c:	230c      	movs	r3, #12
 8002a4e:	2600      	movs	r6, #0
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	4630      	mov	r0, r6
 8002a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a58:	4e2e      	ldr	r6, [pc, #184]	; (8002b14 <_malloc_r+0xe4>)
 8002a5a:	f000 fdc5 	bl	80035e8 <__malloc_lock>
 8002a5e:	6833      	ldr	r3, [r6, #0]
 8002a60:	461c      	mov	r4, r3
 8002a62:	bb34      	cbnz	r4, 8002ab2 <_malloc_r+0x82>
 8002a64:	4629      	mov	r1, r5
 8002a66:	4638      	mov	r0, r7
 8002a68:	f7ff ffc2 	bl	80029f0 <sbrk_aligned>
 8002a6c:	1c43      	adds	r3, r0, #1
 8002a6e:	4604      	mov	r4, r0
 8002a70:	d14d      	bne.n	8002b0e <_malloc_r+0xde>
 8002a72:	6834      	ldr	r4, [r6, #0]
 8002a74:	4626      	mov	r6, r4
 8002a76:	2e00      	cmp	r6, #0
 8002a78:	d140      	bne.n	8002afc <_malloc_r+0xcc>
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	4631      	mov	r1, r6
 8002a7e:	4638      	mov	r0, r7
 8002a80:	eb04 0803 	add.w	r8, r4, r3
 8002a84:	f000 fb36 	bl	80030f4 <_sbrk_r>
 8002a88:	4580      	cmp	r8, r0
 8002a8a:	d13a      	bne.n	8002b02 <_malloc_r+0xd2>
 8002a8c:	6821      	ldr	r1, [r4, #0]
 8002a8e:	3503      	adds	r5, #3
 8002a90:	1a6d      	subs	r5, r5, r1
 8002a92:	f025 0503 	bic.w	r5, r5, #3
 8002a96:	3508      	adds	r5, #8
 8002a98:	2d0c      	cmp	r5, #12
 8002a9a:	bf38      	it	cc
 8002a9c:	250c      	movcc	r5, #12
 8002a9e:	4638      	mov	r0, r7
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	f7ff ffa5 	bl	80029f0 <sbrk_aligned>
 8002aa6:	3001      	adds	r0, #1
 8002aa8:	d02b      	beq.n	8002b02 <_malloc_r+0xd2>
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	442b      	add	r3, r5
 8002aae:	6023      	str	r3, [r4, #0]
 8002ab0:	e00e      	b.n	8002ad0 <_malloc_r+0xa0>
 8002ab2:	6822      	ldr	r2, [r4, #0]
 8002ab4:	1b52      	subs	r2, r2, r5
 8002ab6:	d41e      	bmi.n	8002af6 <_malloc_r+0xc6>
 8002ab8:	2a0b      	cmp	r2, #11
 8002aba:	d916      	bls.n	8002aea <_malloc_r+0xba>
 8002abc:	1961      	adds	r1, r4, r5
 8002abe:	42a3      	cmp	r3, r4
 8002ac0:	6025      	str	r5, [r4, #0]
 8002ac2:	bf18      	it	ne
 8002ac4:	6059      	strne	r1, [r3, #4]
 8002ac6:	6863      	ldr	r3, [r4, #4]
 8002ac8:	bf08      	it	eq
 8002aca:	6031      	streq	r1, [r6, #0]
 8002acc:	5162      	str	r2, [r4, r5]
 8002ace:	604b      	str	r3, [r1, #4]
 8002ad0:	4638      	mov	r0, r7
 8002ad2:	f104 060b 	add.w	r6, r4, #11
 8002ad6:	f000 fd8d 	bl	80035f4 <__malloc_unlock>
 8002ada:	f026 0607 	bic.w	r6, r6, #7
 8002ade:	1d23      	adds	r3, r4, #4
 8002ae0:	1af2      	subs	r2, r6, r3
 8002ae2:	d0b6      	beq.n	8002a52 <_malloc_r+0x22>
 8002ae4:	1b9b      	subs	r3, r3, r6
 8002ae6:	50a3      	str	r3, [r4, r2]
 8002ae8:	e7b3      	b.n	8002a52 <_malloc_r+0x22>
 8002aea:	6862      	ldr	r2, [r4, #4]
 8002aec:	42a3      	cmp	r3, r4
 8002aee:	bf0c      	ite	eq
 8002af0:	6032      	streq	r2, [r6, #0]
 8002af2:	605a      	strne	r2, [r3, #4]
 8002af4:	e7ec      	b.n	8002ad0 <_malloc_r+0xa0>
 8002af6:	4623      	mov	r3, r4
 8002af8:	6864      	ldr	r4, [r4, #4]
 8002afa:	e7b2      	b.n	8002a62 <_malloc_r+0x32>
 8002afc:	4634      	mov	r4, r6
 8002afe:	6876      	ldr	r6, [r6, #4]
 8002b00:	e7b9      	b.n	8002a76 <_malloc_r+0x46>
 8002b02:	230c      	movs	r3, #12
 8002b04:	4638      	mov	r0, r7
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	f000 fd74 	bl	80035f4 <__malloc_unlock>
 8002b0c:	e7a1      	b.n	8002a52 <_malloc_r+0x22>
 8002b0e:	6025      	str	r5, [r4, #0]
 8002b10:	e7de      	b.n	8002ad0 <_malloc_r+0xa0>
 8002b12:	bf00      	nop
 8002b14:	20000158 	.word	0x20000158

08002b18 <__sfputc_r>:
 8002b18:	6893      	ldr	r3, [r2, #8]
 8002b1a:	b410      	push	{r4}
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	6093      	str	r3, [r2, #8]
 8002b22:	da07      	bge.n	8002b34 <__sfputc_r+0x1c>
 8002b24:	6994      	ldr	r4, [r2, #24]
 8002b26:	42a3      	cmp	r3, r4
 8002b28:	db01      	blt.n	8002b2e <__sfputc_r+0x16>
 8002b2a:	290a      	cmp	r1, #10
 8002b2c:	d102      	bne.n	8002b34 <__sfputc_r+0x1c>
 8002b2e:	bc10      	pop	{r4}
 8002b30:	f000 bb34 	b.w	800319c <__swbuf_r>
 8002b34:	6813      	ldr	r3, [r2, #0]
 8002b36:	1c58      	adds	r0, r3, #1
 8002b38:	6010      	str	r0, [r2, #0]
 8002b3a:	7019      	strb	r1, [r3, #0]
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	bc10      	pop	{r4}
 8002b40:	4770      	bx	lr

08002b42 <__sfputs_r>:
 8002b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b44:	4606      	mov	r6, r0
 8002b46:	460f      	mov	r7, r1
 8002b48:	4614      	mov	r4, r2
 8002b4a:	18d5      	adds	r5, r2, r3
 8002b4c:	42ac      	cmp	r4, r5
 8002b4e:	d101      	bne.n	8002b54 <__sfputs_r+0x12>
 8002b50:	2000      	movs	r0, #0
 8002b52:	e007      	b.n	8002b64 <__sfputs_r+0x22>
 8002b54:	463a      	mov	r2, r7
 8002b56:	4630      	mov	r0, r6
 8002b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b5c:	f7ff ffdc 	bl	8002b18 <__sfputc_r>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d1f3      	bne.n	8002b4c <__sfputs_r+0xa>
 8002b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b68 <_vfiprintf_r>:
 8002b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b6c:	460d      	mov	r5, r1
 8002b6e:	4614      	mov	r4, r2
 8002b70:	4698      	mov	r8, r3
 8002b72:	4606      	mov	r6, r0
 8002b74:	b09d      	sub	sp, #116	; 0x74
 8002b76:	b118      	cbz	r0, 8002b80 <_vfiprintf_r+0x18>
 8002b78:	6983      	ldr	r3, [r0, #24]
 8002b7a:	b90b      	cbnz	r3, 8002b80 <_vfiprintf_r+0x18>
 8002b7c:	f7ff fe98 	bl	80028b0 <__sinit>
 8002b80:	4b89      	ldr	r3, [pc, #548]	; (8002da8 <_vfiprintf_r+0x240>)
 8002b82:	429d      	cmp	r5, r3
 8002b84:	d11b      	bne.n	8002bbe <_vfiprintf_r+0x56>
 8002b86:	6875      	ldr	r5, [r6, #4]
 8002b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b8a:	07d9      	lsls	r1, r3, #31
 8002b8c:	d405      	bmi.n	8002b9a <_vfiprintf_r+0x32>
 8002b8e:	89ab      	ldrh	r3, [r5, #12]
 8002b90:	059a      	lsls	r2, r3, #22
 8002b92:	d402      	bmi.n	8002b9a <_vfiprintf_r+0x32>
 8002b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b96:	f7ff ff29 	bl	80029ec <__retarget_lock_acquire_recursive>
 8002b9a:	89ab      	ldrh	r3, [r5, #12]
 8002b9c:	071b      	lsls	r3, r3, #28
 8002b9e:	d501      	bpl.n	8002ba4 <_vfiprintf_r+0x3c>
 8002ba0:	692b      	ldr	r3, [r5, #16]
 8002ba2:	b9eb      	cbnz	r3, 8002be0 <_vfiprintf_r+0x78>
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	f000 fb5c 	bl	8003264 <__swsetup_r>
 8002bac:	b1c0      	cbz	r0, 8002be0 <_vfiprintf_r+0x78>
 8002bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002bb0:	07dc      	lsls	r4, r3, #31
 8002bb2:	d50e      	bpl.n	8002bd2 <_vfiprintf_r+0x6a>
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	b01d      	add	sp, #116	; 0x74
 8002bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bbe:	4b7b      	ldr	r3, [pc, #492]	; (8002dac <_vfiprintf_r+0x244>)
 8002bc0:	429d      	cmp	r5, r3
 8002bc2:	d101      	bne.n	8002bc8 <_vfiprintf_r+0x60>
 8002bc4:	68b5      	ldr	r5, [r6, #8]
 8002bc6:	e7df      	b.n	8002b88 <_vfiprintf_r+0x20>
 8002bc8:	4b79      	ldr	r3, [pc, #484]	; (8002db0 <_vfiprintf_r+0x248>)
 8002bca:	429d      	cmp	r5, r3
 8002bcc:	bf08      	it	eq
 8002bce:	68f5      	ldreq	r5, [r6, #12]
 8002bd0:	e7da      	b.n	8002b88 <_vfiprintf_r+0x20>
 8002bd2:	89ab      	ldrh	r3, [r5, #12]
 8002bd4:	0598      	lsls	r0, r3, #22
 8002bd6:	d4ed      	bmi.n	8002bb4 <_vfiprintf_r+0x4c>
 8002bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bda:	f7ff ff08 	bl	80029ee <__retarget_lock_release_recursive>
 8002bde:	e7e9      	b.n	8002bb4 <_vfiprintf_r+0x4c>
 8002be0:	2300      	movs	r3, #0
 8002be2:	9309      	str	r3, [sp, #36]	; 0x24
 8002be4:	2320      	movs	r3, #32
 8002be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bea:	2330      	movs	r3, #48	; 0x30
 8002bec:	f04f 0901 	mov.w	r9, #1
 8002bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bf4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002db4 <_vfiprintf_r+0x24c>
 8002bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bfc:	4623      	mov	r3, r4
 8002bfe:	469a      	mov	sl, r3
 8002c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c04:	b10a      	cbz	r2, 8002c0a <_vfiprintf_r+0xa2>
 8002c06:	2a25      	cmp	r2, #37	; 0x25
 8002c08:	d1f9      	bne.n	8002bfe <_vfiprintf_r+0x96>
 8002c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8002c0e:	d00b      	beq.n	8002c28 <_vfiprintf_r+0xc0>
 8002c10:	465b      	mov	r3, fp
 8002c12:	4622      	mov	r2, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	4630      	mov	r0, r6
 8002c18:	f7ff ff93 	bl	8002b42 <__sfputs_r>
 8002c1c:	3001      	adds	r0, #1
 8002c1e:	f000 80aa 	beq.w	8002d76 <_vfiprintf_r+0x20e>
 8002c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c24:	445a      	add	r2, fp
 8002c26:	9209      	str	r2, [sp, #36]	; 0x24
 8002c28:	f89a 3000 	ldrb.w	r3, [sl]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a2 	beq.w	8002d76 <_vfiprintf_r+0x20e>
 8002c32:	2300      	movs	r3, #0
 8002c34:	f04f 32ff 	mov.w	r2, #4294967295
 8002c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c3c:	f10a 0a01 	add.w	sl, sl, #1
 8002c40:	9304      	str	r3, [sp, #16]
 8002c42:	9307      	str	r3, [sp, #28]
 8002c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c48:	931a      	str	r3, [sp, #104]	; 0x68
 8002c4a:	4654      	mov	r4, sl
 8002c4c:	2205      	movs	r2, #5
 8002c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c52:	4858      	ldr	r0, [pc, #352]	; (8002db4 <_vfiprintf_r+0x24c>)
 8002c54:	f000 fcba 	bl	80035cc <memchr>
 8002c58:	9a04      	ldr	r2, [sp, #16]
 8002c5a:	b9d8      	cbnz	r0, 8002c94 <_vfiprintf_r+0x12c>
 8002c5c:	06d1      	lsls	r1, r2, #27
 8002c5e:	bf44      	itt	mi
 8002c60:	2320      	movmi	r3, #32
 8002c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c66:	0713      	lsls	r3, r2, #28
 8002c68:	bf44      	itt	mi
 8002c6a:	232b      	movmi	r3, #43	; 0x2b
 8002c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c70:	f89a 3000 	ldrb.w	r3, [sl]
 8002c74:	2b2a      	cmp	r3, #42	; 0x2a
 8002c76:	d015      	beq.n	8002ca4 <_vfiprintf_r+0x13c>
 8002c78:	4654      	mov	r4, sl
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f04f 0c0a 	mov.w	ip, #10
 8002c80:	9a07      	ldr	r2, [sp, #28]
 8002c82:	4621      	mov	r1, r4
 8002c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c88:	3b30      	subs	r3, #48	; 0x30
 8002c8a:	2b09      	cmp	r3, #9
 8002c8c:	d94e      	bls.n	8002d2c <_vfiprintf_r+0x1c4>
 8002c8e:	b1b0      	cbz	r0, 8002cbe <_vfiprintf_r+0x156>
 8002c90:	9207      	str	r2, [sp, #28]
 8002c92:	e014      	b.n	8002cbe <_vfiprintf_r+0x156>
 8002c94:	eba0 0308 	sub.w	r3, r0, r8
 8002c98:	fa09 f303 	lsl.w	r3, r9, r3
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	46a2      	mov	sl, r4
 8002ca0:	9304      	str	r3, [sp, #16]
 8002ca2:	e7d2      	b.n	8002c4a <_vfiprintf_r+0xe2>
 8002ca4:	9b03      	ldr	r3, [sp, #12]
 8002ca6:	1d19      	adds	r1, r3, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	9103      	str	r1, [sp, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bfbb      	ittet	lt
 8002cb0:	425b      	neglt	r3, r3
 8002cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8002cb6:	9307      	strge	r3, [sp, #28]
 8002cb8:	9307      	strlt	r3, [sp, #28]
 8002cba:	bfb8      	it	lt
 8002cbc:	9204      	strlt	r2, [sp, #16]
 8002cbe:	7823      	ldrb	r3, [r4, #0]
 8002cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8002cc2:	d10c      	bne.n	8002cde <_vfiprintf_r+0x176>
 8002cc4:	7863      	ldrb	r3, [r4, #1]
 8002cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8002cc8:	d135      	bne.n	8002d36 <_vfiprintf_r+0x1ce>
 8002cca:	9b03      	ldr	r3, [sp, #12]
 8002ccc:	3402      	adds	r4, #2
 8002cce:	1d1a      	adds	r2, r3, #4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	9203      	str	r2, [sp, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bfb8      	it	lt
 8002cd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cdc:	9305      	str	r3, [sp, #20]
 8002cde:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002db8 <_vfiprintf_r+0x250>
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	4650      	mov	r0, sl
 8002ce6:	7821      	ldrb	r1, [r4, #0]
 8002ce8:	f000 fc70 	bl	80035cc <memchr>
 8002cec:	b140      	cbz	r0, 8002d00 <_vfiprintf_r+0x198>
 8002cee:	2340      	movs	r3, #64	; 0x40
 8002cf0:	eba0 000a 	sub.w	r0, r0, sl
 8002cf4:	fa03 f000 	lsl.w	r0, r3, r0
 8002cf8:	9b04      	ldr	r3, [sp, #16]
 8002cfa:	3401      	adds	r4, #1
 8002cfc:	4303      	orrs	r3, r0
 8002cfe:	9304      	str	r3, [sp, #16]
 8002d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d04:	2206      	movs	r2, #6
 8002d06:	482d      	ldr	r0, [pc, #180]	; (8002dbc <_vfiprintf_r+0x254>)
 8002d08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d0c:	f000 fc5e 	bl	80035cc <memchr>
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d03f      	beq.n	8002d94 <_vfiprintf_r+0x22c>
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <_vfiprintf_r+0x258>)
 8002d16:	bb1b      	cbnz	r3, 8002d60 <_vfiprintf_r+0x1f8>
 8002d18:	9b03      	ldr	r3, [sp, #12]
 8002d1a:	3307      	adds	r3, #7
 8002d1c:	f023 0307 	bic.w	r3, r3, #7
 8002d20:	3308      	adds	r3, #8
 8002d22:	9303      	str	r3, [sp, #12]
 8002d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d26:	443b      	add	r3, r7
 8002d28:	9309      	str	r3, [sp, #36]	; 0x24
 8002d2a:	e767      	b.n	8002bfc <_vfiprintf_r+0x94>
 8002d2c:	460c      	mov	r4, r1
 8002d2e:	2001      	movs	r0, #1
 8002d30:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d34:	e7a5      	b.n	8002c82 <_vfiprintf_r+0x11a>
 8002d36:	2300      	movs	r3, #0
 8002d38:	f04f 0c0a 	mov.w	ip, #10
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	3401      	adds	r4, #1
 8002d40:	9305      	str	r3, [sp, #20]
 8002d42:	4620      	mov	r0, r4
 8002d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d48:	3a30      	subs	r2, #48	; 0x30
 8002d4a:	2a09      	cmp	r2, #9
 8002d4c:	d903      	bls.n	8002d56 <_vfiprintf_r+0x1ee>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0c5      	beq.n	8002cde <_vfiprintf_r+0x176>
 8002d52:	9105      	str	r1, [sp, #20]
 8002d54:	e7c3      	b.n	8002cde <_vfiprintf_r+0x176>
 8002d56:	4604      	mov	r4, r0
 8002d58:	2301      	movs	r3, #1
 8002d5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d5e:	e7f0      	b.n	8002d42 <_vfiprintf_r+0x1da>
 8002d60:	ab03      	add	r3, sp, #12
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	462a      	mov	r2, r5
 8002d66:	4630      	mov	r0, r6
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <_vfiprintf_r+0x25c>)
 8002d6a:	a904      	add	r1, sp, #16
 8002d6c:	f3af 8000 	nop.w
 8002d70:	4607      	mov	r7, r0
 8002d72:	1c78      	adds	r0, r7, #1
 8002d74:	d1d6      	bne.n	8002d24 <_vfiprintf_r+0x1bc>
 8002d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d78:	07d9      	lsls	r1, r3, #31
 8002d7a:	d405      	bmi.n	8002d88 <_vfiprintf_r+0x220>
 8002d7c:	89ab      	ldrh	r3, [r5, #12]
 8002d7e:	059a      	lsls	r2, r3, #22
 8002d80:	d402      	bmi.n	8002d88 <_vfiprintf_r+0x220>
 8002d82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d84:	f7ff fe33 	bl	80029ee <__retarget_lock_release_recursive>
 8002d88:	89ab      	ldrh	r3, [r5, #12]
 8002d8a:	065b      	lsls	r3, r3, #25
 8002d8c:	f53f af12 	bmi.w	8002bb4 <_vfiprintf_r+0x4c>
 8002d90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d92:	e711      	b.n	8002bb8 <_vfiprintf_r+0x50>
 8002d94:	ab03      	add	r3, sp, #12
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	462a      	mov	r2, r5
 8002d9a:	4630      	mov	r0, r6
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <_vfiprintf_r+0x25c>)
 8002d9e:	a904      	add	r1, sp, #16
 8002da0:	f000 f882 	bl	8002ea8 <_printf_i>
 8002da4:	e7e4      	b.n	8002d70 <_vfiprintf_r+0x208>
 8002da6:	bf00      	nop
 8002da8:	08003784 	.word	0x08003784
 8002dac:	080037a4 	.word	0x080037a4
 8002db0:	08003764 	.word	0x08003764
 8002db4:	080037c4 	.word	0x080037c4
 8002db8:	080037ca 	.word	0x080037ca
 8002dbc:	080037ce 	.word	0x080037ce
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	08002b43 	.word	0x08002b43

08002dc8 <_printf_common>:
 8002dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dcc:	4616      	mov	r6, r2
 8002dce:	4699      	mov	r9, r3
 8002dd0:	688a      	ldr	r2, [r1, #8]
 8002dd2:	690b      	ldr	r3, [r1, #16]
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	bfb8      	it	lt
 8002dda:	4613      	movlt	r3, r2
 8002ddc:	6033      	str	r3, [r6, #0]
 8002dde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002de2:	460c      	mov	r4, r1
 8002de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002de8:	b10a      	cbz	r2, 8002dee <_printf_common+0x26>
 8002dea:	3301      	adds	r3, #1
 8002dec:	6033      	str	r3, [r6, #0]
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	0699      	lsls	r1, r3, #26
 8002df2:	bf42      	ittt	mi
 8002df4:	6833      	ldrmi	r3, [r6, #0]
 8002df6:	3302      	addmi	r3, #2
 8002df8:	6033      	strmi	r3, [r6, #0]
 8002dfa:	6825      	ldr	r5, [r4, #0]
 8002dfc:	f015 0506 	ands.w	r5, r5, #6
 8002e00:	d106      	bne.n	8002e10 <_printf_common+0x48>
 8002e02:	f104 0a19 	add.w	sl, r4, #25
 8002e06:	68e3      	ldr	r3, [r4, #12]
 8002e08:	6832      	ldr	r2, [r6, #0]
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	42ab      	cmp	r3, r5
 8002e0e:	dc28      	bgt.n	8002e62 <_printf_common+0x9a>
 8002e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e14:	1e13      	subs	r3, r2, #0
 8002e16:	6822      	ldr	r2, [r4, #0]
 8002e18:	bf18      	it	ne
 8002e1a:	2301      	movne	r3, #1
 8002e1c:	0692      	lsls	r2, r2, #26
 8002e1e:	d42d      	bmi.n	8002e7c <_printf_common+0xb4>
 8002e20:	4649      	mov	r1, r9
 8002e22:	4638      	mov	r0, r7
 8002e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e28:	47c0      	blx	r8
 8002e2a:	3001      	adds	r0, #1
 8002e2c:	d020      	beq.n	8002e70 <_printf_common+0xa8>
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	68e5      	ldr	r5, [r4, #12]
 8002e32:	f003 0306 	and.w	r3, r3, #6
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	bf18      	it	ne
 8002e3a:	2500      	movne	r5, #0
 8002e3c:	6832      	ldr	r2, [r6, #0]
 8002e3e:	f04f 0600 	mov.w	r6, #0
 8002e42:	68a3      	ldr	r3, [r4, #8]
 8002e44:	bf08      	it	eq
 8002e46:	1aad      	subeq	r5, r5, r2
 8002e48:	6922      	ldr	r2, [r4, #16]
 8002e4a:	bf08      	it	eq
 8002e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e50:	4293      	cmp	r3, r2
 8002e52:	bfc4      	itt	gt
 8002e54:	1a9b      	subgt	r3, r3, r2
 8002e56:	18ed      	addgt	r5, r5, r3
 8002e58:	341a      	adds	r4, #26
 8002e5a:	42b5      	cmp	r5, r6
 8002e5c:	d11a      	bne.n	8002e94 <_printf_common+0xcc>
 8002e5e:	2000      	movs	r0, #0
 8002e60:	e008      	b.n	8002e74 <_printf_common+0xac>
 8002e62:	2301      	movs	r3, #1
 8002e64:	4652      	mov	r2, sl
 8002e66:	4649      	mov	r1, r9
 8002e68:	4638      	mov	r0, r7
 8002e6a:	47c0      	blx	r8
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	d103      	bne.n	8002e78 <_printf_common+0xb0>
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295
 8002e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e78:	3501      	adds	r5, #1
 8002e7a:	e7c4      	b.n	8002e06 <_printf_common+0x3e>
 8002e7c:	2030      	movs	r0, #48	; 0x30
 8002e7e:	18e1      	adds	r1, r4, r3
 8002e80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e8a:	4422      	add	r2, r4
 8002e8c:	3302      	adds	r3, #2
 8002e8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e92:	e7c5      	b.n	8002e20 <_printf_common+0x58>
 8002e94:	2301      	movs	r3, #1
 8002e96:	4622      	mov	r2, r4
 8002e98:	4649      	mov	r1, r9
 8002e9a:	4638      	mov	r0, r7
 8002e9c:	47c0      	blx	r8
 8002e9e:	3001      	adds	r0, #1
 8002ea0:	d0e6      	beq.n	8002e70 <_printf_common+0xa8>
 8002ea2:	3601      	adds	r6, #1
 8002ea4:	e7d9      	b.n	8002e5a <_printf_common+0x92>
	...

08002ea8 <_printf_i>:
 8002ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002eac:	7e0f      	ldrb	r7, [r1, #24]
 8002eae:	4691      	mov	r9, r2
 8002eb0:	2f78      	cmp	r7, #120	; 0x78
 8002eb2:	4680      	mov	r8, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	469a      	mov	sl, r3
 8002eb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ebe:	d807      	bhi.n	8002ed0 <_printf_i+0x28>
 8002ec0:	2f62      	cmp	r7, #98	; 0x62
 8002ec2:	d80a      	bhi.n	8002eda <_printf_i+0x32>
 8002ec4:	2f00      	cmp	r7, #0
 8002ec6:	f000 80d9 	beq.w	800307c <_printf_i+0x1d4>
 8002eca:	2f58      	cmp	r7, #88	; 0x58
 8002ecc:	f000 80a4 	beq.w	8003018 <_printf_i+0x170>
 8002ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ed8:	e03a      	b.n	8002f50 <_printf_i+0xa8>
 8002eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ede:	2b15      	cmp	r3, #21
 8002ee0:	d8f6      	bhi.n	8002ed0 <_printf_i+0x28>
 8002ee2:	a101      	add	r1, pc, #4	; (adr r1, 8002ee8 <_printf_i+0x40>)
 8002ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ee8:	08002f41 	.word	0x08002f41
 8002eec:	08002f55 	.word	0x08002f55
 8002ef0:	08002ed1 	.word	0x08002ed1
 8002ef4:	08002ed1 	.word	0x08002ed1
 8002ef8:	08002ed1 	.word	0x08002ed1
 8002efc:	08002ed1 	.word	0x08002ed1
 8002f00:	08002f55 	.word	0x08002f55
 8002f04:	08002ed1 	.word	0x08002ed1
 8002f08:	08002ed1 	.word	0x08002ed1
 8002f0c:	08002ed1 	.word	0x08002ed1
 8002f10:	08002ed1 	.word	0x08002ed1
 8002f14:	08003063 	.word	0x08003063
 8002f18:	08002f85 	.word	0x08002f85
 8002f1c:	08003045 	.word	0x08003045
 8002f20:	08002ed1 	.word	0x08002ed1
 8002f24:	08002ed1 	.word	0x08002ed1
 8002f28:	08003085 	.word	0x08003085
 8002f2c:	08002ed1 	.word	0x08002ed1
 8002f30:	08002f85 	.word	0x08002f85
 8002f34:	08002ed1 	.word	0x08002ed1
 8002f38:	08002ed1 	.word	0x08002ed1
 8002f3c:	0800304d 	.word	0x0800304d
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	1d1a      	adds	r2, r3, #4
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	602a      	str	r2, [r5, #0]
 8002f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0a4      	b.n	800309e <_printf_i+0x1f6>
 8002f54:	6820      	ldr	r0, [r4, #0]
 8002f56:	6829      	ldr	r1, [r5, #0]
 8002f58:	0606      	lsls	r6, r0, #24
 8002f5a:	f101 0304 	add.w	r3, r1, #4
 8002f5e:	d50a      	bpl.n	8002f76 <_printf_i+0xce>
 8002f60:	680e      	ldr	r6, [r1, #0]
 8002f62:	602b      	str	r3, [r5, #0]
 8002f64:	2e00      	cmp	r6, #0
 8002f66:	da03      	bge.n	8002f70 <_printf_i+0xc8>
 8002f68:	232d      	movs	r3, #45	; 0x2d
 8002f6a:	4276      	negs	r6, r6
 8002f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f70:	230a      	movs	r3, #10
 8002f72:	485e      	ldr	r0, [pc, #376]	; (80030ec <_printf_i+0x244>)
 8002f74:	e019      	b.n	8002faa <_printf_i+0x102>
 8002f76:	680e      	ldr	r6, [r1, #0]
 8002f78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f7c:	602b      	str	r3, [r5, #0]
 8002f7e:	bf18      	it	ne
 8002f80:	b236      	sxthne	r6, r6
 8002f82:	e7ef      	b.n	8002f64 <_printf_i+0xbc>
 8002f84:	682b      	ldr	r3, [r5, #0]
 8002f86:	6820      	ldr	r0, [r4, #0]
 8002f88:	1d19      	adds	r1, r3, #4
 8002f8a:	6029      	str	r1, [r5, #0]
 8002f8c:	0601      	lsls	r1, r0, #24
 8002f8e:	d501      	bpl.n	8002f94 <_printf_i+0xec>
 8002f90:	681e      	ldr	r6, [r3, #0]
 8002f92:	e002      	b.n	8002f9a <_printf_i+0xf2>
 8002f94:	0646      	lsls	r6, r0, #25
 8002f96:	d5fb      	bpl.n	8002f90 <_printf_i+0xe8>
 8002f98:	881e      	ldrh	r6, [r3, #0]
 8002f9a:	2f6f      	cmp	r7, #111	; 0x6f
 8002f9c:	bf0c      	ite	eq
 8002f9e:	2308      	moveq	r3, #8
 8002fa0:	230a      	movne	r3, #10
 8002fa2:	4852      	ldr	r0, [pc, #328]	; (80030ec <_printf_i+0x244>)
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002faa:	6865      	ldr	r5, [r4, #4]
 8002fac:	2d00      	cmp	r5, #0
 8002fae:	bfa8      	it	ge
 8002fb0:	6821      	ldrge	r1, [r4, #0]
 8002fb2:	60a5      	str	r5, [r4, #8]
 8002fb4:	bfa4      	itt	ge
 8002fb6:	f021 0104 	bicge.w	r1, r1, #4
 8002fba:	6021      	strge	r1, [r4, #0]
 8002fbc:	b90e      	cbnz	r6, 8002fc2 <_printf_i+0x11a>
 8002fbe:	2d00      	cmp	r5, #0
 8002fc0:	d04d      	beq.n	800305e <_printf_i+0x1b6>
 8002fc2:	4615      	mov	r5, r2
 8002fc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8002fc8:	fb03 6711 	mls	r7, r3, r1, r6
 8002fcc:	5dc7      	ldrb	r7, [r0, r7]
 8002fce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002fd2:	4637      	mov	r7, r6
 8002fd4:	42bb      	cmp	r3, r7
 8002fd6:	460e      	mov	r6, r1
 8002fd8:	d9f4      	bls.n	8002fc4 <_printf_i+0x11c>
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d10b      	bne.n	8002ff6 <_printf_i+0x14e>
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	07de      	lsls	r6, r3, #31
 8002fe2:	d508      	bpl.n	8002ff6 <_printf_i+0x14e>
 8002fe4:	6923      	ldr	r3, [r4, #16]
 8002fe6:	6861      	ldr	r1, [r4, #4]
 8002fe8:	4299      	cmp	r1, r3
 8002fea:	bfde      	ittt	le
 8002fec:	2330      	movle	r3, #48	; 0x30
 8002fee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ff2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ff6:	1b52      	subs	r2, r2, r5
 8002ff8:	6122      	str	r2, [r4, #16]
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4640      	mov	r0, r8
 8003000:	f8cd a000 	str.w	sl, [sp]
 8003004:	aa03      	add	r2, sp, #12
 8003006:	f7ff fedf 	bl	8002dc8 <_printf_common>
 800300a:	3001      	adds	r0, #1
 800300c:	d14c      	bne.n	80030a8 <_printf_i+0x200>
 800300e:	f04f 30ff 	mov.w	r0, #4294967295
 8003012:	b004      	add	sp, #16
 8003014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003018:	4834      	ldr	r0, [pc, #208]	; (80030ec <_printf_i+0x244>)
 800301a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800301e:	6829      	ldr	r1, [r5, #0]
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	f851 6b04 	ldr.w	r6, [r1], #4
 8003026:	6029      	str	r1, [r5, #0]
 8003028:	061d      	lsls	r5, r3, #24
 800302a:	d514      	bpl.n	8003056 <_printf_i+0x1ae>
 800302c:	07df      	lsls	r7, r3, #31
 800302e:	bf44      	itt	mi
 8003030:	f043 0320 	orrmi.w	r3, r3, #32
 8003034:	6023      	strmi	r3, [r4, #0]
 8003036:	b91e      	cbnz	r6, 8003040 <_printf_i+0x198>
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	f023 0320 	bic.w	r3, r3, #32
 800303e:	6023      	str	r3, [r4, #0]
 8003040:	2310      	movs	r3, #16
 8003042:	e7af      	b.n	8002fa4 <_printf_i+0xfc>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	f043 0320 	orr.w	r3, r3, #32
 800304a:	6023      	str	r3, [r4, #0]
 800304c:	2378      	movs	r3, #120	; 0x78
 800304e:	4828      	ldr	r0, [pc, #160]	; (80030f0 <_printf_i+0x248>)
 8003050:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003054:	e7e3      	b.n	800301e <_printf_i+0x176>
 8003056:	0659      	lsls	r1, r3, #25
 8003058:	bf48      	it	mi
 800305a:	b2b6      	uxthmi	r6, r6
 800305c:	e7e6      	b.n	800302c <_printf_i+0x184>
 800305e:	4615      	mov	r5, r2
 8003060:	e7bb      	b.n	8002fda <_printf_i+0x132>
 8003062:	682b      	ldr	r3, [r5, #0]
 8003064:	6826      	ldr	r6, [r4, #0]
 8003066:	1d18      	adds	r0, r3, #4
 8003068:	6961      	ldr	r1, [r4, #20]
 800306a:	6028      	str	r0, [r5, #0]
 800306c:	0635      	lsls	r5, r6, #24
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	d501      	bpl.n	8003076 <_printf_i+0x1ce>
 8003072:	6019      	str	r1, [r3, #0]
 8003074:	e002      	b.n	800307c <_printf_i+0x1d4>
 8003076:	0670      	lsls	r0, r6, #25
 8003078:	d5fb      	bpl.n	8003072 <_printf_i+0x1ca>
 800307a:	8019      	strh	r1, [r3, #0]
 800307c:	2300      	movs	r3, #0
 800307e:	4615      	mov	r5, r2
 8003080:	6123      	str	r3, [r4, #16]
 8003082:	e7ba      	b.n	8002ffa <_printf_i+0x152>
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	2100      	movs	r1, #0
 8003088:	1d1a      	adds	r2, r3, #4
 800308a:	602a      	str	r2, [r5, #0]
 800308c:	681d      	ldr	r5, [r3, #0]
 800308e:	6862      	ldr	r2, [r4, #4]
 8003090:	4628      	mov	r0, r5
 8003092:	f000 fa9b 	bl	80035cc <memchr>
 8003096:	b108      	cbz	r0, 800309c <_printf_i+0x1f4>
 8003098:	1b40      	subs	r0, r0, r5
 800309a:	6060      	str	r0, [r4, #4]
 800309c:	6863      	ldr	r3, [r4, #4]
 800309e:	6123      	str	r3, [r4, #16]
 80030a0:	2300      	movs	r3, #0
 80030a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030a6:	e7a8      	b.n	8002ffa <_printf_i+0x152>
 80030a8:	462a      	mov	r2, r5
 80030aa:	4649      	mov	r1, r9
 80030ac:	4640      	mov	r0, r8
 80030ae:	6923      	ldr	r3, [r4, #16]
 80030b0:	47d0      	blx	sl
 80030b2:	3001      	adds	r0, #1
 80030b4:	d0ab      	beq.n	800300e <_printf_i+0x166>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	079b      	lsls	r3, r3, #30
 80030ba:	d413      	bmi.n	80030e4 <_printf_i+0x23c>
 80030bc:	68e0      	ldr	r0, [r4, #12]
 80030be:	9b03      	ldr	r3, [sp, #12]
 80030c0:	4298      	cmp	r0, r3
 80030c2:	bfb8      	it	lt
 80030c4:	4618      	movlt	r0, r3
 80030c6:	e7a4      	b.n	8003012 <_printf_i+0x16a>
 80030c8:	2301      	movs	r3, #1
 80030ca:	4632      	mov	r2, r6
 80030cc:	4649      	mov	r1, r9
 80030ce:	4640      	mov	r0, r8
 80030d0:	47d0      	blx	sl
 80030d2:	3001      	adds	r0, #1
 80030d4:	d09b      	beq.n	800300e <_printf_i+0x166>
 80030d6:	3501      	adds	r5, #1
 80030d8:	68e3      	ldr	r3, [r4, #12]
 80030da:	9903      	ldr	r1, [sp, #12]
 80030dc:	1a5b      	subs	r3, r3, r1
 80030de:	42ab      	cmp	r3, r5
 80030e0:	dcf2      	bgt.n	80030c8 <_printf_i+0x220>
 80030e2:	e7eb      	b.n	80030bc <_printf_i+0x214>
 80030e4:	2500      	movs	r5, #0
 80030e6:	f104 0619 	add.w	r6, r4, #25
 80030ea:	e7f5      	b.n	80030d8 <_printf_i+0x230>
 80030ec:	080037d5 	.word	0x080037d5
 80030f0:	080037e6 	.word	0x080037e6

080030f4 <_sbrk_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	2300      	movs	r3, #0
 80030f8:	4d05      	ldr	r5, [pc, #20]	; (8003110 <_sbrk_r+0x1c>)
 80030fa:	4604      	mov	r4, r0
 80030fc:	4608      	mov	r0, r1
 80030fe:	602b      	str	r3, [r5, #0]
 8003100:	f7fd fb3e 	bl	8000780 <_sbrk>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	d102      	bne.n	800310e <_sbrk_r+0x1a>
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	b103      	cbz	r3, 800310e <_sbrk_r+0x1a>
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	bd38      	pop	{r3, r4, r5, pc}
 8003110:	20000160 	.word	0x20000160

08003114 <__sread>:
 8003114:	b510      	push	{r4, lr}
 8003116:	460c      	mov	r4, r1
 8003118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800311c:	f000 fab8 	bl	8003690 <_read_r>
 8003120:	2800      	cmp	r0, #0
 8003122:	bfab      	itete	ge
 8003124:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003126:	89a3      	ldrhlt	r3, [r4, #12]
 8003128:	181b      	addge	r3, r3, r0
 800312a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800312e:	bfac      	ite	ge
 8003130:	6563      	strge	r3, [r4, #84]	; 0x54
 8003132:	81a3      	strhlt	r3, [r4, #12]
 8003134:	bd10      	pop	{r4, pc}

08003136 <__swrite>:
 8003136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800313a:	461f      	mov	r7, r3
 800313c:	898b      	ldrh	r3, [r1, #12]
 800313e:	4605      	mov	r5, r0
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	460c      	mov	r4, r1
 8003144:	4616      	mov	r6, r2
 8003146:	d505      	bpl.n	8003154 <__swrite+0x1e>
 8003148:	2302      	movs	r3, #2
 800314a:	2200      	movs	r2, #0
 800314c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003150:	f000 f9c4 	bl	80034dc <_lseek_r>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	4632      	mov	r2, r6
 8003158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800315c:	81a3      	strh	r3, [r4, #12]
 800315e:	4628      	mov	r0, r5
 8003160:	463b      	mov	r3, r7
 8003162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800316a:	f000 b869 	b.w	8003240 <_write_r>

0800316e <__sseek>:
 800316e:	b510      	push	{r4, lr}
 8003170:	460c      	mov	r4, r1
 8003172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003176:	f000 f9b1 	bl	80034dc <_lseek_r>
 800317a:	1c43      	adds	r3, r0, #1
 800317c:	89a3      	ldrh	r3, [r4, #12]
 800317e:	bf15      	itete	ne
 8003180:	6560      	strne	r0, [r4, #84]	; 0x54
 8003182:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003186:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800318a:	81a3      	strheq	r3, [r4, #12]
 800318c:	bf18      	it	ne
 800318e:	81a3      	strhne	r3, [r4, #12]
 8003190:	bd10      	pop	{r4, pc}

08003192 <__sclose>:
 8003192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003196:	f000 b8d3 	b.w	8003340 <_close_r>
	...

0800319c <__swbuf_r>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	460e      	mov	r6, r1
 80031a0:	4614      	mov	r4, r2
 80031a2:	4605      	mov	r5, r0
 80031a4:	b118      	cbz	r0, 80031ae <__swbuf_r+0x12>
 80031a6:	6983      	ldr	r3, [r0, #24]
 80031a8:	b90b      	cbnz	r3, 80031ae <__swbuf_r+0x12>
 80031aa:	f7ff fb81 	bl	80028b0 <__sinit>
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <__swbuf_r+0x98>)
 80031b0:	429c      	cmp	r4, r3
 80031b2:	d12b      	bne.n	800320c <__swbuf_r+0x70>
 80031b4:	686c      	ldr	r4, [r5, #4]
 80031b6:	69a3      	ldr	r3, [r4, #24]
 80031b8:	60a3      	str	r3, [r4, #8]
 80031ba:	89a3      	ldrh	r3, [r4, #12]
 80031bc:	071a      	lsls	r2, r3, #28
 80031be:	d52f      	bpl.n	8003220 <__swbuf_r+0x84>
 80031c0:	6923      	ldr	r3, [r4, #16]
 80031c2:	b36b      	cbz	r3, 8003220 <__swbuf_r+0x84>
 80031c4:	6923      	ldr	r3, [r4, #16]
 80031c6:	6820      	ldr	r0, [r4, #0]
 80031c8:	b2f6      	uxtb	r6, r6
 80031ca:	1ac0      	subs	r0, r0, r3
 80031cc:	6963      	ldr	r3, [r4, #20]
 80031ce:	4637      	mov	r7, r6
 80031d0:	4283      	cmp	r3, r0
 80031d2:	dc04      	bgt.n	80031de <__swbuf_r+0x42>
 80031d4:	4621      	mov	r1, r4
 80031d6:	4628      	mov	r0, r5
 80031d8:	f000 f944 	bl	8003464 <_fflush_r>
 80031dc:	bb30      	cbnz	r0, 800322c <__swbuf_r+0x90>
 80031de:	68a3      	ldr	r3, [r4, #8]
 80031e0:	3001      	adds	r0, #1
 80031e2:	3b01      	subs	r3, #1
 80031e4:	60a3      	str	r3, [r4, #8]
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	6022      	str	r2, [r4, #0]
 80031ec:	701e      	strb	r6, [r3, #0]
 80031ee:	6963      	ldr	r3, [r4, #20]
 80031f0:	4283      	cmp	r3, r0
 80031f2:	d004      	beq.n	80031fe <__swbuf_r+0x62>
 80031f4:	89a3      	ldrh	r3, [r4, #12]
 80031f6:	07db      	lsls	r3, r3, #31
 80031f8:	d506      	bpl.n	8003208 <__swbuf_r+0x6c>
 80031fa:	2e0a      	cmp	r6, #10
 80031fc:	d104      	bne.n	8003208 <__swbuf_r+0x6c>
 80031fe:	4621      	mov	r1, r4
 8003200:	4628      	mov	r0, r5
 8003202:	f000 f92f 	bl	8003464 <_fflush_r>
 8003206:	b988      	cbnz	r0, 800322c <__swbuf_r+0x90>
 8003208:	4638      	mov	r0, r7
 800320a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <__swbuf_r+0x9c>)
 800320e:	429c      	cmp	r4, r3
 8003210:	d101      	bne.n	8003216 <__swbuf_r+0x7a>
 8003212:	68ac      	ldr	r4, [r5, #8]
 8003214:	e7cf      	b.n	80031b6 <__swbuf_r+0x1a>
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <__swbuf_r+0xa0>)
 8003218:	429c      	cmp	r4, r3
 800321a:	bf08      	it	eq
 800321c:	68ec      	ldreq	r4, [r5, #12]
 800321e:	e7ca      	b.n	80031b6 <__swbuf_r+0x1a>
 8003220:	4621      	mov	r1, r4
 8003222:	4628      	mov	r0, r5
 8003224:	f000 f81e 	bl	8003264 <__swsetup_r>
 8003228:	2800      	cmp	r0, #0
 800322a:	d0cb      	beq.n	80031c4 <__swbuf_r+0x28>
 800322c:	f04f 37ff 	mov.w	r7, #4294967295
 8003230:	e7ea      	b.n	8003208 <__swbuf_r+0x6c>
 8003232:	bf00      	nop
 8003234:	08003784 	.word	0x08003784
 8003238:	080037a4 	.word	0x080037a4
 800323c:	08003764 	.word	0x08003764

08003240 <_write_r>:
 8003240:	b538      	push	{r3, r4, r5, lr}
 8003242:	4604      	mov	r4, r0
 8003244:	4608      	mov	r0, r1
 8003246:	4611      	mov	r1, r2
 8003248:	2200      	movs	r2, #0
 800324a:	4d05      	ldr	r5, [pc, #20]	; (8003260 <_write_r+0x20>)
 800324c:	602a      	str	r2, [r5, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	f7fd fa49 	bl	80006e6 <_write>
 8003254:	1c43      	adds	r3, r0, #1
 8003256:	d102      	bne.n	800325e <_write_r+0x1e>
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	b103      	cbz	r3, 800325e <_write_r+0x1e>
 800325c:	6023      	str	r3, [r4, #0]
 800325e:	bd38      	pop	{r3, r4, r5, pc}
 8003260:	20000160 	.word	0x20000160

08003264 <__swsetup_r>:
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <__swsetup_r+0xcc>)
 8003266:	b570      	push	{r4, r5, r6, lr}
 8003268:	681d      	ldr	r5, [r3, #0]
 800326a:	4606      	mov	r6, r0
 800326c:	460c      	mov	r4, r1
 800326e:	b125      	cbz	r5, 800327a <__swsetup_r+0x16>
 8003270:	69ab      	ldr	r3, [r5, #24]
 8003272:	b913      	cbnz	r3, 800327a <__swsetup_r+0x16>
 8003274:	4628      	mov	r0, r5
 8003276:	f7ff fb1b 	bl	80028b0 <__sinit>
 800327a:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <__swsetup_r+0xd0>)
 800327c:	429c      	cmp	r4, r3
 800327e:	d10f      	bne.n	80032a0 <__swsetup_r+0x3c>
 8003280:	686c      	ldr	r4, [r5, #4]
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003288:	0719      	lsls	r1, r3, #28
 800328a:	d42c      	bmi.n	80032e6 <__swsetup_r+0x82>
 800328c:	06dd      	lsls	r5, r3, #27
 800328e:	d411      	bmi.n	80032b4 <__swsetup_r+0x50>
 8003290:	2309      	movs	r3, #9
 8003292:	6033      	str	r3, [r6, #0]
 8003294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	e03e      	b.n	800331e <__swsetup_r+0xba>
 80032a0:	4b25      	ldr	r3, [pc, #148]	; (8003338 <__swsetup_r+0xd4>)
 80032a2:	429c      	cmp	r4, r3
 80032a4:	d101      	bne.n	80032aa <__swsetup_r+0x46>
 80032a6:	68ac      	ldr	r4, [r5, #8]
 80032a8:	e7eb      	b.n	8003282 <__swsetup_r+0x1e>
 80032aa:	4b24      	ldr	r3, [pc, #144]	; (800333c <__swsetup_r+0xd8>)
 80032ac:	429c      	cmp	r4, r3
 80032ae:	bf08      	it	eq
 80032b0:	68ec      	ldreq	r4, [r5, #12]
 80032b2:	e7e6      	b.n	8003282 <__swsetup_r+0x1e>
 80032b4:	0758      	lsls	r0, r3, #29
 80032b6:	d512      	bpl.n	80032de <__swsetup_r+0x7a>
 80032b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032ba:	b141      	cbz	r1, 80032ce <__swsetup_r+0x6a>
 80032bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032c0:	4299      	cmp	r1, r3
 80032c2:	d002      	beq.n	80032ca <__swsetup_r+0x66>
 80032c4:	4630      	mov	r0, r6
 80032c6:	f000 f99b 	bl	8003600 <_free_r>
 80032ca:	2300      	movs	r3, #0
 80032cc:	6363      	str	r3, [r4, #52]	; 0x34
 80032ce:	89a3      	ldrh	r3, [r4, #12]
 80032d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032d4:	81a3      	strh	r3, [r4, #12]
 80032d6:	2300      	movs	r3, #0
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6923      	ldr	r3, [r4, #16]
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	f043 0308 	orr.w	r3, r3, #8
 80032e4:	81a3      	strh	r3, [r4, #12]
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	b94b      	cbnz	r3, 80032fe <__swsetup_r+0x9a>
 80032ea:	89a3      	ldrh	r3, [r4, #12]
 80032ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032f4:	d003      	beq.n	80032fe <__swsetup_r+0x9a>
 80032f6:	4621      	mov	r1, r4
 80032f8:	4630      	mov	r0, r6
 80032fa:	f000 f927 	bl	800354c <__smakebuf_r>
 80032fe:	89a0      	ldrh	r0, [r4, #12]
 8003300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003304:	f010 0301 	ands.w	r3, r0, #1
 8003308:	d00a      	beq.n	8003320 <__swsetup_r+0xbc>
 800330a:	2300      	movs	r3, #0
 800330c:	60a3      	str	r3, [r4, #8]
 800330e:	6963      	ldr	r3, [r4, #20]
 8003310:	425b      	negs	r3, r3
 8003312:	61a3      	str	r3, [r4, #24]
 8003314:	6923      	ldr	r3, [r4, #16]
 8003316:	b943      	cbnz	r3, 800332a <__swsetup_r+0xc6>
 8003318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800331c:	d1ba      	bne.n	8003294 <__swsetup_r+0x30>
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	0781      	lsls	r1, r0, #30
 8003322:	bf58      	it	pl
 8003324:	6963      	ldrpl	r3, [r4, #20]
 8003326:	60a3      	str	r3, [r4, #8]
 8003328:	e7f4      	b.n	8003314 <__swsetup_r+0xb0>
 800332a:	2000      	movs	r0, #0
 800332c:	e7f7      	b.n	800331e <__swsetup_r+0xba>
 800332e:	bf00      	nop
 8003330:	2000000c 	.word	0x2000000c
 8003334:	08003784 	.word	0x08003784
 8003338:	080037a4 	.word	0x080037a4
 800333c:	08003764 	.word	0x08003764

08003340 <_close_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	2300      	movs	r3, #0
 8003344:	4d05      	ldr	r5, [pc, #20]	; (800335c <_close_r+0x1c>)
 8003346:	4604      	mov	r4, r0
 8003348:	4608      	mov	r0, r1
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	f7fd f9e7 	bl	800071e <_close>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_close_r+0x1a>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_close_r+0x1a>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	20000160 	.word	0x20000160

08003360 <__sflush_r>:
 8003360:	898a      	ldrh	r2, [r1, #12]
 8003362:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003364:	4605      	mov	r5, r0
 8003366:	0710      	lsls	r0, r2, #28
 8003368:	460c      	mov	r4, r1
 800336a:	d457      	bmi.n	800341c <__sflush_r+0xbc>
 800336c:	684b      	ldr	r3, [r1, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	dc04      	bgt.n	800337c <__sflush_r+0x1c>
 8003372:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	dc01      	bgt.n	800337c <__sflush_r+0x1c>
 8003378:	2000      	movs	r0, #0
 800337a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800337c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800337e:	2e00      	cmp	r6, #0
 8003380:	d0fa      	beq.n	8003378 <__sflush_r+0x18>
 8003382:	2300      	movs	r3, #0
 8003384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003388:	682f      	ldr	r7, [r5, #0]
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	d032      	beq.n	80033f4 <__sflush_r+0x94>
 800338e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	075a      	lsls	r2, r3, #29
 8003394:	d505      	bpl.n	80033a2 <__sflush_r+0x42>
 8003396:	6863      	ldr	r3, [r4, #4]
 8003398:	1ac0      	subs	r0, r0, r3
 800339a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800339c:	b10b      	cbz	r3, 80033a2 <__sflush_r+0x42>
 800339e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033a0:	1ac0      	subs	r0, r0, r3
 80033a2:	2300      	movs	r3, #0
 80033a4:	4602      	mov	r2, r0
 80033a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033a8:	4628      	mov	r0, r5
 80033aa:	6a21      	ldr	r1, [r4, #32]
 80033ac:	47b0      	blx	r6
 80033ae:	1c43      	adds	r3, r0, #1
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	d106      	bne.n	80033c2 <__sflush_r+0x62>
 80033b4:	6829      	ldr	r1, [r5, #0]
 80033b6:	291d      	cmp	r1, #29
 80033b8:	d82c      	bhi.n	8003414 <__sflush_r+0xb4>
 80033ba:	4a29      	ldr	r2, [pc, #164]	; (8003460 <__sflush_r+0x100>)
 80033bc:	40ca      	lsrs	r2, r1
 80033be:	07d6      	lsls	r6, r2, #31
 80033c0:	d528      	bpl.n	8003414 <__sflush_r+0xb4>
 80033c2:	2200      	movs	r2, #0
 80033c4:	6062      	str	r2, [r4, #4]
 80033c6:	6922      	ldr	r2, [r4, #16]
 80033c8:	04d9      	lsls	r1, r3, #19
 80033ca:	6022      	str	r2, [r4, #0]
 80033cc:	d504      	bpl.n	80033d8 <__sflush_r+0x78>
 80033ce:	1c42      	adds	r2, r0, #1
 80033d0:	d101      	bne.n	80033d6 <__sflush_r+0x76>
 80033d2:	682b      	ldr	r3, [r5, #0]
 80033d4:	b903      	cbnz	r3, 80033d8 <__sflush_r+0x78>
 80033d6:	6560      	str	r0, [r4, #84]	; 0x54
 80033d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033da:	602f      	str	r7, [r5, #0]
 80033dc:	2900      	cmp	r1, #0
 80033de:	d0cb      	beq.n	8003378 <__sflush_r+0x18>
 80033e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033e4:	4299      	cmp	r1, r3
 80033e6:	d002      	beq.n	80033ee <__sflush_r+0x8e>
 80033e8:	4628      	mov	r0, r5
 80033ea:	f000 f909 	bl	8003600 <_free_r>
 80033ee:	2000      	movs	r0, #0
 80033f0:	6360      	str	r0, [r4, #52]	; 0x34
 80033f2:	e7c2      	b.n	800337a <__sflush_r+0x1a>
 80033f4:	6a21      	ldr	r1, [r4, #32]
 80033f6:	2301      	movs	r3, #1
 80033f8:	4628      	mov	r0, r5
 80033fa:	47b0      	blx	r6
 80033fc:	1c41      	adds	r1, r0, #1
 80033fe:	d1c7      	bne.n	8003390 <__sflush_r+0x30>
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0c4      	beq.n	8003390 <__sflush_r+0x30>
 8003406:	2b1d      	cmp	r3, #29
 8003408:	d001      	beq.n	800340e <__sflush_r+0xae>
 800340a:	2b16      	cmp	r3, #22
 800340c:	d101      	bne.n	8003412 <__sflush_r+0xb2>
 800340e:	602f      	str	r7, [r5, #0]
 8003410:	e7b2      	b.n	8003378 <__sflush_r+0x18>
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	e7ae      	b.n	800337a <__sflush_r+0x1a>
 800341c:	690f      	ldr	r7, [r1, #16]
 800341e:	2f00      	cmp	r7, #0
 8003420:	d0aa      	beq.n	8003378 <__sflush_r+0x18>
 8003422:	0793      	lsls	r3, r2, #30
 8003424:	bf18      	it	ne
 8003426:	2300      	movne	r3, #0
 8003428:	680e      	ldr	r6, [r1, #0]
 800342a:	bf08      	it	eq
 800342c:	694b      	ldreq	r3, [r1, #20]
 800342e:	1bf6      	subs	r6, r6, r7
 8003430:	600f      	str	r7, [r1, #0]
 8003432:	608b      	str	r3, [r1, #8]
 8003434:	2e00      	cmp	r6, #0
 8003436:	dd9f      	ble.n	8003378 <__sflush_r+0x18>
 8003438:	4633      	mov	r3, r6
 800343a:	463a      	mov	r2, r7
 800343c:	4628      	mov	r0, r5
 800343e:	6a21      	ldr	r1, [r4, #32]
 8003440:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003444:	47e0      	blx	ip
 8003446:	2800      	cmp	r0, #0
 8003448:	dc06      	bgt.n	8003458 <__sflush_r+0xf8>
 800344a:	89a3      	ldrh	r3, [r4, #12]
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003454:	81a3      	strh	r3, [r4, #12]
 8003456:	e790      	b.n	800337a <__sflush_r+0x1a>
 8003458:	4407      	add	r7, r0
 800345a:	1a36      	subs	r6, r6, r0
 800345c:	e7ea      	b.n	8003434 <__sflush_r+0xd4>
 800345e:	bf00      	nop
 8003460:	20400001 	.word	0x20400001

08003464 <_fflush_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	690b      	ldr	r3, [r1, #16]
 8003468:	4605      	mov	r5, r0
 800346a:	460c      	mov	r4, r1
 800346c:	b913      	cbnz	r3, 8003474 <_fflush_r+0x10>
 800346e:	2500      	movs	r5, #0
 8003470:	4628      	mov	r0, r5
 8003472:	bd38      	pop	{r3, r4, r5, pc}
 8003474:	b118      	cbz	r0, 800347e <_fflush_r+0x1a>
 8003476:	6983      	ldr	r3, [r0, #24]
 8003478:	b90b      	cbnz	r3, 800347e <_fflush_r+0x1a>
 800347a:	f7ff fa19 	bl	80028b0 <__sinit>
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <_fflush_r+0x6c>)
 8003480:	429c      	cmp	r4, r3
 8003482:	d11b      	bne.n	80034bc <_fflush_r+0x58>
 8003484:	686c      	ldr	r4, [r5, #4]
 8003486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ef      	beq.n	800346e <_fflush_r+0xa>
 800348e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003490:	07d0      	lsls	r0, r2, #31
 8003492:	d404      	bmi.n	800349e <_fflush_r+0x3a>
 8003494:	0599      	lsls	r1, r3, #22
 8003496:	d402      	bmi.n	800349e <_fflush_r+0x3a>
 8003498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800349a:	f7ff faa7 	bl	80029ec <__retarget_lock_acquire_recursive>
 800349e:	4628      	mov	r0, r5
 80034a0:	4621      	mov	r1, r4
 80034a2:	f7ff ff5d 	bl	8003360 <__sflush_r>
 80034a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034a8:	4605      	mov	r5, r0
 80034aa:	07da      	lsls	r2, r3, #31
 80034ac:	d4e0      	bmi.n	8003470 <_fflush_r+0xc>
 80034ae:	89a3      	ldrh	r3, [r4, #12]
 80034b0:	059b      	lsls	r3, r3, #22
 80034b2:	d4dd      	bmi.n	8003470 <_fflush_r+0xc>
 80034b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034b6:	f7ff fa9a 	bl	80029ee <__retarget_lock_release_recursive>
 80034ba:	e7d9      	b.n	8003470 <_fflush_r+0xc>
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <_fflush_r+0x70>)
 80034be:	429c      	cmp	r4, r3
 80034c0:	d101      	bne.n	80034c6 <_fflush_r+0x62>
 80034c2:	68ac      	ldr	r4, [r5, #8]
 80034c4:	e7df      	b.n	8003486 <_fflush_r+0x22>
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <_fflush_r+0x74>)
 80034c8:	429c      	cmp	r4, r3
 80034ca:	bf08      	it	eq
 80034cc:	68ec      	ldreq	r4, [r5, #12]
 80034ce:	e7da      	b.n	8003486 <_fflush_r+0x22>
 80034d0:	08003784 	.word	0x08003784
 80034d4:	080037a4 	.word	0x080037a4
 80034d8:	08003764 	.word	0x08003764

080034dc <_lseek_r>:
 80034dc:	b538      	push	{r3, r4, r5, lr}
 80034de:	4604      	mov	r4, r0
 80034e0:	4608      	mov	r0, r1
 80034e2:	4611      	mov	r1, r2
 80034e4:	2200      	movs	r2, #0
 80034e6:	4d05      	ldr	r5, [pc, #20]	; (80034fc <_lseek_r+0x20>)
 80034e8:	602a      	str	r2, [r5, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f7fd f93b 	bl	8000766 <_lseek>
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	d102      	bne.n	80034fa <_lseek_r+0x1e>
 80034f4:	682b      	ldr	r3, [r5, #0]
 80034f6:	b103      	cbz	r3, 80034fa <_lseek_r+0x1e>
 80034f8:	6023      	str	r3, [r4, #0]
 80034fa:	bd38      	pop	{r3, r4, r5, pc}
 80034fc:	20000160 	.word	0x20000160

08003500 <__swhatbuf_r>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	460e      	mov	r6, r1
 8003504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003508:	4614      	mov	r4, r2
 800350a:	2900      	cmp	r1, #0
 800350c:	461d      	mov	r5, r3
 800350e:	b096      	sub	sp, #88	; 0x58
 8003510:	da08      	bge.n	8003524 <__swhatbuf_r+0x24>
 8003512:	2200      	movs	r2, #0
 8003514:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003518:	602a      	str	r2, [r5, #0]
 800351a:	061a      	lsls	r2, r3, #24
 800351c:	d410      	bmi.n	8003540 <__swhatbuf_r+0x40>
 800351e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003522:	e00e      	b.n	8003542 <__swhatbuf_r+0x42>
 8003524:	466a      	mov	r2, sp
 8003526:	f000 f8c5 	bl	80036b4 <_fstat_r>
 800352a:	2800      	cmp	r0, #0
 800352c:	dbf1      	blt.n	8003512 <__swhatbuf_r+0x12>
 800352e:	9a01      	ldr	r2, [sp, #4]
 8003530:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003534:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003538:	425a      	negs	r2, r3
 800353a:	415a      	adcs	r2, r3
 800353c:	602a      	str	r2, [r5, #0]
 800353e:	e7ee      	b.n	800351e <__swhatbuf_r+0x1e>
 8003540:	2340      	movs	r3, #64	; 0x40
 8003542:	2000      	movs	r0, #0
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	b016      	add	sp, #88	; 0x58
 8003548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800354c <__smakebuf_r>:
 800354c:	898b      	ldrh	r3, [r1, #12]
 800354e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003550:	079d      	lsls	r5, r3, #30
 8003552:	4606      	mov	r6, r0
 8003554:	460c      	mov	r4, r1
 8003556:	d507      	bpl.n	8003568 <__smakebuf_r+0x1c>
 8003558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	6123      	str	r3, [r4, #16]
 8003560:	2301      	movs	r3, #1
 8003562:	6163      	str	r3, [r4, #20]
 8003564:	b002      	add	sp, #8
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	466a      	mov	r2, sp
 800356a:	ab01      	add	r3, sp, #4
 800356c:	f7ff ffc8 	bl	8003500 <__swhatbuf_r>
 8003570:	9900      	ldr	r1, [sp, #0]
 8003572:	4605      	mov	r5, r0
 8003574:	4630      	mov	r0, r6
 8003576:	f7ff fa5b 	bl	8002a30 <_malloc_r>
 800357a:	b948      	cbnz	r0, 8003590 <__smakebuf_r+0x44>
 800357c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003580:	059a      	lsls	r2, r3, #22
 8003582:	d4ef      	bmi.n	8003564 <__smakebuf_r+0x18>
 8003584:	f023 0303 	bic.w	r3, r3, #3
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	e7e3      	b.n	8003558 <__smakebuf_r+0xc>
 8003590:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <__smakebuf_r+0x7c>)
 8003592:	62b3      	str	r3, [r6, #40]	; 0x28
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	6020      	str	r0, [r4, #0]
 8003598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800359c:	81a3      	strh	r3, [r4, #12]
 800359e:	9b00      	ldr	r3, [sp, #0]
 80035a0:	6120      	str	r0, [r4, #16]
 80035a2:	6163      	str	r3, [r4, #20]
 80035a4:	9b01      	ldr	r3, [sp, #4]
 80035a6:	b15b      	cbz	r3, 80035c0 <__smakebuf_r+0x74>
 80035a8:	4630      	mov	r0, r6
 80035aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035ae:	f000 f893 	bl	80036d8 <_isatty_r>
 80035b2:	b128      	cbz	r0, 80035c0 <__smakebuf_r+0x74>
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	81a3      	strh	r3, [r4, #12]
 80035c0:	89a0      	ldrh	r0, [r4, #12]
 80035c2:	4305      	orrs	r5, r0
 80035c4:	81a5      	strh	r5, [r4, #12]
 80035c6:	e7cd      	b.n	8003564 <__smakebuf_r+0x18>
 80035c8:	08002849 	.word	0x08002849

080035cc <memchr>:
 80035cc:	4603      	mov	r3, r0
 80035ce:	b510      	push	{r4, lr}
 80035d0:	b2c9      	uxtb	r1, r1
 80035d2:	4402      	add	r2, r0
 80035d4:	4293      	cmp	r3, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	d101      	bne.n	80035de <memchr+0x12>
 80035da:	2000      	movs	r0, #0
 80035dc:	e003      	b.n	80035e6 <memchr+0x1a>
 80035de:	7804      	ldrb	r4, [r0, #0]
 80035e0:	3301      	adds	r3, #1
 80035e2:	428c      	cmp	r4, r1
 80035e4:	d1f6      	bne.n	80035d4 <memchr+0x8>
 80035e6:	bd10      	pop	{r4, pc}

080035e8 <__malloc_lock>:
 80035e8:	4801      	ldr	r0, [pc, #4]	; (80035f0 <__malloc_lock+0x8>)
 80035ea:	f7ff b9ff 	b.w	80029ec <__retarget_lock_acquire_recursive>
 80035ee:	bf00      	nop
 80035f0:	20000154 	.word	0x20000154

080035f4 <__malloc_unlock>:
 80035f4:	4801      	ldr	r0, [pc, #4]	; (80035fc <__malloc_unlock+0x8>)
 80035f6:	f7ff b9fa 	b.w	80029ee <__retarget_lock_release_recursive>
 80035fa:	bf00      	nop
 80035fc:	20000154 	.word	0x20000154

08003600 <_free_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4605      	mov	r5, r0
 8003604:	2900      	cmp	r1, #0
 8003606:	d040      	beq.n	800368a <_free_r+0x8a>
 8003608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800360c:	1f0c      	subs	r4, r1, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	bfb8      	it	lt
 8003612:	18e4      	addlt	r4, r4, r3
 8003614:	f7ff ffe8 	bl	80035e8 <__malloc_lock>
 8003618:	4a1c      	ldr	r2, [pc, #112]	; (800368c <_free_r+0x8c>)
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	b933      	cbnz	r3, 800362c <_free_r+0x2c>
 800361e:	6063      	str	r3, [r4, #4]
 8003620:	6014      	str	r4, [r2, #0]
 8003622:	4628      	mov	r0, r5
 8003624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003628:	f7ff bfe4 	b.w	80035f4 <__malloc_unlock>
 800362c:	42a3      	cmp	r3, r4
 800362e:	d908      	bls.n	8003642 <_free_r+0x42>
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	1821      	adds	r1, r4, r0
 8003634:	428b      	cmp	r3, r1
 8003636:	bf01      	itttt	eq
 8003638:	6819      	ldreq	r1, [r3, #0]
 800363a:	685b      	ldreq	r3, [r3, #4]
 800363c:	1809      	addeq	r1, r1, r0
 800363e:	6021      	streq	r1, [r4, #0]
 8003640:	e7ed      	b.n	800361e <_free_r+0x1e>
 8003642:	461a      	mov	r2, r3
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b10b      	cbz	r3, 800364c <_free_r+0x4c>
 8003648:	42a3      	cmp	r3, r4
 800364a:	d9fa      	bls.n	8003642 <_free_r+0x42>
 800364c:	6811      	ldr	r1, [r2, #0]
 800364e:	1850      	adds	r0, r2, r1
 8003650:	42a0      	cmp	r0, r4
 8003652:	d10b      	bne.n	800366c <_free_r+0x6c>
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	4401      	add	r1, r0
 8003658:	1850      	adds	r0, r2, r1
 800365a:	4283      	cmp	r3, r0
 800365c:	6011      	str	r1, [r2, #0]
 800365e:	d1e0      	bne.n	8003622 <_free_r+0x22>
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	4401      	add	r1, r0
 8003666:	6011      	str	r1, [r2, #0]
 8003668:	6053      	str	r3, [r2, #4]
 800366a:	e7da      	b.n	8003622 <_free_r+0x22>
 800366c:	d902      	bls.n	8003674 <_free_r+0x74>
 800366e:	230c      	movs	r3, #12
 8003670:	602b      	str	r3, [r5, #0]
 8003672:	e7d6      	b.n	8003622 <_free_r+0x22>
 8003674:	6820      	ldr	r0, [r4, #0]
 8003676:	1821      	adds	r1, r4, r0
 8003678:	428b      	cmp	r3, r1
 800367a:	bf01      	itttt	eq
 800367c:	6819      	ldreq	r1, [r3, #0]
 800367e:	685b      	ldreq	r3, [r3, #4]
 8003680:	1809      	addeq	r1, r1, r0
 8003682:	6021      	streq	r1, [r4, #0]
 8003684:	6063      	str	r3, [r4, #4]
 8003686:	6054      	str	r4, [r2, #4]
 8003688:	e7cb      	b.n	8003622 <_free_r+0x22>
 800368a:	bd38      	pop	{r3, r4, r5, pc}
 800368c:	20000158 	.word	0x20000158

08003690 <_read_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	2200      	movs	r2, #0
 800369a:	4d05      	ldr	r5, [pc, #20]	; (80036b0 <_read_r+0x20>)
 800369c:	602a      	str	r2, [r5, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	f7fd f804 	bl	80006ac <_read>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d102      	bne.n	80036ae <_read_r+0x1e>
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	b103      	cbz	r3, 80036ae <_read_r+0x1e>
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	20000160 	.word	0x20000160

080036b4 <_fstat_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	2300      	movs	r3, #0
 80036b8:	4d06      	ldr	r5, [pc, #24]	; (80036d4 <_fstat_r+0x20>)
 80036ba:	4604      	mov	r4, r0
 80036bc:	4608      	mov	r0, r1
 80036be:	4611      	mov	r1, r2
 80036c0:	602b      	str	r3, [r5, #0]
 80036c2:	f7fd f837 	bl	8000734 <_fstat>
 80036c6:	1c43      	adds	r3, r0, #1
 80036c8:	d102      	bne.n	80036d0 <_fstat_r+0x1c>
 80036ca:	682b      	ldr	r3, [r5, #0]
 80036cc:	b103      	cbz	r3, 80036d0 <_fstat_r+0x1c>
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	bd38      	pop	{r3, r4, r5, pc}
 80036d2:	bf00      	nop
 80036d4:	20000160 	.word	0x20000160

080036d8 <_isatty_r>:
 80036d8:	b538      	push	{r3, r4, r5, lr}
 80036da:	2300      	movs	r3, #0
 80036dc:	4d05      	ldr	r5, [pc, #20]	; (80036f4 <_isatty_r+0x1c>)
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	602b      	str	r3, [r5, #0]
 80036e4:	f7fd f835 	bl	8000752 <_isatty>
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	d102      	bne.n	80036f2 <_isatty_r+0x1a>
 80036ec:	682b      	ldr	r3, [r5, #0]
 80036ee:	b103      	cbz	r3, 80036f2 <_isatty_r+0x1a>
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	bd38      	pop	{r3, r4, r5, pc}
 80036f4:	20000160 	.word	0x20000160

080036f8 <_init>:
 80036f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fa:	bf00      	nop
 80036fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	469e      	mov	lr, r3
 8003702:	4770      	bx	lr

08003704 <_fini>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	bf00      	nop
 8003708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370a:	bc08      	pop	{r3}
 800370c:	469e      	mov	lr, r3
 800370e:	4770      	bx	lr
